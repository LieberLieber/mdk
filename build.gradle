import groovy.json.JsonSlurper

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.stream.Collectors

String buildProfile = project.getProperties().getOrDefault('buildProfile', 'opensource')
String buildTag = project.getProperties().get('buildTag')
if (buildTag != null && !buildTag.isEmpty() && buildTag != version) {
    throw new GradleException('Version mismatch: ' + buildTag + ' vs ' + version)
}
if ((buildTag == null || buildTag.isEmpty()) && !version.endsWith('-SNAPSHOT')) {
    version += '-SNAPSHOT'
}

def profiles = new Properties()
def parser = new JsonSlurper()
def defaults = new Properties()
file("buildProfiles/opensource.properties").withInputStream { defaults.load(it) }

if (buildProfile != 'opensource') {
    file("buildProfiles/" + buildProfile + ".properties").withInputStream { profiles.load(it) }
}
else {
    profiles = defaults
}


if (profiles['group'] != null) {
    group = group.replace('org.openmbee', profiles['group'])
}
String buildNumber = project.hasProperty('buildNumber') ? project.getProperty('buildNumber') : System.currentTimeSeconds()
String timestamp = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH:mm").format(LocalDateTime.now())

String[] classpathLibraries = null
if (profiles['classpathLibraries'] != null) {
    classpathLibraries = profiles["classpathLibraries"].toString().split(',')
}
else {
    classpathLibraries = defaults["classpathLibraries"].toString().split(',')
}


String docbookNameVersion = 'docbook-xsl-1.79.1'
String fopNameVersion = 'fop-1.1'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
        classpath group: 'org.openjfx', name: 'javafx-plugin', version: '0.0.9'
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'distribution'
apply plugin: 'org.openjfx.javafxplugin'

// java {
//     sourceCompatibility = 'VERSION_1_8'
//     targetCompatibility = 'VERSION_1_8'
// }

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    flatDir { dirs "libz" } //Put Cameo no-install and plugin zips here
    maven {
        url 'https://repo.gradle.org/gradle/libs-releases-local/'
    }
    ivy {
        url 'https://sourceforge.net/projects/docbook/files/docbook-xsl/'
        layout 'pattern', {
            artifact '[revision]/[classifier].[ext]'
        }
    }
    ivy {    //downloading apache fop (version is defined in precompile)
        url 'https://archive.apache.org/dist/xmlgraphics/fop/binaries/'
        //url 'https://mirror.nodesdirect.com/apache/xmlgraphics/fop/binaries/' for newer version
        layout 'pattern', {
            artifact '[classifier].[ext]'
        }
    }
}
if (profiles['repositories'] != null) {
    def repos = parser.parseText(profiles['repositories'].toString())
    repos.each {
        if (it.type == 'maven') {
            def mavenRepo = it
            repositories.maven {
                url "${mavenRepo.url}"
                if (mavenRepo.credentials == true) {
                    credentials {
                        username project.getProperties().get('artifactoryUsername')
                        password project.getProperties().get('artifactoryPassword')
                    }
                }
            }
        }
        if (it["type"] == 'ivy') {
            def ivyRepo = it
            repositories.ivy {
                url "${ivyRepo.url}"
                if (ivyRepo.credentials == true) {
                    credentials {
                        username project.getProperties().get('artifactoryUsername')
                        password project.getProperties().get('artifactoryPassword')
                    }
                }
                layout "${ivyRepo.layout.type}", {
                    artifact '' + ivyRepo.layout.pattern
                }
            }
        }
    }
}


configurations {
    preCompile
    distribution
    testPublish
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // SLF4J API
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
    // compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21+'

    // SLF4J-Log4j12
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
    // compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21+'

    // JSoup
    compile group: 'org.jsoup', name: 'jsoup', version: '1.6.1'
    // compile group: 'org.jsoup', name: 'jsoup', version: '1.9.1+'

    // JGraphT 
    compile group: 'net.sf.jgrapht', name: 'jgrapht', version: '0.8.3'
    // compile group: 'org.jgrapht', name: 'jgrapht', version: '1.0.0+'

    // JSON Simple
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    // compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1+'

    // SwingX-All
    compile group: 'org.swinglabs.swingx', name: 'swingx-all', version: '1.6.4'
    // compile group: 'org.swinglabs.swingx', name: 'swingx-all', version: '1.6.5+'

    // OpenCSV
    compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'
    // compile group: 'com.opencsv', name: 'opencsv', version: '3.8+'

    // ActiveMQ 
    compile group: 'org.apache.activemq', name: 'activemq-all', version: '5.9.1'
    // compile group: 'org.apache.activemq', name: 'activemq-all', version: '5.14.0+'

    // Jackson
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.3'

    // JSON Patch
    compile group: "com.box", name: "json-patch", version: "1.13"

    // Apache Commons-IO
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    //compile group: 'commons-io', name: 'commons-io', version: '2.4'

    // Apache HTTP
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.2'

    // Apache Commons CLI
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    //OpenMBEE MMS Java Client
    compile group: 'org.openmbee.mms', name: 'mms-java-client', version: '3.4.2'

    compile group: 'com.beust', name: 'jcommander', version: '1.72'



    // Test Dependencies
    //testCompile 'junit:junit:4.11'
    testCompile group: 'org.gradle', name: 'gradle-core', version: '3.5.1'
    testCompile group: 'org.gradle', name: 'gradle-base-services', version: '3.5.1'
    testCompile group: 'org.gradle', name: 'gradle-messaging', version: '3.5.1'
    testCompile group: 'org.gradle', name: 'gradle-logging', version: '3.5.1'
    testCompile group: 'org.gradle', name: 'gradle-process-services', version: '3.5.1'
    testCompile group: 'org.gradle', name: 'gradle-tooling-api', version: '3.5.1'

    testPublish group: 'org.openmbee.testrail', name: 'testrail-cli', version: '1.1.1'

    // Other dependencies we're unable to resolve via standard repositories

    if (profiles['nomagicDeps'] != null) {
        def mdDeps = parser.parseText(profiles['nomagicDeps'].toString())
        mdDeps.each {
            def dep = it
            preCompile group: "${dep.group}", name: "${dep.name}", version: "${dep.version}", classifier: "${dep.classifier != null ? dep.classifier : ''}", ext: "${dep.ext}"
        }
    }
    else {
        preCompile group: 'com.nomagic', name: 'cameo', version: '2021x', classifier: 'Cameo_Systems_Modeler_2021x_no_install', ext: 'zip'
//        preCompile group: 'com.nomagic', name: 'sysml', version: '2021x', classifier: 'SysML_Plugin_2021x', ext: 'zip'
//        preCompile group: 'com.nomagic', name: 'cst', version: '2021x', classifier: 'Cameo_Simulation_Toolkit_Plugin_2021x', ext: 'zip'
    }

    preCompile group: 'org.apache.fop', name: 'fop', version: '1.1', classifier: fopNameVersion + '-bin', ext: 'zip'
    preCompile group: 'net.sourceforge.docbook', name: 'docbook-xsl', version: '1.79.1', classifier: docbookNameVersion, ext: 'zip'

    // JavaFX
    preCompile group: 'org.openjfx', name: 'javafx-fxml', version: '11.0.2'
    preCompile group: 'org.openjfx', name: 'javafx-controls', version: '11.0.2'
    preCompile group: 'org.openjfx', name: 'javafx-swing', version: '11.0.2'

    // This ensures classpath load order to match the MagicDraw provided order and then includes extras needed for non-OpenAPI stuff.
    // This was necessary because of the Application class stubbing that was done in the chromium libraries.
    compile files(classpathLibraries.collect { 'build/dependency-cache/extracted/magicdraw/' + it })
    compile fileTree(dir: 'build/dependency-cache/extracted/magicdraw', include: ['lib/**/*.jar', 'plugins/**/*.jar'], exclude: ([classpathLibraries, ['plugins/com.nomagic.collaborator.publisher/**/*.jar', 'plugins/com.nomagic.magicdraw.emfuml2xmi*/**/*.jar', 'plugins/com.nomagic.magicdraw.automaton/lib/engines/**/*.jar', 'plugins/tomsawyer/**/*.jar', 'plugins/com.intercax.syndeia.md/**/*.jar']]).flatten())
    compile fileTree(dir: 'lib', include: ['**/*.jar'])
    if (profiles["compileFiles"] != null) {
        def compileArray = profiles["compileFiles"].toString().split(',')
        compileArray.each {
            compile files(it)
        }
    }
    else {
        compile files('build/dependency-cache/extracted/fop/jars/fop-1.1.jar', 'build/dependency-cache/extracted/fop/jars/xmlgraphics-commons-1.5.jar')
    }

}

javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing' ]
}

task extractDependencies {
    configurations.preCompile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        inputs.file artifact.file
    }
    doLast {
        inputs.files.each { archive ->
            if (archive.getName().endsWith(fopNameVersion + '-' + fopNameVersion + '-bin.zip')) {
                //extract fop zip
                copy {
                    from zipTree(archive)
                    into archive.getParentFile().getAbsolutePath()
                }
                copy {
                    from archive.getParentFile().getAbsolutePath() + '/' + fopNameVersion + '/build/fop.jar'
                    into 'build/dependency-cache/extracted/fop/jars'
                    rename { String fileName -> fopNameVersion + '.jar' }
                }
                copy {
                    from fileTree(dir: archive.getParentFile().getAbsolutePath() + '/' + fopNameVersion + '/lib', include: '*.jar', exclude: 'commons*.jar')
                    into 'build/dependency-cache/extracted/fop/jars'
                }
                copy { //license3rdparty
                    from archive.getParentFile().getAbsolutePath() + '/' + fopNameVersion + '/LICENSE'
                    into 'build/dependency-cache/extracted/fop/license'
                    rename { String fileName -> 'apache_fop_license.txt' }
                }
                copy { //license3rdparty
                    from fileTree(dir: archive.getParentFile().getAbsolutePath() + '/' + fopNameVersion + '/lib', include: '*.LICENSE.txt', exclude: 'commons*LICENSE.txt')
                    into 'build/dependency-cache/extracted/fop/license'
                    rename { String fileName -> fileName.replace(".LICENSE.txt", "_license.txt") }
                }
            }
            else if (archive.getName().endsWith(docbookNameVersion + '-' + docbookNameVersion + '.zip')) {
                copy {
                    from zipTree(archive)
                    into 'build/dependency-cache/extracted/docbook'
                }
            }
            else if (archive.getName().startsWith('javafx')) {
                copy {
                    from archive.getAbsoluteFile()
                    into 'build/dependency-cache/extracted/javafx'
                }
            }
            else {
                copy {
                    from zipTree(archive)
                    into 'build/dependency-cache/extracted/magicdraw'
                }
            }
        }
        fileTree(dir: 'build/dependency-cache/extracted/magicdraw', include: '*.zip').each { archive ->
            copy {
                from zipTree(archive)
                into 'build/dependency-cache/extracted/magicdraw'
            }
        }
    }
}
compileJava.dependsOn extractDependencies

javadoc {
    options.addStringOption("sourcepath", "")
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task testsJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = 'tests'
    from sourceSets.test.output

    exclude 'gov/nasa/jpl/mbee/mdk/test/framework/**'
    exclude 'org/**'
    exclude 'worker/**'
    //include 'gov/nasa/jpl/mbee/mdk/test/tests/**'
}

task testsHackJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = 'tests-hack'
    from sourceSets.test.output

    include 'gov/nasa/jpl/mbee/mdk/test/framework/**'
    include 'org/**'
    include 'worker/**'
    //exclude 'gov/nasa/jpl/mbee/mdk/test/tests/**'

    manifest {
        attributes(
                'Main-Class': 'gov.nasa.jpl.mbee.mdk.test.framework.GradleMagicDrawLauncher'
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task javadocZip(type: Zip, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

class PreDist extends DefaultTask {
    String humanVersion
    String internalVersion
    String groupName
    String buildTimestamp
    String descriptor
    String docbookVersion

    @TaskAction
    void executeTask() {
        project.copy {
            from 'src/main/dist'
            exclude 'template'
            from 'src/main/dist/template'
            into 'build/generated-dist'
        }
        project.copy {
            from project.configurations.compile.resolvedConfiguration.resolvedArtifacts.file
            from 'lib'
            from project.jar
            into "build/generated-dist/plugins/${groupName}"
        }
        project.copy {
            from "build/dependency-cache/extracted/javafx"
            into "build/generated-dist/plugins/${groupName}/javafx"
        }
        project.copy {
            from project.getTasks().getByName('javadocZip')
            into "build/generated-dist/plugins/${groupName}/javadoc"
        }
        project.copy {
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/fo"
            into "build/generated-dist/plugins/${groupName}/docbook-xsl/fo"
        }
        project.copy {
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/common"
            into "build/generated-dist/plugins/${groupName}/docbook-xsl/common"
        }
        project.copy {
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/COPYING"
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/README"
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/RELEASE-NOTES.txt"
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/VERSION.xsl"
            into "build/generated-dist/plugins/${groupName}/docbook-xsl"
        }
        project.copy {
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/highlighting/common.xsl"
            into "build/generated-dist/plugins/${groupName}/docbook-xsl/highlighting"
        }
        project.copy {
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/html/chunker.xsl"
            into "build/generated-dist/plugins/${groupName}/docbook-xsl/html"
        }
        project.copy {
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/lib/build.xml"
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/lib/lib.xsl"
            into "build/generated-dist/plugins/${groupName}/docbook-xsl/lib"
        }
        project.copy {
            from "build/dependency-cache/extracted/docbook/" + docbookVersion + "/profiling/profile-mode.xsl"
            into "build/generated-dist/plugins/${groupName}/docbook-xsl/profiling"
        }
        //including docbook license files in the plugin directory
        project.copy {
            from "build/dependency-cache/extracted/fop/license"
            into "build/generated-dist/plugins/${groupName}/license"
        }

        //including fop jar files in the plugin directory
        project.copy {
            from "build/dependency-cache/extracted/fop/jars"
            into "build/generated-dist/plugins/${groupName}"
        }

        project.fileTree(dir: 'build/generated-dist', include: '**/*${group}*/**').each { file ->
            file.renameTo(project.file(file.getAbsolutePath().replace('${group}', "${groupName}")))
        }
        String pluginLibraries = ''
        project.fileTree(dir: "build/generated-dist/plugins/${groupName}", include: '**/*.jar').each { file ->
            pluginLibraries += '\t\t<library name=\"' + file.absolutePath.replace(File.separator, '/').replaceAll(~/.*build\/generated-dist\/plugins\/${groupName}\//, '') + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from 'src/main/dist/template/plugins/${group}/plugin.xml'
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + pluginLibraries) }
            filter { String line -> line.replace('${human.version}', humanVersion) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            into "build/generated-dist/plugins/${groupName}"
        }

        String descriptorFiles = ''
        project.fileTree(dir: 'build/generated-dist').each { file ->
            String relativePath = file.absolutePath.replace(File.separator, '/').replaceAll(/.*build\/generated-dist\//, '')
            descriptorFiles += '\t\t<file from=\"' + relativePath + '\" to=\"' + relativePath + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from "src/main/dist/template/data/resourcemanager/${descriptor}"
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + descriptorFiles) }
            filter { String line -> line.replace('${human.version}', humanVersion) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            filter { String line -> line.replace('${build.timestamp}', buildTimestamp) }
            into 'build/generated-dist/data/resourcemanager'
        }
    }
}

task preDist(type: PreDist) {
    humanVersion = version.endsWith('-SNAPSHOT') && buildTag != null && !buildTag.isEmpty() ? version.replace('-SNAPSHOT', '') : version
    internalVersion = buildNumber
    groupName = magicdDrawGroupName
    buildTimestamp = timestamp
    descriptor = descriptorFile
    docbookVersion = docbookNameVersion
}
preDist.dependsOn jar
preDist.dependsOn javadocZip

distributions {
    main {
        contents {
            exclude 'template'
            from 'build/generated-dist'
        }
    }
}

tasks.withType(Tar) {
    enabled = false
}

distZip {
    includeEmptyDirs false
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    eachFile { file ->
        file.setPath(path.substring(path.indexOf("/") + 1, path.length()))
    }
}

distZip.dependsOn preDist

apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "io.github.gradle-nexus.publish-plugin"

publishing {
    // Reference to Gradle publications defined in the build script.
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact testsJar {
                classifier "tests"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            artifact distZip {
                classifier "plugin"
            }
            pom {
                name = project.name
                description = "Cameo / Magic plugin for MMS sync and DocGen"
                url = "https://www.openmbee.org/"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'openmbee'
                        name = 'OpenMBEE'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Open-MBEE/mdk.git'
                    developerConnection = 'scm:git:https://github.com/Open-MBEE/mdk.git'
                    url = 'https://github.com/Open-MBEE/mdk.git'
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publishToSonatype") }
    sign publishing.publications.mavenJava

    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        String signingKey = new String((project.findProperty("signingKey") as String).decodeBase64())
        String signingPassword = project.findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

installDist {
    destinationDir = file('build/plugin')
    doLast {
        copy {
            fileMode 0755
            from 'build/dependency-cache/extracted/magicdraw'
            from 'build/plugin'
            into 'build/install'
        }
    }
}

installDist.dependsOn distZip

task runJava(type: JavaExec) {
    doFirst {
        classpath files(classpathLibraries.collect { 'build/install/' + it })
    }
    workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err
    if (profiles["executablePath"] != null) {
        executable = profiles["executablePath"]
    }
    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['--module-path', 'plugins/gov.nasa.jpl.cae.magicdraw.mdk/javafx', '--add-modules', 'javafx.controls,javafx.swing,javafx.fxml', '-Xmx8192M', '-Xss512M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=true', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true', '-Dorg.osgi.framework.bundle.parent=ext']
    // arguments to pass to the application
    args 'DEVELOPER'
}

runJava.dependsOn installDist

task testAVG(type: JavaExec) {
    doFirst {
        classpath files(classpathLibraries.collect { 'build/install/' + it })
    }
    workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err

    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['-Xmx8192M', '-Xss512M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=true', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true', '-Dorg.osgi.framework.bundle.parent=ext', '-Dcom.nomagic.magicdraw.launcher=com.nomagic.magicdraw.commandline.CommandLineActionLauncher', '-Dcom.nomagic.magicdraw.commandline.action=gov.nasa.jpl.mbee.pma.cli.AutomatedViewGenerator']
}

testAVG.dependsOn installDist

task runScript(type: Exec) {
    workingDir "build/install"
    ignoreExitValue = true

    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'bin\\magicdraw.exe'
    }
    else {
        commandLine 'sh', 'bin/magicdraw'
    }
}

runScript.dependsOn installDist

test {
    ignoreFailures = true
    testLogging.showStandardStreams = true
    forkEvery 1

    workingDir 'build/install'

    /**
     * The short version of the rationale is that with 18.4, MagicDraw introduced the OSGi framework as part of its
     * implementation.
     * Gradle and JUnit work very well together out of the box (generated reports in XML and HTML, tight IDE/Jenkins
     * integration, etc.), and Gradle and OSGi was made to work with the runJava task.
     * However, Gradle had to implement a number of hacks to overcome OS limitations and achieve features that can be
     * applied to a broad range of software.
     * Those hacks work well with most applications but not OSGi (commentary: OSGi doesn't play well with anyone), so
     * we implemented a number of hacks ourselves.
     * They involve classloading order, classpath redirection using the jar argument, reflection, and dynamic
     * classloading.
     * Ultimately, this enabled the use of the well-supported and feature-rich Gradle test task, but at the cost of
     * an implementation that could break in the unlikely, albeit possible, case of either Gradle or MagicDraw
     * significantly changing their implementations of the test and OSGi frameworks, respectively.
     *
     * Clears the default classpath since all the necessary libraries are being passed as arguments to
     * GradleMagicDrawLauncher to be added to the OSGi classpath.
     * Then it utilizes the -jar JVM argument to override the default Gradle command and pass the original command
     * as arguments to the main class of the jar, GradleMagicDrawLauncher,
     * including the classpath arguments (one of our own and one of Gradle's). It additionally parses and sets the
     * system properties that are passed.
     *
     * Example command: .../java -Dcom.nomagic.osgi.config.dir=configuration -Desi.system.config=data/application.conf -Djava.security.manager=worker.org.gradle.process.internal.worker.child.BootstrapSecurityManager -Dlogback.configurationFile=data/logback.xml -Dmd.class.path=$java.class.path -jar /Users/igomes/mdk/build/libs/mdk-*-tests-hack.jar -cp ... -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant -ea -cp .../.gradle/caches/.../workerMain/gradle-worker.jar worker.org.gradle.process.internal.worker.GradleWorkerMain 'Gradle Test Executor 1'
     *
     * @author igomes
     */
    classpath = files()
    doFirst {
        def arguments = ['-jar', testsHackJar.outputs.files.singleFile, '-cp',
                         fileTree(dir: 'build/generated-dist', include: '**/*.jar').getFiles().stream().map { i -> i.getAbsolutePath() }.collect(Collectors.joining(File.pathSeparator)) + File.pathSeparator +
                                 /*fileTree(dir: 'build/install', include: ['plugins/** /*.jar']).asPath + */
                                 files(classpathLibraries.collect { 'build/install/' + it }).getFiles().stream().map { i -> i.getAbsolutePath() }.collect(Collectors.joining(File.pathSeparator)) + File.pathSeparator +
                                 configurations.testCompile.resolvedConfiguration.resolvedArtifacts.stream().map { i -> i.getFile().getAbsolutePath() }.collect(Collectors.joining(File.pathSeparator)) + File.pathSeparator +
                                 testsJar.outputs.files.singleFile, '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=true', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-test', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true', '-Dorg.osgi.framework.bundle.parent=ext']
        String magicDrawLicense = project.getProperties().get('magicDrawLicense')
        if (magicDrawLicense != null && !magicDrawLicense.isEmpty()) {
            new File('build/install/mdlicense.tmp').write(new String(magicDrawLicense.decodeBase64()))
        }
        String additionalTestArguments = project.getProperties().get('additionalTestArguments')
        if (additionalTestArguments != null && !additionalTestArguments.isEmpty()) {
            arguments.addAll(additionalTestArguments.split(','))
        }
        jvmArgs = arguments
    }
}

test.dependsOn testsJar
test.dependsOn testsHackJar
test.dependsOn installDist

task testrailPublish(type: JavaExec) {
    classpath configurations.testPublish
    main = 'org.openmbee.testrail.cli.JUnitPublisher'
    def arguments = ['--directory', 'build/test-results/test', '--milestone', version.replace('-SNAPSHOT', '')]
    def s
    if ((s = project.getProperties().get('testrailHost')) != null) {
        arguments.addAll('--host', s)
    }
    if ((s = project.getProperties().get('testrailUser')) != null || (s = project.getProperties().get('testrailUsername')) != null) {
        arguments.addAll('--user', s)
    }
    if ((s = project.getProperties().get('testrailPassword')) != null) {
        arguments.addAll('--password', s)
    }
    if ((s = project.getProperties().get('testrailSuiteId')) != null) {
        arguments.addAll('--suite-id', s)
    }
    if ((s = project.getProperties().get('testrailPlanId')) != null) {
        arguments.addAll('--plan-id', s)
    }
    if ((s = project.getProperties().get('testrailRunName')) != null) {
        arguments.addAll('--run-name', s)
    }
    if (project.getProperties().hasProperty('testrailSkipCloseRun')) {
        arguments.add('--skip-close-run')
    }
    args arguments

    standardOutput = System.out
    errorOutput = System.err
}

configure(testrailPublish) {
    group = 'Publishing'
    description = 'Publish test results to TestRail'
}
testrailPublish.dependsOn test
