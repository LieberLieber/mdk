package org.openmbee.mdk;

// Generated by Developer Tools Plugin: Generate Profile Class Implementation (wrappers)

import com.nomagic.magicdraw.uml.BaseElement;
import com.nomagic.magicdraw.uml2.Profiles;
import com.nomagic.profiles.ProfileCache;
import com.nomagic.profiles.ProfileImplementation;
import com.nomagic.profiles.ProfilesBridge;
import com.nomagic.uml2.ext.magicdraw.classes.mdkernel.*;
import com.nomagic.uml2.ext.magicdraw.mdprofiles.Stereotype;
import com.nomagic.uml2.project.ElementProject;
import javax.annotation.CheckForNull;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;

@SuppressWarnings("WeakerAccess, unused")
public class SysMLExtensions extends ProfileImplementation
{
    public static final String PROFILE_URI =  "http://openmbee.org/mdk/sysml-extensions";

    public static final String PROFILE_NAME =  "SysML Extensions";

    private final AppendixViewStereotype appendixViewStereotype;
    private final AssociationTypeChoosableStereotype associationTypeChoosableStereotype;
    private final AttributeChoosableStereotype attributeChoosableStereotype;
    private final BulletedListStereotype bulletedListStereotype;
    private final CollectFilterUserScriptStereotype collectFilterUserScriptStereotype;
    private final CollectByAssociationStereotype collectByAssociationStereotype;
    private final CollectByDirectedRelationshipMetaclassesStereotype collectByDirectedRelationshipMetaclassesStereotype;
    private final CollectByDirectedRelationshipStereotypesStereotype collectByDirectedRelationshipStereotypesStereotype;
    private final CollectByExpressionStereotype collectByExpressionStereotype;
    private final CollectByStereotypePropertiesStereotype collectByStereotypePropertiesStereotype;
    private final CollectClassifierAttributesStereotype collectClassifierAttributesStereotype;
    private final CollectOrFilterStereotype collectOrFilterStereotype;
    private final CollectOwnedElementsStereotype collectOwnedElementsStereotype;
    private final CollectOwnersStereotype collectOwnersStereotype;
    private final CollectThingsOnDiagramStereotype collectThingsOnDiagramStereotype;
    private final CollectTypesStereotype collectTypesStereotype;
    private final CollectionAndFilterGroupStereotype collectionAndFilterGroupStereotype;
    private final ConformsStereotype conformsStereotype;
    private final ConsiderDerivedChoosableStereotype considerDerivedChoosableStereotype;
    private final ConstraintStereotype constraintStereotype;
    private final ContainerStereotype containerStereotype;
    private final DepthChoosableStereotype depthChoosableStereotype;
    private final DiagramTypeChoosableStereotype diagramTypeChoosableStereotype;
    private final DirectionChoosableStereotype directionChoosableStereotype;
    private final DocGenScriptStereotype docGenScriptStereotype;
    private final DocumentStereotype documentStereotype;
    private final DocumentMetaStereotype documentMetaStereotype;
    private final DocumentationChoosableStereotype documentationChoosableStereotype;
    private final DocumentationSkippableStereotype documentationSkippableStereotype;
    private final DynamicViewStereotype dynamicViewStereotype;
    private final EditableChoosableStereotype editableChoosableStereotype;
    private final EditableTableStereotype editableTableStereotype;
    private final ExposeStereotype exposeStereotype;
    private final ExpressionStereotype expressionStereotype;
    private final ExpressionChoosableStereotype expressionChoosableStereotype;
    private final ExpressionLibraryStereotype expressionLibraryStereotype;
    private final FilterByDiagramTypeStereotype filterByDiagramTypeStereotype;
    private final FilterByExpressionStereotype filterByExpressionStereotype;
    private final FilterByMetaclassesStereotype filterByMetaclassesStereotype;
    private final FilterByNamesStereotype filterByNamesStereotype;
    private final FilterByStereotypesStereotype filterByStereotypesStereotype;
    private final FormattingAndDisplayTemplateStereotype formattingAndDisplayTemplateStereotype;
    private final GenericTableStereotype genericTableStereotype;
    private final GroupStereotype groupStereotype;
    private final HasCaptionsStereotype hasCaptionsStereotype;
    private final HasTimeoutStereotype hasTimeoutStereotype;
    private final HasTitleStereotype hasTitleStereotype;
    private final HasTitleStuffStereotype hasTitleStuffStereotype;
    private final HasTitlesStereotype hasTitlesStereotype;
    private final HasTypesStereotype hasTypesStereotype;
    private final HeadersChoosableStereotype headersChoosableStereotype;
    private final HierarchicalPropertiesTableStereotype hierarchicalPropertiesTableStereotype;
    private final IgnorableStereotype ignorableStereotype;
    private final ImageStereotype imageStereotype;
    private final IncludeChoosableStereotype includeChoosableStereotype;
    private final IncludeInheritedChoosableStereotype includeInheritedChoosableStereotype;
    private final IntersectionStereotype intersectionStereotype;
    private final JavaExtensionStereotype javaExtensionStereotype;
    private final LoopableStereotype loopableStereotype;
    private final MetaclassChoosableStereotype metaclassChoosableStereotype;
    private final MethodStereotype methodStereotype;
    private final ModelManagementSystemStereotype modelManagementSystemStereotype;
    private final NameChoosableStereotype nameChoosableStereotype;
    private final ParagraphStereotype paragraphStereotype;
    private final ParallelStereotype parallelStereotype;
    private final PlotStereotype plotStereotype;
    private final PrecisionChoosableStereotype precisionChoosableStereotype;
    private final ProductStereotype productStereotype;
    private final PropertiesTableByAttributesStereotype propertiesTableByAttributesStereotype;
    private final PropertyChoosableStereotype propertyChoosableStereotype;
    private final RemoveDuplicatesStereotype removeDuplicatesStereotype;
    private final SimulateStereotype simulateStereotype;
    private final SkippableStereotype skippableStereotype;
    private final SortByAttributeStereotype sortByAttributeStereotype;
    private final SortByExpressionStereotype sortByExpressionStereotype;
    private final SortByNameStereotype sortByNameStereotype;
    private final SortByPropertyStereotype sortByPropertyStereotype;
    private final SortableStereotype sortableStereotype;
    private final StereotypeChoosableStereotype stereotypeChoosableStereotype;
    private final StereotypePropertiesChoosableStereotype stereotypePropertiesChoosableStereotype;
    private final StereotypedRelationshipsChoosableStereotype stereotypedRelationshipsChoosableStereotype;
    private final StructuredQueryStereotype structuredQueryStereotype;
    private final TableStereotype tableStereotype;
    private final TableAttributeColumnStereotype tableAttributeColumnStereotype;
    private final TableColumnStereotype tableColumnStereotype;
    private final TableColumnGroupStereotype tableColumnGroupStereotype;
    private final TableExpressionColumnStereotype tableExpressionColumnStereotype;
    private final TablePropertyColumnStereotype tablePropertyColumnStereotype;
    private final TableStructureStereotype tableStructureStereotype;
    private final TemporalDiffStereotype temporalDiffStereotype;
    private final TomSawyerDiagramStereotype tomSawyerDiagramStereotype;
    private final UnionStereotype unionStereotype;
    private final UserScriptStereotype userScriptStereotype;
    private final ValidationScriptStereotype validationScriptStereotype;
    private final ViewpointConstraintStereotype viewpointConstraintStereotype;
    private final XorStereotype xorStereotype;
    private final AspectStereotype aspectStereotype;
    private final CharacterizesStereotype characterizesStereotype;
    private final ViewStereotype viewStereotype;

    private final AttributeEnumeration attributeEnumeration;
    private final DiagramTypeEnumeration diagramTypeEnumeration;
    private final LanguageEnumeration languageEnumeration;
    private final PlotTypeEnumeration plotTypeEnumeration;
    private final TomSawyerDiagramTypeEnumeration tomSawyerDiagramTypeEnumeration;
    public static SysMLExtensions getInstance(BaseElement baseElement)
    {
        SysMLExtensions profile = ProfilesBridge.getProfile(SysMLExtensions.class, baseElement);
        if (profile == null)
        {
            return ProfilesBridge.createProfile(SysMLExtensions.class, baseElement, SysMLExtensions::new, PROFILE_NAME, PROFILE_URI);
        }
        return profile;
    }
    public static SysMLExtensions getInstanceByProject(ElementProject project)
    {
        SysMLExtensions profile = ProfilesBridge.getProfile(SysMLExtensions.class, project);
        if (profile == null)
        {
            return ProfilesBridge.createProfile(SysMLExtensions.class, project, SysMLExtensions::new, PROFILE_NAME, PROFILE_URI);
        }
        return profile;
    }
    public  SysMLExtensions(ProfileCache cache)
    {
        super(cache);
        appendixViewStereotype = new AppendixViewStereotype(this);
        associationTypeChoosableStereotype = new AssociationTypeChoosableStereotype(this);
        attributeChoosableStereotype = new AttributeChoosableStereotype(this);
        bulletedListStereotype = new BulletedListStereotype(this);
        collectFilterUserScriptStereotype = new CollectFilterUserScriptStereotype(this);
        collectByAssociationStereotype = new CollectByAssociationStereotype(this);
        collectByDirectedRelationshipMetaclassesStereotype = new CollectByDirectedRelationshipMetaclassesStereotype(this);
        collectByDirectedRelationshipStereotypesStereotype = new CollectByDirectedRelationshipStereotypesStereotype(this);
        collectByExpressionStereotype = new CollectByExpressionStereotype(this);
        collectByStereotypePropertiesStereotype = new CollectByStereotypePropertiesStereotype(this);
        collectClassifierAttributesStereotype = new CollectClassifierAttributesStereotype(this);
        collectOrFilterStereotype = new CollectOrFilterStereotype(this);
        collectOwnedElementsStereotype = new CollectOwnedElementsStereotype(this);
        collectOwnersStereotype = new CollectOwnersStereotype(this);
        collectThingsOnDiagramStereotype = new CollectThingsOnDiagramStereotype(this);
        collectTypesStereotype = new CollectTypesStereotype(this);
        collectionAndFilterGroupStereotype = new CollectionAndFilterGroupStereotype(this);
        conformsStereotype = new ConformsStereotype(this);
        considerDerivedChoosableStereotype = new ConsiderDerivedChoosableStereotype(this);
        constraintStereotype = new ConstraintStereotype(this);
        containerStereotype = new ContainerStereotype(this);
        depthChoosableStereotype = new DepthChoosableStereotype(this);
        diagramTypeChoosableStereotype = new DiagramTypeChoosableStereotype(this);
        directionChoosableStereotype = new DirectionChoosableStereotype(this);
        docGenScriptStereotype = new DocGenScriptStereotype(this);
        documentStereotype = new DocumentStereotype(this);
        documentMetaStereotype = new DocumentMetaStereotype(this);
        documentationChoosableStereotype = new DocumentationChoosableStereotype(this);
        documentationSkippableStereotype = new DocumentationSkippableStereotype(this);
        dynamicViewStereotype = new DynamicViewStereotype(this);
        editableChoosableStereotype = new EditableChoosableStereotype(this);
        editableTableStereotype = new EditableTableStereotype(this);
        exposeStereotype = new ExposeStereotype(this);
        expressionStereotype = new ExpressionStereotype(this);
        expressionChoosableStereotype = new ExpressionChoosableStereotype(this);
        expressionLibraryStereotype = new ExpressionLibraryStereotype(this);
        filterByDiagramTypeStereotype = new FilterByDiagramTypeStereotype(this);
        filterByExpressionStereotype = new FilterByExpressionStereotype(this);
        filterByMetaclassesStereotype = new FilterByMetaclassesStereotype(this);
        filterByNamesStereotype = new FilterByNamesStereotype(this);
        filterByStereotypesStereotype = new FilterByStereotypesStereotype(this);
        formattingAndDisplayTemplateStereotype = new FormattingAndDisplayTemplateStereotype(this);
        genericTableStereotype = new GenericTableStereotype(this);
        groupStereotype = new GroupStereotype(this);
        hasCaptionsStereotype = new HasCaptionsStereotype(this);
        hasTimeoutStereotype = new HasTimeoutStereotype(this);
        hasTitleStereotype = new HasTitleStereotype(this);
        hasTitleStuffStereotype = new HasTitleStuffStereotype(this);
        hasTitlesStereotype = new HasTitlesStereotype(this);
        hasTypesStereotype = new HasTypesStereotype(this);
        headersChoosableStereotype = new HeadersChoosableStereotype(this);
        hierarchicalPropertiesTableStereotype = new HierarchicalPropertiesTableStereotype(this);
        ignorableStereotype = new IgnorableStereotype(this);
        imageStereotype = new ImageStereotype(this);
        includeChoosableStereotype = new IncludeChoosableStereotype(this);
        includeInheritedChoosableStereotype = new IncludeInheritedChoosableStereotype(this);
        intersectionStereotype = new IntersectionStereotype(this);
        javaExtensionStereotype = new JavaExtensionStereotype(this);
        loopableStereotype = new LoopableStereotype(this);
        metaclassChoosableStereotype = new MetaclassChoosableStereotype(this);
        methodStereotype = new MethodStereotype(this);
        modelManagementSystemStereotype = new ModelManagementSystemStereotype(this);
        nameChoosableStereotype = new NameChoosableStereotype(this);
        paragraphStereotype = new ParagraphStereotype(this);
        parallelStereotype = new ParallelStereotype(this);
        plotStereotype = new PlotStereotype(this);
        precisionChoosableStereotype = new PrecisionChoosableStereotype(this);
        productStereotype = new ProductStereotype(this);
        propertiesTableByAttributesStereotype = new PropertiesTableByAttributesStereotype(this);
        propertyChoosableStereotype = new PropertyChoosableStereotype(this);
        removeDuplicatesStereotype = new RemoveDuplicatesStereotype(this);
        simulateStereotype = new SimulateStereotype(this);
        skippableStereotype = new SkippableStereotype(this);
        sortByAttributeStereotype = new SortByAttributeStereotype(this);
        sortByExpressionStereotype = new SortByExpressionStereotype(this);
        sortByNameStereotype = new SortByNameStereotype(this);
        sortByPropertyStereotype = new SortByPropertyStereotype(this);
        sortableStereotype = new SortableStereotype(this);
        stereotypeChoosableStereotype = new StereotypeChoosableStereotype(this);
        stereotypePropertiesChoosableStereotype = new StereotypePropertiesChoosableStereotype(this);
        stereotypedRelationshipsChoosableStereotype = new StereotypedRelationshipsChoosableStereotype(this);
        structuredQueryStereotype = new StructuredQueryStereotype(this);
        tableStereotype = new TableStereotype(this);
        tableAttributeColumnStereotype = new TableAttributeColumnStereotype(this);
        tableColumnStereotype = new TableColumnStereotype(this);
        tableColumnGroupStereotype = new TableColumnGroupStereotype(this);
        tableExpressionColumnStereotype = new TableExpressionColumnStereotype(this);
        tablePropertyColumnStereotype = new TablePropertyColumnStereotype(this);
        tableStructureStereotype = new TableStructureStereotype(this);
        temporalDiffStereotype = new TemporalDiffStereotype(this);
        tomSawyerDiagramStereotype = new TomSawyerDiagramStereotype(this);
        unionStereotype = new UnionStereotype(this);
        userScriptStereotype = new UserScriptStereotype(this);
        validationScriptStereotype = new ValidationScriptStereotype(this);
        viewpointConstraintStereotype = new ViewpointConstraintStereotype(this);
        xorStereotype = new XorStereotype(this);
        aspectStereotype = new AspectStereotype(this);
        characterizesStereotype = new CharacterizesStereotype(this);
        viewStereotype = new ViewStereotype(this);
        attributeEnumeration = new AttributeEnumeration(this);
        diagramTypeEnumeration = new DiagramTypeEnumeration(this);
        languageEnumeration = new LanguageEnumeration(this);
        plotTypeEnumeration = new PlotTypeEnumeration(this);
        tomSawyerDiagramTypeEnumeration = new TomSawyerDiagramTypeEnumeration(this);

    }
    public AppendixViewStereotype appendixView()
    {
        return appendixViewStereotype;
    }
    public AssociationTypeChoosableStereotype associationTypeChoosable()
    {
        return associationTypeChoosableStereotype;
    }
    public AttributeChoosableStereotype attributeChoosable()
    {
        return attributeChoosableStereotype;
    }
    public BulletedListStereotype bulletedList()
    {
        return bulletedListStereotype;
    }
    public CollectFilterUserScriptStereotype collectFilterUserScript()
    {
        return collectFilterUserScriptStereotype;
    }
    public CollectByAssociationStereotype collectByAssociation()
    {
        return collectByAssociationStereotype;
    }
    public CollectByDirectedRelationshipMetaclassesStereotype collectByDirectedRelationshipMetaclasses()
    {
        return collectByDirectedRelationshipMetaclassesStereotype;
    }
    public CollectByDirectedRelationshipStereotypesStereotype collectByDirectedRelationshipStereotypes()
    {
        return collectByDirectedRelationshipStereotypesStereotype;
    }
    public CollectByExpressionStereotype collectByExpression()
    {
        return collectByExpressionStereotype;
    }
    public CollectByStereotypePropertiesStereotype collectByStereotypeProperties()
    {
        return collectByStereotypePropertiesStereotype;
    }
    public CollectClassifierAttributesStereotype collectClassifierAttributes()
    {
        return collectClassifierAttributesStereotype;
    }
    public CollectOrFilterStereotype collectOrFilter()
    {
        return collectOrFilterStereotype;
    }
    public CollectOwnedElementsStereotype collectOwnedElements()
    {
        return collectOwnedElementsStereotype;
    }
    public CollectOwnersStereotype collectOwners()
    {
        return collectOwnersStereotype;
    }
    public CollectThingsOnDiagramStereotype collectThingsOnDiagram()
    {
        return collectThingsOnDiagramStereotype;
    }
    public CollectTypesStereotype collectTypes()
    {
        return collectTypesStereotype;
    }
    public CollectionAndFilterGroupStereotype collectionAndFilterGroup()
    {
        return collectionAndFilterGroupStereotype;
    }
    public ConformsStereotype conforms()
    {
        return conformsStereotype;
    }
    public ConsiderDerivedChoosableStereotype considerDerivedChoosable()
    {
        return considerDerivedChoosableStereotype;
    }
    public ConstraintStereotype constraint()
    {
        return constraintStereotype;
    }
    public ContainerStereotype container()
    {
        return containerStereotype;
    }
    public DepthChoosableStereotype depthChoosable()
    {
        return depthChoosableStereotype;
    }
    public DiagramTypeChoosableStereotype diagramTypeChoosable()
    {
        return diagramTypeChoosableStereotype;
    }
    public DirectionChoosableStereotype directionChoosable()
    {
        return directionChoosableStereotype;
    }
    public DocGenScriptStereotype docGenScript()
    {
        return docGenScriptStereotype;
    }
    public DocumentStereotype document()
    {
        return documentStereotype;
    }
    public DocumentMetaStereotype documentMeta()
    {
        return documentMetaStereotype;
    }
    public DocumentationChoosableStereotype documentationChoosable()
    {
        return documentationChoosableStereotype;
    }
    public DocumentationSkippableStereotype documentationSkippable()
    {
        return documentationSkippableStereotype;
    }
    public DynamicViewStereotype dynamicView()
    {
        return dynamicViewStereotype;
    }
    public EditableChoosableStereotype editableChoosable()
    {
        return editableChoosableStereotype;
    }
    public EditableTableStereotype editableTable()
    {
        return editableTableStereotype;
    }
    public ExposeStereotype expose()
    {
        return exposeStereotype;
    }
    public ExpressionStereotype expression()
    {
        return expressionStereotype;
    }
    public ExpressionChoosableStereotype expressionChoosable()
    {
        return expressionChoosableStereotype;
    }
    public ExpressionLibraryStereotype expressionLibrary()
    {
        return expressionLibraryStereotype;
    }
    public FilterByDiagramTypeStereotype filterByDiagramType()
    {
        return filterByDiagramTypeStereotype;
    }
    public FilterByExpressionStereotype filterByExpression()
    {
        return filterByExpressionStereotype;
    }
    public FilterByMetaclassesStereotype filterByMetaclasses()
    {
        return filterByMetaclassesStereotype;
    }
    public FilterByNamesStereotype filterByNames()
    {
        return filterByNamesStereotype;
    }
    public FilterByStereotypesStereotype filterByStereotypes()
    {
        return filterByStereotypesStereotype;
    }
    public FormattingAndDisplayTemplateStereotype formattingAndDisplayTemplate()
    {
        return formattingAndDisplayTemplateStereotype;
    }
    public GenericTableStereotype genericTable()
    {
        return genericTableStereotype;
    }
    public GroupStereotype group()
    {
        return groupStereotype;
    }
    public HasCaptionsStereotype hasCaptions()
    {
        return hasCaptionsStereotype;
    }
    public HasTimeoutStereotype hasTimeout()
    {
        return hasTimeoutStereotype;
    }
    public HasTitleStereotype hasTitle()
    {
        return hasTitleStereotype;
    }
    public HasTitleStuffStereotype hasTitleStuff()
    {
        return hasTitleStuffStereotype;
    }
    public HasTitlesStereotype hasTitles()
    {
        return hasTitlesStereotype;
    }
    public HasTypesStereotype hasTypes()
    {
        return hasTypesStereotype;
    }
    public HeadersChoosableStereotype headersChoosable()
    {
        return headersChoosableStereotype;
    }
    public HierarchicalPropertiesTableStereotype hierarchicalPropertiesTable()
    {
        return hierarchicalPropertiesTableStereotype;
    }
    public IgnorableStereotype ignorable()
    {
        return ignorableStereotype;
    }
    public ImageStereotype image()
    {
        return imageStereotype;
    }
    public IncludeChoosableStereotype includeChoosable()
    {
        return includeChoosableStereotype;
    }
    public IncludeInheritedChoosableStereotype includeInheritedChoosable()
    {
        return includeInheritedChoosableStereotype;
    }
    public IntersectionStereotype intersection()
    {
        return intersectionStereotype;
    }
    public JavaExtensionStereotype javaExtension()
    {
        return javaExtensionStereotype;
    }
    public LoopableStereotype loopable()
    {
        return loopableStereotype;
    }
    public MetaclassChoosableStereotype metaclassChoosable()
    {
        return metaclassChoosableStereotype;
    }
    public MethodStereotype method()
    {
        return methodStereotype;
    }
    public ModelManagementSystemStereotype modelManagementSystem()
    {
        return modelManagementSystemStereotype;
    }
    public NameChoosableStereotype nameChoosable()
    {
        return nameChoosableStereotype;
    }
    public ParagraphStereotype paragraph()
    {
        return paragraphStereotype;
    }
    public ParallelStereotype parallel()
    {
        return parallelStereotype;
    }
    public PlotStereotype plot()
    {
        return plotStereotype;
    }
    public PrecisionChoosableStereotype precisionChoosable()
    {
        return precisionChoosableStereotype;
    }
    public ProductStereotype product()
    {
        return productStereotype;
    }
    public PropertiesTableByAttributesStereotype propertiesTableByAttributes()
    {
        return propertiesTableByAttributesStereotype;
    }
    public PropertyChoosableStereotype propertyChoosable()
    {
        return propertyChoosableStereotype;
    }
    public RemoveDuplicatesStereotype removeDuplicates()
    {
        return removeDuplicatesStereotype;
    }
    public SimulateStereotype simulate()
    {
        return simulateStereotype;
    }
    public SkippableStereotype skippable()
    {
        return skippableStereotype;
    }
    public SortByAttributeStereotype sortByAttribute()
    {
        return sortByAttributeStereotype;
    }
    public SortByExpressionStereotype sortByExpression()
    {
        return sortByExpressionStereotype;
    }
    public SortByNameStereotype sortByName()
    {
        return sortByNameStereotype;
    }
    public SortByPropertyStereotype sortByProperty()
    {
        return sortByPropertyStereotype;
    }
    public SortableStereotype sortable()
    {
        return sortableStereotype;
    }
    public StereotypeChoosableStereotype stereotypeChoosable()
    {
        return stereotypeChoosableStereotype;
    }
    public StereotypePropertiesChoosableStereotype stereotypePropertiesChoosable()
    {
        return stereotypePropertiesChoosableStereotype;
    }
    public StereotypedRelationshipsChoosableStereotype stereotypedRelationshipsChoosable()
    {
        return stereotypedRelationshipsChoosableStereotype;
    }
    public StructuredQueryStereotype structuredQuery()
    {
        return structuredQueryStereotype;
    }
    public TableStereotype table()
    {
        return tableStereotype;
    }
    public TableAttributeColumnStereotype tableAttributeColumn()
    {
        return tableAttributeColumnStereotype;
    }
    public TableColumnStereotype tableColumn()
    {
        return tableColumnStereotype;
    }
    public TableColumnGroupStereotype tableColumnGroup()
    {
        return tableColumnGroupStereotype;
    }
    public TableExpressionColumnStereotype tableExpressionColumn()
    {
        return tableExpressionColumnStereotype;
    }
    public TablePropertyColumnStereotype tablePropertyColumn()
    {
        return tablePropertyColumnStereotype;
    }
    public TableStructureStereotype tableStructure()
    {
        return tableStructureStereotype;
    }
    public TemporalDiffStereotype temporalDiff()
    {
        return temporalDiffStereotype;
    }
    public TomSawyerDiagramStereotype tomSawyerDiagram()
    {
        return tomSawyerDiagramStereotype;
    }
    public UnionStereotype union()
    {
        return unionStereotype;
    }
    public UserScriptStereotype userScript()
    {
        return userScriptStereotype;
    }
    public ValidationScriptStereotype validationScript()
    {
        return validationScriptStereotype;
    }
    public ViewpointConstraintStereotype viewpointConstraint()
    {
        return viewpointConstraintStereotype;
    }
    public XorStereotype xor()
    {
        return xorStereotype;
    }
    public AspectStereotype aspect()
    {
        return aspectStereotype;
    }
    public CharacterizesStereotype characterizes()
    {
        return characterizesStereotype;
    }
    public ViewStereotype view()
    {
        return viewStereotype;
    }



    public static final String ATTRIBUTE_DATATYPE = "Attribute";

    public static final String DIAGRAMTYPE_DATATYPE = "DiagramType";

    public static final String LANGUAGE_DATATYPE = "Language";

    public static final String PLOTTYPE_DATATYPE = "PlotType";

    public static final String TOMSAWYERDIAGRAMTYPE_DATATYPE = "TomSawyerDiagramType";

    @SuppressWarnings("ConstantConditions")
    public Enumeration getAttribute()
    {
        return attributeEnumeration.getEnumeration();
    }

    @SuppressWarnings("ConstantConditions")
    public Enumeration getDiagramType()
    {
        return diagramTypeEnumeration.getEnumeration();
    }

    @SuppressWarnings("ConstantConditions")
    public Enumeration getLanguage()
    {
        return languageEnumeration.getEnumeration();
    }

    @SuppressWarnings("ConstantConditions")
    public Enumeration getPlotType()
    {
        return plotTypeEnumeration.getEnumeration();
    }

    @SuppressWarnings("ConstantConditions")
    public Enumeration getTomSawyerDiagramType()
    {
        return tomSawyerDiagramTypeEnumeration.getEnumeration();
    }



    //enumeration Attribute literals
    public enum AttributeEnum implements TextProvider
    {
        NAME(AttributeEnumeration.NAME),
        DOCUMENTATION(AttributeEnumeration.DOCUMENTATION),
        VALUE(AttributeEnumeration.VALUE);
        private final String text;

        AttributeEnum(String text)
        {
            this.text = text;
        }

        @Override
        public String getText()
        {
            return this.text;
        }
        @CheckForNull
        public static AttributeEnum from(@CheckForNull Object o)
        {
            return valueFromString(AttributeEnum.class, o);
        }
        @CheckForNull
        public static AttributeEnum toEnum(EnumerationLiteral literal)
        {
            return from(literal);
        }
        @CheckForNull
        public static EnumerationLiteral toEnumerationLiteral(SysMLExtensions profile, AttributeEnum anEnum)
        {
            if (anEnum == NAME)
            {
                return profile.attributeEnumeration.getNameEnumerationLiteral();
            }
            if (anEnum == DOCUMENTATION)
            {
                return profile.attributeEnumeration.getDocumentationEnumerationLiteral();
            }
            if (anEnum == VALUE)
            {
                return profile.attributeEnumeration.getValueEnumerationLiteral();
            }
            return null;
        }
    }
    private static class AttributeEnumeration extends EnumerationWrapper
    {
        public static final String NAME =  "Name";
        public static final String DOCUMENTATION =  "Documentation";
        public static final String VALUE =  "Value";
        @CheckForNull
        private EnumerationLiteral name;
        @CheckForNull
        private EnumerationLiteral documentation;
        @CheckForNull
        private EnumerationLiteral value;
        private  AttributeEnumeration(SysMLExtensions profile)
        {
            super(profile);
        }
        @CheckForNull
        public Enumeration getEnumeration()
        {
            return getElementByName(ATTRIBUTE_DATATYPE);
        }
        @CheckForNull
        public EnumerationLiteral getNameEnumerationLiteral()
        {
            if (name == null)
            {
                name = getEnumerationLiteralByName(getEnumeration(), NAME);
            }
            return name;
        }
        @CheckForNull
        public EnumerationLiteral getDocumentationEnumerationLiteral()
        {
            if (documentation == null)
            {
                documentation = getEnumerationLiteralByName(getEnumeration(), DOCUMENTATION);
            }
            return documentation;
        }
        @CheckForNull
        public EnumerationLiteral getValueEnumerationLiteral()
        {
            if (value == null)
            {
                value = getEnumerationLiteralByName(getEnumeration(), VALUE);
            }
            return value;
        }
        @Override
        protected void clear()
        {
            super.clear();
            name = null;
            documentation = null;
            value = null;
        }
    }


    //enumeration DiagramType literals
    public enum DiagramTypeEnum implements TextProvider
    {
        ACTIVITY_DIAGRAM(DiagramTypeEnumeration.ACTIVITY_DIAGRAM),
        BEHAVIOR_DIAGRAM(DiagramTypeEnumeration.BEHAVIOR_DIAGRAM),
        SEQUENCE_DIAGRAM(DiagramTypeEnumeration.SEQUENCE_DIAGRAM),
        INTERACTION_DIAGRAM(DiagramTypeEnumeration.INTERACTION_DIAGRAM),
        USE_CASE_DIAGRAM(DiagramTypeEnumeration.USE_CASE_DIAGRAM),
        STATE_MACHINE_DIAGRAM(DiagramTypeEnumeration.STATE_MACHINE_DIAGRAM),
        PROTOCOL_STATE_MACHINE_DIAGRAM(DiagramTypeEnumeration.PROTOCOL_STATE_MACHINE_DIAGRAM),
        COMPOSITE_STRUCTURE_DIAGRAM(DiagramTypeEnumeration.COMPOSITE_STRUCTURE_DIAGRAM),
        STATIC_DIAGRAM(DiagramTypeEnumeration.STATIC_DIAGRAM),
        INTERACTION_OVERVIEW_DIAGRAM(DiagramTypeEnumeration.INTERACTION_OVERVIEW_DIAGRAM),
        IMPLEMENTATION_DIAGRAM(DiagramTypeEnumeration.IMPLEMENTATION_DIAGRAM),
        COMMUNICATION_DIAGRAM(DiagramTypeEnumeration.COMMUNICATION_DIAGRAM),
        CLASS_DIAGRAM(DiagramTypeEnumeration.CLASS_DIAGRAM),
        SYSML_ACTIVITY_DIAGRAM(DiagramTypeEnumeration.SYSML_ACTIVITY_DIAGRAM),
        SYSML_BLOCK_DEFINITION_DIAGRAM(DiagramTypeEnumeration.SYSML_BLOCK_DEFINITION_DIAGRAM),
        SYSML_INTERNAL_BLOCK_DIAGRAM(DiagramTypeEnumeration.SYSML_INTERNAL_BLOCK_DIAGRAM),
        SYSML_PACKAGE_DIAGRAM(DiagramTypeEnumeration.SYSML_PACKAGE_DIAGRAM),
        SYSML_PARAMETRIC_DIAGRAM(DiagramTypeEnumeration.SYSML_PARAMETRIC_DIAGRAM),
        REQUIREMENT_DIAGRAM(DiagramTypeEnumeration.REQUIREMENT_DIAGRAM),
        SYSML_SEQUENCE_DIAGRAM(DiagramTypeEnumeration.SYSML_SEQUENCE_DIAGRAM),
        SYSML_USE_CASE_DIAGRAM(DiagramTypeEnumeration.SYSML_USE_CASE_DIAGRAM),
        SYSML_STATE_MACHINE_DIAGRAM(DiagramTypeEnumeration.SYSML_STATE_MACHINE_DIAGRAM),
        REQUIREMENT_TABLE(DiagramTypeEnumeration.REQUIREMENT_TABLE),
        SYSML_ALLOCATION_MATRIX(DiagramTypeEnumeration.SYSML_ALLOCATION_MATRIX),
        SATISFY_REQUIREMENT_MATRIX(DiagramTypeEnumeration.SATISFY_REQUIREMENT_MATRIX),
        VERIFY_REQUIREMENT_MATRIX(DiagramTypeEnumeration.VERIFY_REQUIREMENT_MATRIX),
        BUSINESS_PROCESS_DIAGRAM(DiagramTypeEnumeration.BUSINESS_PROCESS_DIAGRAM),
        FREE_FORM_DIAGRAM(DiagramTypeEnumeration.FREE_FORM_DIAGRAM),
        NETWORKING_DIAGRAM(DiagramTypeEnumeration.NETWORKING_DIAGRAM),
        RELATION_MAP_DIAGRAM(DiagramTypeEnumeration.RELATION_MAP_DIAGRAM),
        DEPENDENCY_MATRIX(DiagramTypeEnumeration.DEPENDENCY_MATRIX),
        GENERIC_TABLE(DiagramTypeEnumeration.GENERIC_TABLE),
        CONTENT_DIAGRAM(DiagramTypeEnumeration.CONTENT_DIAGRAM),
        BPMN_CHOREOGRAPHY_DIAGRAM(DiagramTypeEnumeration.BPMN_CHOREOGRAPHY_DIAGRAM),
        BPMN_PROCESS_DIAGRAM(DiagramTypeEnumeration.BPMN_PROCESS_DIAGRAM),
        BPMN_COLLABORATION_DIAGRAM(DiagramTypeEnumeration.BPMN_COLLABORATION_DIAGRAM),
        VIEW_DIAGRAM(DiagramTypeEnumeration.VIEW_DIAGRAM),
        VIEWPOINT_METHOD_DIAGRAM(DiagramTypeEnumeration.VIEWPOINT_METHOD_DIAGRAM),
        DOCGEN_3_VIEW_DIAGRAM(DiagramTypeEnumeration.DOCGEN_3_VIEW_DIAGRAM),
        DERIVE_REQUIREMENT_MATRIX(DiagramTypeEnumeration.DERIVE_REQUIREMENT_MATRIX),
        REFINE_REQUIREMENT_MATRIX(DiagramTypeEnumeration.REFINE_REQUIREMENT_MATRIX),
        REQUIREMENT_CONTAINMENT_MAP(DiagramTypeEnumeration.REQUIREMENT_CONTAINMENT_MAP),
        REQUIREMENT_DERIVATION_MAP(DiagramTypeEnumeration.REQUIREMENT_DERIVATION_MAP),
        COMPONENT_DIAGRAM(DiagramTypeEnumeration.COMPONENT_DIAGRAM);
        private final String text;

        DiagramTypeEnum(String text)
        {
            this.text = text;
        }

        @Override
        public String getText()
        {
            return this.text;
        }
        @CheckForNull
        public static DiagramTypeEnum from(@CheckForNull Object o)
        {
            return valueFromString(DiagramTypeEnum.class, o);
        }
        @CheckForNull
        public static DiagramTypeEnum toEnum(EnumerationLiteral literal)
        {
            return from(literal);
        }
        @CheckForNull
        public static EnumerationLiteral toEnumerationLiteral(SysMLExtensions profile, DiagramTypeEnum anEnum)
        {
            if (anEnum == ACTIVITY_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getActivityDiagramEnumerationLiteral();
            }
            if (anEnum == BEHAVIOR_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getBehaviorDiagramEnumerationLiteral();
            }
            if (anEnum == SEQUENCE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSequenceDiagramEnumerationLiteral();
            }
            if (anEnum == INTERACTION_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getInteractionDiagramEnumerationLiteral();
            }
            if (anEnum == USE_CASE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getUseCaseDiagramEnumerationLiteral();
            }
            if (anEnum == STATE_MACHINE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getStateMachineDiagramEnumerationLiteral();
            }
            if (anEnum == PROTOCOL_STATE_MACHINE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getProtocolStateMachineDiagramEnumerationLiteral();
            }
            if (anEnum == COMPOSITE_STRUCTURE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getCompositeStructureDiagramEnumerationLiteral();
            }
            if (anEnum == STATIC_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getStaticDiagramEnumerationLiteral();
            }
            if (anEnum == INTERACTION_OVERVIEW_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getInteractionOverviewDiagramEnumerationLiteral();
            }
            if (anEnum == IMPLEMENTATION_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getImplementationDiagramEnumerationLiteral();
            }
            if (anEnum == COMMUNICATION_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getCommunicationDiagramEnumerationLiteral();
            }
            if (anEnum == CLASS_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getClassDiagramEnumerationLiteral();
            }
            if (anEnum == SYSML_ACTIVITY_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSysMLActivityDiagramEnumerationLiteral();
            }
            if (anEnum == SYSML_BLOCK_DEFINITION_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSysMLBlockDefinitionDiagramEnumerationLiteral();
            }
            if (anEnum == SYSML_INTERNAL_BLOCK_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSysMLInternalBlockDiagramEnumerationLiteral();
            }
            if (anEnum == SYSML_PACKAGE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSysMLPackageDiagramEnumerationLiteral();
            }
            if (anEnum == SYSML_PARAMETRIC_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSysMLParametricDiagramEnumerationLiteral();
            }
            if (anEnum == REQUIREMENT_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getRequirementDiagramEnumerationLiteral();
            }
            if (anEnum == SYSML_SEQUENCE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSysMLSequenceDiagramEnumerationLiteral();
            }
            if (anEnum == SYSML_USE_CASE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSysMLUseCaseDiagramEnumerationLiteral();
            }
            if (anEnum == SYSML_STATE_MACHINE_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getSysMLStateMachineDiagramEnumerationLiteral();
            }
            if (anEnum == REQUIREMENT_TABLE)
            {
                return profile.diagramTypeEnumeration.getRequirementTableEnumerationLiteral();
            }
            if (anEnum == SYSML_ALLOCATION_MATRIX)
            {
                return profile.diagramTypeEnumeration.getSysMLAllocationMatrixEnumerationLiteral();
            }
            if (anEnum == SATISFY_REQUIREMENT_MATRIX)
            {
                return profile.diagramTypeEnumeration.getSatisfyRequirementMatrixEnumerationLiteral();
            }
            if (anEnum == VERIFY_REQUIREMENT_MATRIX)
            {
                return profile.diagramTypeEnumeration.getVerifyRequirementMatrixEnumerationLiteral();
            }
            if (anEnum == BUSINESS_PROCESS_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getBusinessProcessDiagramEnumerationLiteral();
            }
            if (anEnum == FREE_FORM_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getFreeFormDiagramEnumerationLiteral();
            }
            if (anEnum == NETWORKING_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getNetworkingDiagramEnumerationLiteral();
            }
            if (anEnum == RELATION_MAP_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getRelationMapDiagramEnumerationLiteral();
            }
            if (anEnum == DEPENDENCY_MATRIX)
            {
                return profile.diagramTypeEnumeration.getDependencyMatrixEnumerationLiteral();
            }
            if (anEnum == GENERIC_TABLE)
            {
                return profile.diagramTypeEnumeration.getGenericTableEnumerationLiteral();
            }
            if (anEnum == CONTENT_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getContentDiagramEnumerationLiteral();
            }
            if (anEnum == BPMN_CHOREOGRAPHY_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getBpmnChoreographyDiagramEnumerationLiteral();
            }
            if (anEnum == BPMN_PROCESS_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getBpmnProcessDiagramEnumerationLiteral();
            }
            if (anEnum == BPMN_COLLABORATION_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getBpmnCollaborationDiagramEnumerationLiteral();
            }
            if (anEnum == VIEW_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getViewDiagramEnumerationLiteral();
            }
            if (anEnum == VIEWPOINT_METHOD_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getViewpointMethodDiagramEnumerationLiteral();
            }
            if (anEnum == DOCGEN_3_VIEW_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getDocGen3ViewDiagramEnumerationLiteral();
            }
            if (anEnum == DERIVE_REQUIREMENT_MATRIX)
            {
                return profile.diagramTypeEnumeration.getDeriveRequirementMatrixEnumerationLiteral();
            }
            if (anEnum == REFINE_REQUIREMENT_MATRIX)
            {
                return profile.diagramTypeEnumeration.getRefineRequirementMatrixEnumerationLiteral();
            }
            if (anEnum == REQUIREMENT_CONTAINMENT_MAP)
            {
                return profile.diagramTypeEnumeration.getRequirementContainmentMapEnumerationLiteral();
            }
            if (anEnum == REQUIREMENT_DERIVATION_MAP)
            {
                return profile.diagramTypeEnumeration.getRequirementDerivationMapEnumerationLiteral();
            }
            if (anEnum == COMPONENT_DIAGRAM)
            {
                return profile.diagramTypeEnumeration.getComponentDiagramEnumerationLiteral();
            }
            return null;
        }
    }
    private static class DiagramTypeEnumeration extends EnumerationWrapper
    {
        public static final String ACTIVITY_DIAGRAM =  "Activity Diagram";
        public static final String BEHAVIOR_DIAGRAM =  "Behavior Diagram";
        public static final String SEQUENCE_DIAGRAM =  "Sequence Diagram";
        public static final String INTERACTION_DIAGRAM =  "Interaction Diagram";
        public static final String USE_CASE_DIAGRAM =  "Use Case Diagram";
        public static final String STATE_MACHINE_DIAGRAM =  "State Machine Diagram";
        public static final String PROTOCOL_STATE_MACHINE_DIAGRAM =  "Protocol State Machine Diagram";
        public static final String COMPOSITE_STRUCTURE_DIAGRAM =  "Composite Structure Diagram";
        public static final String STATIC_DIAGRAM =  "Static Diagram";
        public static final String INTERACTION_OVERVIEW_DIAGRAM =  "Interaction Overview Diagram";
        public static final String IMPLEMENTATION_DIAGRAM =  "Implementation Diagram";
        public static final String COMMUNICATION_DIAGRAM =  "Communication Diagram";
        public static final String CLASS_DIAGRAM =  "Class Diagram";
        public static final String SYSML_ACTIVITY_DIAGRAM =  "SysML Activity Diagram";
        public static final String SYSML_BLOCK_DEFINITION_DIAGRAM =  "SysML Block Definition Diagram";
        public static final String SYSML_INTERNAL_BLOCK_DIAGRAM =  "SysML Internal Block Diagram";
        public static final String SYSML_PACKAGE_DIAGRAM =  "SysML Package Diagram";
        public static final String SYSML_PARAMETRIC_DIAGRAM =  "SysML Parametric Diagram";
        public static final String REQUIREMENT_DIAGRAM =  "Requirement Diagram";
        public static final String SYSML_SEQUENCE_DIAGRAM =  "SysML Sequence Diagram";
        public static final String SYSML_USE_CASE_DIAGRAM =  "SysML Use Case Diagram";
        public static final String SYSML_STATE_MACHINE_DIAGRAM =  "SysML State Machine Diagram";
        public static final String REQUIREMENT_TABLE =  "Requirement Table";
        public static final String SYSML_ALLOCATION_MATRIX =  "SysML Allocation Matrix";
        public static final String SATISFY_REQUIREMENT_MATRIX =  "Satisfy Requirement Matrix";
        public static final String VERIFY_REQUIREMENT_MATRIX =  "Verify Requirement Matrix";
        public static final String BUSINESS_PROCESS_DIAGRAM =  "Business Process Diagram";
        public static final String FREE_FORM_DIAGRAM =  "Free Form Diagram";
        public static final String NETWORKING_DIAGRAM =  "Networking Diagram";
        public static final String RELATION_MAP_DIAGRAM =  "Relation Map Diagram";
        public static final String DEPENDENCY_MATRIX =  "Dependency Matrix";
        public static final String GENERIC_TABLE =  "Generic Table";
        public static final String CONTENT_DIAGRAM =  "Content Diagram";
        public static final String BPMN_CHOREOGRAPHY_DIAGRAM =  "BPMN Choreography Diagram";
        public static final String BPMN_PROCESS_DIAGRAM =  "BPMN Process Diagram";
        public static final String BPMN_COLLABORATION_DIAGRAM =  "BPMN Collaboration Diagram";
        public static final String VIEW_DIAGRAM =  "View Diagram";
        public static final String VIEWPOINT_METHOD_DIAGRAM =  "Viewpoint Method Diagram";
        public static final String DOCGEN_3_VIEW_DIAGRAM =  "DocGen 3 View Diagram";
        public static final String DERIVE_REQUIREMENT_MATRIX =  "Derive Requirement Matrix";
        public static final String REFINE_REQUIREMENT_MATRIX =  "Refine Requirement Matrix";
        public static final String REQUIREMENT_CONTAINMENT_MAP =  "Requirement Containment Map";
        public static final String REQUIREMENT_DERIVATION_MAP =  "Requirement Derivation Map";
        public static final String COMPONENT_DIAGRAM =  "Component Diagram";
        @CheckForNull
        private EnumerationLiteral activityDiagram;
        @CheckForNull
        private EnumerationLiteral behaviorDiagram;
        @CheckForNull
        private EnumerationLiteral sequenceDiagram;
        @CheckForNull
        private EnumerationLiteral interactionDiagram;
        @CheckForNull
        private EnumerationLiteral useCaseDiagram;
        @CheckForNull
        private EnumerationLiteral stateMachineDiagram;
        @CheckForNull
        private EnumerationLiteral protocolStateMachineDiagram;
        @CheckForNull
        private EnumerationLiteral compositeStructureDiagram;
        @CheckForNull
        private EnumerationLiteral staticDiagram;
        @CheckForNull
        private EnumerationLiteral interactionOverviewDiagram;
        @CheckForNull
        private EnumerationLiteral implementationDiagram;
        @CheckForNull
        private EnumerationLiteral communicationDiagram;
        @CheckForNull
        private EnumerationLiteral classDiagram;
        @CheckForNull
        private EnumerationLiteral sysMLActivityDiagram;
        @CheckForNull
        private EnumerationLiteral sysMLBlockDefinitionDiagram;
        @CheckForNull
        private EnumerationLiteral sysMLInternalBlockDiagram;
        @CheckForNull
        private EnumerationLiteral sysMLPackageDiagram;
        @CheckForNull
        private EnumerationLiteral sysMLParametricDiagram;
        @CheckForNull
        private EnumerationLiteral requirementDiagram;
        @CheckForNull
        private EnumerationLiteral sysMLSequenceDiagram;
        @CheckForNull
        private EnumerationLiteral sysMLUseCaseDiagram;
        @CheckForNull
        private EnumerationLiteral sysMLStateMachineDiagram;
        @CheckForNull
        private EnumerationLiteral requirementTable;
        @CheckForNull
        private EnumerationLiteral sysMLAllocationMatrix;
        @CheckForNull
        private EnumerationLiteral satisfyRequirementMatrix;
        @CheckForNull
        private EnumerationLiteral verifyRequirementMatrix;
        @CheckForNull
        private EnumerationLiteral businessProcessDiagram;
        @CheckForNull
        private EnumerationLiteral freeFormDiagram;
        @CheckForNull
        private EnumerationLiteral networkingDiagram;
        @CheckForNull
        private EnumerationLiteral relationMapDiagram;
        @CheckForNull
        private EnumerationLiteral dependencyMatrix;
        @CheckForNull
        private EnumerationLiteral genericTable;
        @CheckForNull
        private EnumerationLiteral contentDiagram;
        @CheckForNull
        private EnumerationLiteral bpmnChoreographyDiagram;
        @CheckForNull
        private EnumerationLiteral bpmnProcessDiagram;
        @CheckForNull
        private EnumerationLiteral bpmnCollaborationDiagram;
        @CheckForNull
        private EnumerationLiteral viewDiagram;
        @CheckForNull
        private EnumerationLiteral viewpointMethodDiagram;
        @CheckForNull
        private EnumerationLiteral docGen3ViewDiagram;
        @CheckForNull
        private EnumerationLiteral deriveRequirementMatrix;
        @CheckForNull
        private EnumerationLiteral refineRequirementMatrix;
        @CheckForNull
        private EnumerationLiteral requirementContainmentMap;
        @CheckForNull
        private EnumerationLiteral requirementDerivationMap;
        @CheckForNull
        private EnumerationLiteral componentDiagram;
        private  DiagramTypeEnumeration(SysMLExtensions profile)
        {
            super(profile);
        }
        @CheckForNull
        public Enumeration getEnumeration()
        {
            return getElementByName(DIAGRAMTYPE_DATATYPE);
        }
        @CheckForNull
        public EnumerationLiteral getActivityDiagramEnumerationLiteral()
        {
            if (activityDiagram == null)
            {
                activityDiagram = getEnumerationLiteralByName(getEnumeration(), ACTIVITY_DIAGRAM);
            }
            return activityDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getBehaviorDiagramEnumerationLiteral()
        {
            if (behaviorDiagram == null)
            {
                behaviorDiagram = getEnumerationLiteralByName(getEnumeration(), BEHAVIOR_DIAGRAM);
            }
            return behaviorDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSequenceDiagramEnumerationLiteral()
        {
            if (sequenceDiagram == null)
            {
                sequenceDiagram = getEnumerationLiteralByName(getEnumeration(), SEQUENCE_DIAGRAM);
            }
            return sequenceDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getInteractionDiagramEnumerationLiteral()
        {
            if (interactionDiagram == null)
            {
                interactionDiagram = getEnumerationLiteralByName(getEnumeration(), INTERACTION_DIAGRAM);
            }
            return interactionDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getUseCaseDiagramEnumerationLiteral()
        {
            if (useCaseDiagram == null)
            {
                useCaseDiagram = getEnumerationLiteralByName(getEnumeration(), USE_CASE_DIAGRAM);
            }
            return useCaseDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getStateMachineDiagramEnumerationLiteral()
        {
            if (stateMachineDiagram == null)
            {
                stateMachineDiagram = getEnumerationLiteralByName(getEnumeration(), STATE_MACHINE_DIAGRAM);
            }
            return stateMachineDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getProtocolStateMachineDiagramEnumerationLiteral()
        {
            if (protocolStateMachineDiagram == null)
            {
                protocolStateMachineDiagram = getEnumerationLiteralByName(getEnumeration(), PROTOCOL_STATE_MACHINE_DIAGRAM);
            }
            return protocolStateMachineDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getCompositeStructureDiagramEnumerationLiteral()
        {
            if (compositeStructureDiagram == null)
            {
                compositeStructureDiagram = getEnumerationLiteralByName(getEnumeration(), COMPOSITE_STRUCTURE_DIAGRAM);
            }
            return compositeStructureDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getStaticDiagramEnumerationLiteral()
        {
            if (staticDiagram == null)
            {
                staticDiagram = getEnumerationLiteralByName(getEnumeration(), STATIC_DIAGRAM);
            }
            return staticDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getInteractionOverviewDiagramEnumerationLiteral()
        {
            if (interactionOverviewDiagram == null)
            {
                interactionOverviewDiagram = getEnumerationLiteralByName(getEnumeration(), INTERACTION_OVERVIEW_DIAGRAM);
            }
            return interactionOverviewDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getImplementationDiagramEnumerationLiteral()
        {
            if (implementationDiagram == null)
            {
                implementationDiagram = getEnumerationLiteralByName(getEnumeration(), IMPLEMENTATION_DIAGRAM);
            }
            return implementationDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getCommunicationDiagramEnumerationLiteral()
        {
            if (communicationDiagram == null)
            {
                communicationDiagram = getEnumerationLiteralByName(getEnumeration(), COMMUNICATION_DIAGRAM);
            }
            return communicationDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getClassDiagramEnumerationLiteral()
        {
            if (classDiagram == null)
            {
                classDiagram = getEnumerationLiteralByName(getEnumeration(), CLASS_DIAGRAM);
            }
            return classDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLActivityDiagramEnumerationLiteral()
        {
            if (sysMLActivityDiagram == null)
            {
                sysMLActivityDiagram = getEnumerationLiteralByName(getEnumeration(), SYSML_ACTIVITY_DIAGRAM);
            }
            return sysMLActivityDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLBlockDefinitionDiagramEnumerationLiteral()
        {
            if (sysMLBlockDefinitionDiagram == null)
            {
                sysMLBlockDefinitionDiagram = getEnumerationLiteralByName(getEnumeration(), SYSML_BLOCK_DEFINITION_DIAGRAM);
            }
            return sysMLBlockDefinitionDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLInternalBlockDiagramEnumerationLiteral()
        {
            if (sysMLInternalBlockDiagram == null)
            {
                sysMLInternalBlockDiagram = getEnumerationLiteralByName(getEnumeration(), SYSML_INTERNAL_BLOCK_DIAGRAM);
            }
            return sysMLInternalBlockDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLPackageDiagramEnumerationLiteral()
        {
            if (sysMLPackageDiagram == null)
            {
                sysMLPackageDiagram = getEnumerationLiteralByName(getEnumeration(), SYSML_PACKAGE_DIAGRAM);
            }
            return sysMLPackageDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLParametricDiagramEnumerationLiteral()
        {
            if (sysMLParametricDiagram == null)
            {
                sysMLParametricDiagram = getEnumerationLiteralByName(getEnumeration(), SYSML_PARAMETRIC_DIAGRAM);
            }
            return sysMLParametricDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getRequirementDiagramEnumerationLiteral()
        {
            if (requirementDiagram == null)
            {
                requirementDiagram = getEnumerationLiteralByName(getEnumeration(), REQUIREMENT_DIAGRAM);
            }
            return requirementDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLSequenceDiagramEnumerationLiteral()
        {
            if (sysMLSequenceDiagram == null)
            {
                sysMLSequenceDiagram = getEnumerationLiteralByName(getEnumeration(), SYSML_SEQUENCE_DIAGRAM);
            }
            return sysMLSequenceDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLUseCaseDiagramEnumerationLiteral()
        {
            if (sysMLUseCaseDiagram == null)
            {
                sysMLUseCaseDiagram = getEnumerationLiteralByName(getEnumeration(), SYSML_USE_CASE_DIAGRAM);
            }
            return sysMLUseCaseDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLStateMachineDiagramEnumerationLiteral()
        {
            if (sysMLStateMachineDiagram == null)
            {
                sysMLStateMachineDiagram = getEnumerationLiteralByName(getEnumeration(), SYSML_STATE_MACHINE_DIAGRAM);
            }
            return sysMLStateMachineDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getRequirementTableEnumerationLiteral()
        {
            if (requirementTable == null)
            {
                requirementTable = getEnumerationLiteralByName(getEnumeration(), REQUIREMENT_TABLE);
            }
            return requirementTable;
        }
        @CheckForNull
        public EnumerationLiteral getSysMLAllocationMatrixEnumerationLiteral()
        {
            if (sysMLAllocationMatrix == null)
            {
                sysMLAllocationMatrix = getEnumerationLiteralByName(getEnumeration(), SYSML_ALLOCATION_MATRIX);
            }
            return sysMLAllocationMatrix;
        }
        @CheckForNull
        public EnumerationLiteral getSatisfyRequirementMatrixEnumerationLiteral()
        {
            if (satisfyRequirementMatrix == null)
            {
                satisfyRequirementMatrix = getEnumerationLiteralByName(getEnumeration(), SATISFY_REQUIREMENT_MATRIX);
            }
            return satisfyRequirementMatrix;
        }
        @CheckForNull
        public EnumerationLiteral getVerifyRequirementMatrixEnumerationLiteral()
        {
            if (verifyRequirementMatrix == null)
            {
                verifyRequirementMatrix = getEnumerationLiteralByName(getEnumeration(), VERIFY_REQUIREMENT_MATRIX);
            }
            return verifyRequirementMatrix;
        }
        @CheckForNull
        public EnumerationLiteral getBusinessProcessDiagramEnumerationLiteral()
        {
            if (businessProcessDiagram == null)
            {
                businessProcessDiagram = getEnumerationLiteralByName(getEnumeration(), BUSINESS_PROCESS_DIAGRAM);
            }
            return businessProcessDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getFreeFormDiagramEnumerationLiteral()
        {
            if (freeFormDiagram == null)
            {
                freeFormDiagram = getEnumerationLiteralByName(getEnumeration(), FREE_FORM_DIAGRAM);
            }
            return freeFormDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getNetworkingDiagramEnumerationLiteral()
        {
            if (networkingDiagram == null)
            {
                networkingDiagram = getEnumerationLiteralByName(getEnumeration(), NETWORKING_DIAGRAM);
            }
            return networkingDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getRelationMapDiagramEnumerationLiteral()
        {
            if (relationMapDiagram == null)
            {
                relationMapDiagram = getEnumerationLiteralByName(getEnumeration(), RELATION_MAP_DIAGRAM);
            }
            return relationMapDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getDependencyMatrixEnumerationLiteral()
        {
            if (dependencyMatrix == null)
            {
                dependencyMatrix = getEnumerationLiteralByName(getEnumeration(), DEPENDENCY_MATRIX);
            }
            return dependencyMatrix;
        }
        @CheckForNull
        public EnumerationLiteral getGenericTableEnumerationLiteral()
        {
            if (genericTable == null)
            {
                genericTable = getEnumerationLiteralByName(getEnumeration(), GENERIC_TABLE);
            }
            return genericTable;
        }
        @CheckForNull
        public EnumerationLiteral getContentDiagramEnumerationLiteral()
        {
            if (contentDiagram == null)
            {
                contentDiagram = getEnumerationLiteralByName(getEnumeration(), CONTENT_DIAGRAM);
            }
            return contentDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getBpmnChoreographyDiagramEnumerationLiteral()
        {
            if (bpmnChoreographyDiagram == null)
            {
                bpmnChoreographyDiagram = getEnumerationLiteralByName(getEnumeration(), BPMN_CHOREOGRAPHY_DIAGRAM);
            }
            return bpmnChoreographyDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getBpmnProcessDiagramEnumerationLiteral()
        {
            if (bpmnProcessDiagram == null)
            {
                bpmnProcessDiagram = getEnumerationLiteralByName(getEnumeration(), BPMN_PROCESS_DIAGRAM);
            }
            return bpmnProcessDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getBpmnCollaborationDiagramEnumerationLiteral()
        {
            if (bpmnCollaborationDiagram == null)
            {
                bpmnCollaborationDiagram = getEnumerationLiteralByName(getEnumeration(), BPMN_COLLABORATION_DIAGRAM);
            }
            return bpmnCollaborationDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getViewDiagramEnumerationLiteral()
        {
            if (viewDiagram == null)
            {
                viewDiagram = getEnumerationLiteralByName(getEnumeration(), VIEW_DIAGRAM);
            }
            return viewDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getViewpointMethodDiagramEnumerationLiteral()
        {
            if (viewpointMethodDiagram == null)
            {
                viewpointMethodDiagram = getEnumerationLiteralByName(getEnumeration(), VIEWPOINT_METHOD_DIAGRAM);
            }
            return viewpointMethodDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getDocGen3ViewDiagramEnumerationLiteral()
        {
            if (docGen3ViewDiagram == null)
            {
                docGen3ViewDiagram = getEnumerationLiteralByName(getEnumeration(), DOCGEN_3_VIEW_DIAGRAM);
            }
            return docGen3ViewDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getDeriveRequirementMatrixEnumerationLiteral()
        {
            if (deriveRequirementMatrix == null)
            {
                deriveRequirementMatrix = getEnumerationLiteralByName(getEnumeration(), DERIVE_REQUIREMENT_MATRIX);
            }
            return deriveRequirementMatrix;
        }
        @CheckForNull
        public EnumerationLiteral getRefineRequirementMatrixEnumerationLiteral()
        {
            if (refineRequirementMatrix == null)
            {
                refineRequirementMatrix = getEnumerationLiteralByName(getEnumeration(), REFINE_REQUIREMENT_MATRIX);
            }
            return refineRequirementMatrix;
        }
        @CheckForNull
        public EnumerationLiteral getRequirementContainmentMapEnumerationLiteral()
        {
            if (requirementContainmentMap == null)
            {
                requirementContainmentMap = getEnumerationLiteralByName(getEnumeration(), REQUIREMENT_CONTAINMENT_MAP);
            }
            return requirementContainmentMap;
        }
        @CheckForNull
        public EnumerationLiteral getRequirementDerivationMapEnumerationLiteral()
        {
            if (requirementDerivationMap == null)
            {
                requirementDerivationMap = getEnumerationLiteralByName(getEnumeration(), REQUIREMENT_DERIVATION_MAP);
            }
            return requirementDerivationMap;
        }
        @CheckForNull
        public EnumerationLiteral getComponentDiagramEnumerationLiteral()
        {
            if (componentDiagram == null)
            {
                componentDiagram = getEnumerationLiteralByName(getEnumeration(), COMPONENT_DIAGRAM);
            }
            return componentDiagram;
        }
        @Override
        protected void clear()
        {
            super.clear();
            activityDiagram = null;
            behaviorDiagram = null;
            sequenceDiagram = null;
            interactionDiagram = null;
            useCaseDiagram = null;
            stateMachineDiagram = null;
            protocolStateMachineDiagram = null;
            compositeStructureDiagram = null;
            staticDiagram = null;
            interactionOverviewDiagram = null;
            implementationDiagram = null;
            communicationDiagram = null;
            classDiagram = null;
            sysMLActivityDiagram = null;
            sysMLBlockDefinitionDiagram = null;
            sysMLInternalBlockDiagram = null;
            sysMLPackageDiagram = null;
            sysMLParametricDiagram = null;
            requirementDiagram = null;
            sysMLSequenceDiagram = null;
            sysMLUseCaseDiagram = null;
            sysMLStateMachineDiagram = null;
            requirementTable = null;
            sysMLAllocationMatrix = null;
            satisfyRequirementMatrix = null;
            verifyRequirementMatrix = null;
            businessProcessDiagram = null;
            freeFormDiagram = null;
            networkingDiagram = null;
            relationMapDiagram = null;
            dependencyMatrix = null;
            genericTable = null;
            contentDiagram = null;
            bpmnChoreographyDiagram = null;
            bpmnProcessDiagram = null;
            bpmnCollaborationDiagram = null;
            viewDiagram = null;
            viewpointMethodDiagram = null;
            docGen3ViewDiagram = null;
            deriveRequirementMatrix = null;
            refineRequirementMatrix = null;
            requirementContainmentMap = null;
            requirementDerivationMap = null;
            componentDiagram = null;
        }
    }


    //enumeration Language literals
    public enum LanguageEnum implements TextProvider
    {
        JYTHON(LanguageEnumeration.JYTHON),
        GROOVY(LanguageEnumeration.GROOVY);
        private final String text;

        LanguageEnum(String text)
        {
            this.text = text;
        }

        @Override
        public String getText()
        {
            return this.text;
        }
        @CheckForNull
        public static LanguageEnum from(@CheckForNull Object o)
        {
            return valueFromString(LanguageEnum.class, o);
        }
        @CheckForNull
        public static LanguageEnum toEnum(EnumerationLiteral literal)
        {
            return from(literal);
        }
        @CheckForNull
        public static EnumerationLiteral toEnumerationLiteral(SysMLExtensions profile, LanguageEnum anEnum)
        {
            if (anEnum == JYTHON)
            {
                return profile.languageEnumeration.getJythonEnumerationLiteral();
            }
            if (anEnum == GROOVY)
            {
                return profile.languageEnumeration.getGroovyEnumerationLiteral();
            }
            return null;
        }
    }
    private static class LanguageEnumeration extends EnumerationWrapper
    {
        public static final String JYTHON =  "jython";
        public static final String GROOVY =  "groovy";
        @CheckForNull
        private EnumerationLiteral jython;
        @CheckForNull
        private EnumerationLiteral groovy;
        private  LanguageEnumeration(SysMLExtensions profile)
        {
            super(profile);
        }
        @CheckForNull
        public Enumeration getEnumeration()
        {
            return getElementByName(LANGUAGE_DATATYPE);
        }
        @CheckForNull
        public EnumerationLiteral getJythonEnumerationLiteral()
        {
            if (jython == null)
            {
                jython = getEnumerationLiteralByName(getEnumeration(), JYTHON);
            }
            return jython;
        }
        @CheckForNull
        public EnumerationLiteral getGroovyEnumerationLiteral()
        {
            if (groovy == null)
            {
                groovy = getEnumerationLiteralByName(getEnumeration(), GROOVY);
            }
            return groovy;
        }
        @Override
        protected void clear()
        {
            super.clear();
            jython = null;
            groovy = null;
        }
    }


    //enumeration PlotType literals
    public enum PlotTypeEnum implements TextProvider
    {
        C3(PlotTypeEnumeration.C3),
        D3_RADAR(PlotTypeEnumeration.D3_RADAR),
        D3_GROUPED_HORIZONTAL_BAR(PlotTypeEnumeration.D3_GROUPED_HORIZONTAL_BAR),
        D3_PARALLEL_AXIS(PlotTypeEnumeration.D3_PARALLEL_AXIS);
        private final String text;

        PlotTypeEnum(String text)
        {
            this.text = text;
        }

        @Override
        public String getText()
        {
            return this.text;
        }
        @CheckForNull
        public static PlotTypeEnum from(@CheckForNull Object o)
        {
            return valueFromString(PlotTypeEnum.class, o);
        }
        @CheckForNull
        public static PlotTypeEnum toEnum(EnumerationLiteral literal)
        {
            return from(literal);
        }
        @CheckForNull
        public static EnumerationLiteral toEnumerationLiteral(SysMLExtensions profile, PlotTypeEnum anEnum)
        {
            if (anEnum == C3)
            {
                return profile.plotTypeEnumeration.getC3EnumerationLiteral();
            }
            if (anEnum == D3_RADAR)
            {
                return profile.plotTypeEnumeration.getD3radarEnumerationLiteral();
            }
            if (anEnum == D3_GROUPED_HORIZONTAL_BAR)
            {
                return profile.plotTypeEnumeration.getD3groupedhorizontalbarEnumerationLiteral();
            }
            if (anEnum == D3_PARALLEL_AXIS)
            {
                return profile.plotTypeEnumeration.getD3parallelaxisEnumerationLiteral();
            }
            return null;
        }
    }
    private static class PlotTypeEnumeration extends EnumerationWrapper
    {
        public static final String C3 =  "c3";
        public static final String D3_RADAR =  "d3-radar";
        public static final String D3_GROUPED_HORIZONTAL_BAR =  "d3-grouped-horizontal-bar";
        public static final String D3_PARALLEL_AXIS =  "d3-parallel-axis";
        @CheckForNull
        private EnumerationLiteral c3;
        @CheckForNull
        private EnumerationLiteral d3radar;
        @CheckForNull
        private EnumerationLiteral d3groupedhorizontalbar;
        @CheckForNull
        private EnumerationLiteral d3parallelaxis;
        private  PlotTypeEnumeration(SysMLExtensions profile)
        {
            super(profile);
        }
        @CheckForNull
        public Enumeration getEnumeration()
        {
            return getElementByName(PLOTTYPE_DATATYPE);
        }
        @CheckForNull
        public EnumerationLiteral getC3EnumerationLiteral()
        {
            if (c3 == null)
            {
                c3 = getEnumerationLiteralByName(getEnumeration(), C3);
            }
            return c3;
        }
        @CheckForNull
        public EnumerationLiteral getD3radarEnumerationLiteral()
        {
            if (d3radar == null)
            {
                d3radar = getEnumerationLiteralByName(getEnumeration(), D3_RADAR);
            }
            return d3radar;
        }
        @CheckForNull
        public EnumerationLiteral getD3groupedhorizontalbarEnumerationLiteral()
        {
            if (d3groupedhorizontalbar == null)
            {
                d3groupedhorizontalbar = getEnumerationLiteralByName(getEnumeration(), D3_GROUPED_HORIZONTAL_BAR);
            }
            return d3groupedhorizontalbar;
        }
        @CheckForNull
        public EnumerationLiteral getD3parallelaxisEnumerationLiteral()
        {
            if (d3parallelaxis == null)
            {
                d3parallelaxis = getEnumerationLiteralByName(getEnumeration(), D3_PARALLEL_AXIS);
            }
            return d3parallelaxis;
        }
        @Override
        protected void clear()
        {
            super.clear();
            c3 = null;
            d3radar = null;
            d3groupedhorizontalbar = null;
            d3parallelaxis = null;
        }
    }


    //enumeration TomSawyerDiagramType literals
    public enum TomSawyerDiagramTypeEnum implements TextProvider
    {
        ACTIVITY_DIAGRAM(TomSawyerDiagramTypeEnumeration.ACTIVITY_DIAGRAM),
        BLOCK_DEFINITION_DIAGRAM(TomSawyerDiagramTypeEnumeration.BLOCK_DEFINITION_DIAGRAM),
        INTERNAL_BLOCK_DIAGRAM(TomSawyerDiagramTypeEnumeration.INTERNAL_BLOCK_DIAGRAM),
        PACKAGE_DIAGRAM(TomSawyerDiagramTypeEnumeration.PACKAGE_DIAGRAM),
        PARAMETRIC_DIAGRAM(TomSawyerDiagramTypeEnumeration.PARAMETRIC_DIAGRAM),
        REQUIREMENT_DIAGRAM(TomSawyerDiagramTypeEnumeration.REQUIREMENT_DIAGRAM),
        SEQUENCE_DIAGRAM(TomSawyerDiagramTypeEnumeration.SEQUENCE_DIAGRAM),
        STATE_MACHINE_DIAGRAM(TomSawyerDiagramTypeEnumeration.STATE_MACHINE_DIAGRAM),
        USE_CASE_DIAGRAM(TomSawyerDiagramTypeEnumeration.USE_CASE_DIAGRAM);
        private final String text;

        TomSawyerDiagramTypeEnum(String text)
        {
            this.text = text;
        }

        @Override
        public String getText()
        {
            return this.text;
        }
        @CheckForNull
        public static TomSawyerDiagramTypeEnum from(@CheckForNull Object o)
        {
            return valueFromString(TomSawyerDiagramTypeEnum.class, o);
        }
        @CheckForNull
        public static TomSawyerDiagramTypeEnum toEnum(EnumerationLiteral literal)
        {
            return from(literal);
        }
        @CheckForNull
        public static EnumerationLiteral toEnumerationLiteral(SysMLExtensions profile, TomSawyerDiagramTypeEnum anEnum)
        {
            if (anEnum == ACTIVITY_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getActivityDiagramEnumerationLiteral();
            }
            if (anEnum == BLOCK_DEFINITION_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getBlockDefinitionDiagramEnumerationLiteral();
            }
            if (anEnum == INTERNAL_BLOCK_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getInternalBlockDiagramEnumerationLiteral();
            }
            if (anEnum == PACKAGE_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getPackageDiagramEnumerationLiteral();
            }
            if (anEnum == PARAMETRIC_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getParametricDiagramEnumerationLiteral();
            }
            if (anEnum == REQUIREMENT_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getRequirementDiagramEnumerationLiteral();
            }
            if (anEnum == SEQUENCE_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getSequenceDiagramEnumerationLiteral();
            }
            if (anEnum == STATE_MACHINE_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getStateMachineDiagramEnumerationLiteral();
            }
            if (anEnum == USE_CASE_DIAGRAM)
            {
                return profile.tomSawyerDiagramTypeEnumeration.getUseCaseDiagramEnumerationLiteral();
            }
            return null;
        }
    }
    private static class TomSawyerDiagramTypeEnumeration extends EnumerationWrapper
    {
        public static final String ACTIVITY_DIAGRAM =  "Activity Diagram";
        public static final String BLOCK_DEFINITION_DIAGRAM =  "Block Definition Diagram";
        public static final String INTERNAL_BLOCK_DIAGRAM =  "Internal Block Diagram";
        public static final String PACKAGE_DIAGRAM =  "Package Diagram";
        public static final String PARAMETRIC_DIAGRAM =  "Parametric Diagram";
        public static final String REQUIREMENT_DIAGRAM =  "Requirement Diagram";
        public static final String SEQUENCE_DIAGRAM =  "Sequence Diagram";
        public static final String STATE_MACHINE_DIAGRAM =  "State Machine Diagram";
        public static final String USE_CASE_DIAGRAM =  "Use Case Diagram";
        @CheckForNull
        private EnumerationLiteral activityDiagram;
        @CheckForNull
        private EnumerationLiteral blockDefinitionDiagram;
        @CheckForNull
        private EnumerationLiteral internalBlockDiagram;
        @CheckForNull
        private EnumerationLiteral packageDiagram;
        @CheckForNull
        private EnumerationLiteral parametricDiagram;
        @CheckForNull
        private EnumerationLiteral requirementDiagram;
        @CheckForNull
        private EnumerationLiteral sequenceDiagram;
        @CheckForNull
        private EnumerationLiteral stateMachineDiagram;
        @CheckForNull
        private EnumerationLiteral useCaseDiagram;
        private  TomSawyerDiagramTypeEnumeration(SysMLExtensions profile)
        {
            super(profile);
        }
        @CheckForNull
        public Enumeration getEnumeration()
        {
            return getElementByName(TOMSAWYERDIAGRAMTYPE_DATATYPE);
        }
        @CheckForNull
        public EnumerationLiteral getActivityDiagramEnumerationLiteral()
        {
            if (activityDiagram == null)
            {
                activityDiagram = getEnumerationLiteralByName(getEnumeration(), ACTIVITY_DIAGRAM);
            }
            return activityDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getBlockDefinitionDiagramEnumerationLiteral()
        {
            if (blockDefinitionDiagram == null)
            {
                blockDefinitionDiagram = getEnumerationLiteralByName(getEnumeration(), BLOCK_DEFINITION_DIAGRAM);
            }
            return blockDefinitionDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getInternalBlockDiagramEnumerationLiteral()
        {
            if (internalBlockDiagram == null)
            {
                internalBlockDiagram = getEnumerationLiteralByName(getEnumeration(), INTERNAL_BLOCK_DIAGRAM);
            }
            return internalBlockDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getPackageDiagramEnumerationLiteral()
        {
            if (packageDiagram == null)
            {
                packageDiagram = getEnumerationLiteralByName(getEnumeration(), PACKAGE_DIAGRAM);
            }
            return packageDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getParametricDiagramEnumerationLiteral()
        {
            if (parametricDiagram == null)
            {
                parametricDiagram = getEnumerationLiteralByName(getEnumeration(), PARAMETRIC_DIAGRAM);
            }
            return parametricDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getRequirementDiagramEnumerationLiteral()
        {
            if (requirementDiagram == null)
            {
                requirementDiagram = getEnumerationLiteralByName(getEnumeration(), REQUIREMENT_DIAGRAM);
            }
            return requirementDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getSequenceDiagramEnumerationLiteral()
        {
            if (sequenceDiagram == null)
            {
                sequenceDiagram = getEnumerationLiteralByName(getEnumeration(), SEQUENCE_DIAGRAM);
            }
            return sequenceDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getStateMachineDiagramEnumerationLiteral()
        {
            if (stateMachineDiagram == null)
            {
                stateMachineDiagram = getEnumerationLiteralByName(getEnumeration(), STATE_MACHINE_DIAGRAM);
            }
            return stateMachineDiagram;
        }
        @CheckForNull
        public EnumerationLiteral getUseCaseDiagramEnumerationLiteral()
        {
            if (useCaseDiagram == null)
            {
                useCaseDiagram = getEnumerationLiteralByName(getEnumeration(), USE_CASE_DIAGRAM);
            }
            return useCaseDiagram;
        }
        @Override
        protected void clear()
        {
            super.clear();
            activityDiagram = null;
            blockDefinitionDiagram = null;
            internalBlockDiagram = null;
            packageDiagram = null;
            parametricDiagram = null;
            requirementDiagram = null;
            sequenceDiagram = null;
            stateMachineDiagram = null;
            useCaseDiagram = null;
        }
    }

    public static class AppendixViewStereotype extends StereotypeWrapper
    {


        //stereotype AppendixView and its tags
        public static final String STEREOTYPE_NAME =  "AppendixView";

        /**
         * For Images
         */public static final String CAPTION =  "caption";
        public static final String COLLECTVIEWACTIONS =  "collectViewActions";
        public static final String ELEMENTS =  "elements";
        public static final String STYLE =  "style";
        public static final String STAKEHOLDER =  "stakeholder";

        /**
         * The viewpoint for this View, derived from the supplier of the   conform   dependency whose client is this View.
         */public static final String VIEWPOINT =  "viewPoint";

        /**
         * If true, then the block is treated as a black box; a part typed by this black box can only be connected via its ports or directly to its outer boundary. If false, or if a value is not present, then connections can be established to elements of its internal structure via deep-nested connector ends.
         */public static final String ISENCAPSULATED =  "isEncapsulated";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property stakeholder;
        @CheckForNull
        private Property viewPoint;
        @CheckForNull
        private Property isEncapsulated;
        protected  AppendixViewStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getCaptionProperty()
        {
            return _p.view().getCaptionProperty();
        }

        @CheckForNull
        public Property getCollectViewActionsProperty()
        {
            return _p.view().getCollectViewActionsProperty();
        }

        @CheckForNull
        public Property getElementsProperty()
        {
            return _p.view().getElementsProperty();
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            return _p.view().getStyleProperty();
        }

        @CheckForNull
        public Property getStakeholderProperty()
        {
            if (stakeholder == null)
            {
                stakeholder = getTagByName(getStereotype(), STAKEHOLDER);
            }
            return stakeholder;
        }

        @CheckForNull
        public Property getViewPointProperty()
        {
            if (viewPoint == null)
            {
                viewPoint = getTagByName(getStereotype(), VIEWPOINT);
            }
            return viewPoint;
        }

        @CheckForNull
        public Property getIsEncapsulatedProperty()
        {
            if (isEncapsulated == null)
            {
                isEncapsulated = getTagByName(getStereotype(), ISENCAPSULATED);
            }
            return isEncapsulated;
        }

        public void setCaption(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionProperty(), value);
        }
        public void clearCaption(Element element)
        {
            _p.view().clearCaption(element);
        }
        @CheckForNull
        public String getCaption(Element element)
        {
            return _p.view().getCaption(element);
        }
        public void setCollectViewActions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getCollectViewActionsProperty(), value);
        }
        public void clearCollectViewActions(Element element)
        {
            _p.view().clearCollectViewActions(element);
        }
        @CheckForNull
        public Boolean isCollectViewActions(Element element)
        {
            return _p.view().isCollectViewActions(element);
        }
        public void setElements(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getElementsProperty(), value);
        }
        public void clearElements(Element element)
        {
            _p.view().clearElements(element);
        }
        @CheckForNull
        public String getElements(Element element)
        {
            return _p.view().getElements(element);
        }
        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            _p.view().clearStyle(element);
        }
        @CheckForNull
        public String getStyle(Element element)
        {
            return _p.view().getStyle(element);
        }
        public void setStakeholder(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStakeholderProperty(), value);
        }
        public void clearStakeholder(Element element)
        {
            Profiles.clearValue(element, getStakeholderProperty());
        }
        public void addStakeholder(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStakeholderProperty(), value);
        }
        public void removeStakeholder(Element element, Element value)
        {
            java.util.List<Element> values = getStakeholder(element);
            if (values.remove(value)) {
                setStakeholder(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getStakeholder(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getStakeholderProperty());
        }

        public void setViewPoint(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getViewPointProperty(), value);
        }
        public void clearViewPoint(Element element)
        {
            Profiles.clearValue(element, getViewPointProperty());
        }

        @CheckForNull
        public Element getViewPoint(Element element)
        {
            return (Element)Profiles.getFirstValue(element, getViewPointProperty());
        }

        public void setIsEncapsulated(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIsEncapsulatedProperty(), value);
        }
        public void clearIsEncapsulated(Element element)
        {
            Profiles.clearValue(element, getIsEncapsulatedProperty());
        }

        @CheckForNull
        public Boolean isIsEncapsulated(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIsEncapsulatedProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            stakeholder = null;
            viewPoint = null;
            isEncapsulated = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.appendixView().getStereotype());
            }
            return false;
        }

    }
    public static class AssociationTypeChoosableStereotype extends StereotypeWrapper
    {


        //stereotype AssociationTypeChoosable and its tags
        public static final String STEREOTYPE_NAME =  "AssociationTypeChoosable";

        /**
         * Same choices as magicdraw's choices for associations.
         */public static final String ASSOCIATIONTYPE =  "associationType";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property associationType;
        protected  AssociationTypeChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getAssociationTypeProperty()
        {
            if (associationType == null)
            {
                associationType = getTagByName(getStereotype(), ASSOCIATIONTYPE);
            }
            return associationType;
        }

        public void setAssociationType(Element element, @CheckForNull AggregationKindEnum value)
        {
            // TODO the generated code had value.getText(), this is wrong, not sure what's the right value here
            Profiles.setValue(element, getStereotype(), getAssociationTypeProperty(), value != null ? value.getValue() : null);
        }
        public void clearAssociationType(Element element)
        {
            Profiles.clearValue(element, getAssociationTypeProperty());
        }

        @CheckForNull
        public AggregationKindEnum getAssociationType(Element element)
        {
            // TODO the generated code had AggregationKindEnum.from, this is wrong, not sure what's the right value here
            return AggregationKindEnum.get((String)Profiles.getFirstValue(element, getAssociationTypeProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            associationType = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.associationTypeChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class AttributeChoosableStereotype extends StereotypeWrapper
    {


        //stereotype AttributeChoosable and its tags
        public static final String STEREOTYPE_NAME =  "AttributeChoosable";

        /**
         * The attribute can be name, documentation, or value (in the case of property or slots)
         */public static final String DESIREDATTRIBUTE =  "desiredAttribute";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property desiredAttribute;
        protected  AttributeChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDesiredAttributeProperty()
        {
            if (desiredAttribute == null)
            {
                desiredAttribute = getTagByName(getStereotype(), DESIREDATTRIBUTE);
            }
            return desiredAttribute;
        }

        public void setDesiredAttribute(Element element, @CheckForNull AttributeEnum value)
        {
            Profiles.setValue(element, getStereotype(), getDesiredAttributeProperty(), value != null ? value.getText() : null);
        }
        public void clearDesiredAttribute(Element element)
        {
            Profiles.clearValue(element, getDesiredAttributeProperty());
        }

        @CheckForNull
        public AttributeEnum getDesiredAttribute(Element element)
        {
            return AttributeEnum.from(Profiles.getFirstValue(element, getDesiredAttributeProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            desiredAttribute = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.attributeChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class BulletedListStereotype extends StereotypeWrapper
    {


        //stereotype BulletedList and its tags
        public static final String STEREOTYPE_NAME =  "BulletedList";

        /**
         * Optional. Check this to make the list numbered. Default is just bullets.
         */public static final String ORDEREDLIST =  "orderedList";

        /**
         * Optional. Prints out the stereotype property name before listing its values. default is false.
         */public static final String SHOWSTEREOTYPEPROPERTYNAMES =  "showStereotypePropertyNames";

        /**
         * Optional. If showDoc or stereotypeProperties is filled in, this controls whether the owning element name will be shown as the high level bullet. default is false.
         */public static final String SHOWTARGETS =  "showTargets";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * Where applicable, includes the documentation of the element. For tables, this will be shown in the column right after the element. For lists, it'll be shown right below.
         */public static final String INCLUDEDOC =  "includeDoc";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property orderedList;
        @CheckForNull
        private Property showStereotypePropertyNames;
        @CheckForNull
        private Property showTargets;
        protected  BulletedListStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getOrderedListProperty()
        {
            if (orderedList == null)
            {
                orderedList = getTagByName(getStereotype(), ORDEREDLIST);
            }
            return orderedList;
        }

        @CheckForNull
        public Property getShowStereotypePropertyNamesProperty()
        {
            if (showStereotypePropertyNames == null)
            {
                showStereotypePropertyNames = getTagByName(getStereotype(), SHOWSTEREOTYPEPROPERTYNAMES);
            }
            return showStereotypePropertyNames;
        }

        @CheckForNull
        public Property getShowTargetsProperty()
        {
            if (showTargets == null)
            {
                showTargets = getTagByName(getStereotype(), SHOWTARGETS);
            }
            return showTargets;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getIncludeDocProperty()
        {
            return _p.documentationChoosable().getIncludeDocProperty();
        }

        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        public void setOrderedList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getOrderedListProperty(), value);
        }
        public void clearOrderedList(Element element)
        {
            Profiles.clearValue(element, getOrderedListProperty());
        }

        @CheckForNull
        public Boolean isOrderedList(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getOrderedListProperty()));
        }

        public void setShowStereotypePropertyNames(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowStereotypePropertyNamesProperty(), value);
        }
        public void clearShowStereotypePropertyNames(Element element)
        {
            Profiles.clearValue(element, getShowStereotypePropertyNamesProperty());
        }

        @CheckForNull
        public Boolean isShowStereotypePropertyNames(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getShowStereotypePropertyNamesProperty()));
        }

        public void setShowTargets(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowTargetsProperty(), value);
        }
        public void clearShowTargets(Element element)
        {
            Profiles.clearValue(element, getShowTargetsProperty());
        }

        @CheckForNull
        public Boolean isShowTargets(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getShowTargetsProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setIncludeDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeDocProperty(), value);
        }
        public void clearIncludeDoc(Element element)
        {
            _p.documentationChoosable().clearIncludeDoc(element);
        }
        @CheckForNull
        public Boolean isIncludeDoc(Element element)
        {
            return _p.documentationChoosable().isIncludeDoc(element);
        }
        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            orderedList = null;
            showStereotypePropertyNames = null;
            showTargets = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.bulletedList().getStereotype());
            }
            return false;
        }

    }
    public static class CollectFilterUserScriptStereotype extends StereotypeWrapper
    {


        //stereotype Collect/Filter UserScript and its tags
        public static final String STEREOTYPE_NAME =  "Collect/Filter UserScript";

        private final SysMLExtensions _p;
        protected  CollectFilterUserScriptStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectFilterUserScript().getStereotype());
            }
            return false;
        }

    }
    public static class CollectByAssociationStereotype extends StereotypeWrapper
    {


        //stereotype CollectByAssociation and its tags
        public static final String STEREOTYPE_NAME =  "CollectByAssociation";

        /**
         * When collecting by relationships, associations, owned elements, or owner, indicate the depth to crawl. 0 means infinite. 1 means 1 step out, etc.
         */public static final String DEPTH =  "depth";

        /**
         * Same choices as magicdraw's choices for associations.
         */public static final String ASSOCIATIONTYPE =  "associationType";

        private final SysMLExtensions _p;
        protected  CollectByAssociationStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDepthProperty()
        {
            return _p.depthChoosable().getDepthProperty();
        }

        @CheckForNull
        public Property getAssociationTypeProperty()
        {
            return _p.associationTypeChoosable().getAssociationTypeProperty();
        }

        public void setDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getDepthProperty(), value);
        }
        public void clearDepth(Element element)
        {
            _p.depthChoosable().clearDepth(element);
        }
        @CheckForNull
        public Integer getDepth(Element element)
        {
            return _p.depthChoosable().getDepth(element);
        }
        public void setAssociationType(Element element, @CheckForNull AggregationKindEnum value)
        {
            // TODO the generated code had value.getText(), this is wrong, not sure what's the right value here
            Profiles.setValue(element, getStereotype(), getAssociationTypeProperty(), value != null ? value.getValue() : null);
        }
        public void clearAssociationType(Element element)
        {
            _p.associationTypeChoosable().clearAssociationType(element);
        }
        @CheckForNull
        public AggregationKindEnum getAssociationType(Element element)
        {
            return _p.associationTypeChoosable().getAssociationType(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectByAssociation().getStereotype());
            }
            return false;
        }

    }
    public static class CollectByDirectedRelationshipMetaclassesStereotype extends StereotypeWrapper
    {


        //stereotype CollectByDirectedRelationshipMetaclasses and its tags
        public static final String STEREOTYPE_NAME =  "CollectByDirectedRelationshipMetaclasses";

        /**
         * When collecting by relationships, associations, owned elements, or owner, indicate the depth to crawl. 0 means infinite. 1 means 1 step out, etc.
         */public static final String DEPTH =  "depth";

        /**
         * List of metaclasses for filtering. These are "classes" that come from the UML Standard Profile that comes with Magicdraw, inside the UML 2 Metamodel. In the selection dialog that pops up, if you can't find these classes, make sure a little button with the metamodel icon is "checked".
         */public static final String METACLASSES =  "metaclasses";

        /**
         * When collecting by relationships, indicate whether the starting point target is the client or supplier of the relationships. (true means to collect "outward")
         */public static final String DIRECTIONOUT =  "directionOut";

        private final SysMLExtensions _p;
        protected  CollectByDirectedRelationshipMetaclassesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDepthProperty()
        {
            return _p.depthChoosable().getDepthProperty();
        }

        @CheckForNull
        public Property getMetaclassesProperty()
        {
            return _p.metaclassChoosable().getMetaclassesProperty();
        }

        @CheckForNull
        public Property getDirectionOutProperty()
        {
            return _p.directionChoosable().getDirectionOutProperty();
        }

        public void setDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getDepthProperty(), value);
        }
        public void clearDepth(Element element)
        {
            _p.depthChoosable().clearDepth(element);
        }
        @CheckForNull
        public Integer getDepth(Element element)
        {
            return _p.depthChoosable().getDepth(element);
        }
        public void setMetaclasses(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getMetaclassesProperty(), value);
        }
        public void clearMetaclasses(Element element)
        {
            _p.metaclassChoosable().clearMetaclasses(element);
        }
        public void addMetaclasses(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getMetaclassesProperty(), value);
        }
        public void removeMetaclasses(Element element, Element value)
        {
            java.util.List<Element> values = getMetaclasses(element);
            if (values.remove(value)) {
                setMetaclasses(element, values);
            }
        }
        public java.util.List<Element> getMetaclasses(Element element)
        {
            return _p.metaclassChoosable().getMetaclasses(element);
        }
        public void setDirectionOut(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getDirectionOutProperty(), value);
        }
        public void clearDirectionOut(Element element)
        {
            _p.directionChoosable().clearDirectionOut(element);
        }
        @CheckForNull
        public Boolean isDirectionOut(Element element)
        {
            return _p.directionChoosable().isDirectionOut(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectByDirectedRelationshipMetaclasses().getStereotype());
            }
            return false;
        }

    }
    public static class CollectByDirectedRelationshipStereotypesStereotype extends StereotypeWrapper
    {


        //stereotype CollectByDirectedRelationshipStereotypes and its tags
        public static final String STEREOTYPE_NAME =  "CollectByDirectedRelationshipStereotypes";

        /**
         * List of stereotype for filtering.
         */public static final String STEREOTYPES =  "stereotypes";

        /**
         * When collecting by relationships, associations, owned elements, or owner, indicate the depth to crawl. 0 means infinite. 1 means 1 step out, etc.
         */public static final String DEPTH =  "depth";

        /**
         * When collecting by relationships, indicate whether the starting point target is the client or supplier of the relationships. (true means to collect "outward")
         */public static final String DIRECTIONOUT =  "directionOut";

        /**
         * When collecting or filtering based on stereotypes, choose whether more specific stereotypes should be included.
         */public static final String CONSIDERDERIVED =  "considerDerived";

        private final SysMLExtensions _p;
        protected  CollectByDirectedRelationshipStereotypesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getStereotypesProperty()
        {
            return _p.stereotypeChoosable().getStereotypesProperty();
        }

        @CheckForNull
        public Property getDepthProperty()
        {
            return _p.depthChoosable().getDepthProperty();
        }

        @CheckForNull
        public Property getDirectionOutProperty()
        {
            return _p.directionChoosable().getDirectionOutProperty();
        }

        @CheckForNull
        public Property getConsiderDerivedProperty()
        {
            return _p.considerDerivedChoosable().getConsiderDerivedProperty();
        }

        public void setStereotypes(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypesProperty(), value);
        }
        public void clearStereotypes(Element element)
        {
            _p.stereotypeChoosable().clearStereotypes(element);
        }
        public void addStereotypes(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypesProperty(), value);
        }
        public void removeStereotypes(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypes(element);
            if (values.remove(value)) {
                setStereotypes(element, values);
            }
        }
        public java.util.List<Element> getStereotypes(Element element)
        {
            return _p.stereotypeChoosable().getStereotypes(element);
        }
        public void setDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getDepthProperty(), value);
        }
        public void clearDepth(Element element)
        {
            _p.depthChoosable().clearDepth(element);
        }
        @CheckForNull
        public Integer getDepth(Element element)
        {
            return _p.depthChoosable().getDepth(element);
        }
        public void setDirectionOut(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getDirectionOutProperty(), value);
        }
        public void clearDirectionOut(Element element)
        {
            _p.directionChoosable().clearDirectionOut(element);
        }
        @CheckForNull
        public Boolean isDirectionOut(Element element)
        {
            return _p.directionChoosable().isDirectionOut(element);
        }
        public void setConsiderDerived(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getConsiderDerivedProperty(), value);
        }
        public void clearConsiderDerived(Element element)
        {
            _p.considerDerivedChoosable().clearConsiderDerived(element);
        }
        @CheckForNull
        public Boolean isConsiderDerived(Element element)
        {
            return _p.considerDerivedChoosable().isConsiderDerived(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectByDirectedRelationshipStereotypes().getStereotype());
            }
            return false;
        }

    }
    public static class CollectByExpressionStereotype extends StereotypeWrapper
    {


        //stereotype CollectByExpression and its tags
        public static final String STEREOTYPE_NAME =  "CollectByExpression";

        /**
         * An ocl expression.
         */public static final String EXPRESSION =  "expression";

        /**
         * Whether ocl expression should be evaluated per element or on collection of elements
         */public static final String ITERATE =  "iterate";

        private final SysMLExtensions _p;
        protected  CollectByExpressionStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getExpressionProperty()
        {
            return _p.expressionChoosable().getExpressionProperty();
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            return _p.expressionChoosable().getIterateProperty();
        }

        public void setExpression(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getExpressionProperty(), value);
        }
        public void clearExpression(Element element)
        {
            _p.expressionChoosable().clearExpression(element);
        }
        @CheckForNull
        public String getExpression(Element element)
        {
            return _p.expressionChoosable().getExpression(element);
        }
        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            _p.expressionChoosable().clearIterate(element);
        }
        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return _p.expressionChoosable().isIterate(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectByExpression().getStereotype());
            }
            return false;
        }

    }
    public static class CollectByStereotypePropertiesStereotype extends StereotypeWrapper
    {


        //stereotype CollectByStereotypeProperties and its tags
        public static final String STEREOTYPE_NAME =  "CollectByStereotypeProperties";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        private final SysMLExtensions _p;
        protected  CollectByStereotypePropertiesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectByStereotypeProperties().getStereotype());
            }
            return false;
        }

    }
    public static class CollectClassifierAttributesStereotype extends StereotypeWrapper
    {


        //stereotype CollectClassifierAttributes and its tags
        public static final String STEREOTYPE_NAME =  "CollectClassifierAttributes";

        /**
         * Consider inherited properties (except those that are redefined) Default is false.
         */public static final String INCLUDEINHERITED =  "includeInherited";

        private final SysMLExtensions _p;
        protected  CollectClassifierAttributesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeInheritedProperty()
        {
            return _p.includeInheritedChoosable().getIncludeInheritedProperty();
        }

        public void setIncludeInherited(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeInheritedProperty(), value);
        }
        public void clearIncludeInherited(Element element)
        {
            _p.includeInheritedChoosable().clearIncludeInherited(element);
        }
        @CheckForNull
        public Boolean isIncludeInherited(Element element)
        {
            return _p.includeInheritedChoosable().isIncludeInherited(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectClassifierAttributes().getStereotype());
            }
            return false;
        }

    }
    public static class CollectOrFilterStereotype extends StereotypeWrapper
    {


        //stereotype CollectOrFilter and its tags
        public static final String STEREOTYPE_NAME =  "CollectOrFilter";

        private final SysMLExtensions _p;
        protected  CollectOrFilterStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectOrFilter().getStereotype());
            }
            return false;
        }

    }
    public static class CollectOwnedElementsStereotype extends StereotypeWrapper
    {


        //stereotype CollectOwnedElements and its tags
        public static final String STEREOTYPE_NAME =  "CollectOwnedElements";

        /**
         * When collecting by relationships, associations, owned elements, or owner, indicate the depth to crawl. 0 means infinite. 1 means 1 step out, etc.
         */public static final String DEPTH =  "depth";

        private final SysMLExtensions _p;
        protected  CollectOwnedElementsStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDepthProperty()
        {
            return _p.depthChoosable().getDepthProperty();
        }

        public void setDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getDepthProperty(), value);
        }
        public void clearDepth(Element element)
        {
            _p.depthChoosable().clearDepth(element);
        }
        @CheckForNull
        public Integer getDepth(Element element)
        {
            return _p.depthChoosable().getDepth(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectOwnedElements().getStereotype());
            }
            return false;
        }

    }
    public static class CollectOwnersStereotype extends StereotypeWrapper
    {


        //stereotype CollectOwners and its tags
        public static final String STEREOTYPE_NAME =  "CollectOwners";

        /**
         * When collecting by relationships, associations, owned elements, or owner, indicate the depth to crawl. 0 means infinite. 1 means 1 step out, etc.
         */public static final String DEPTH =  "depth";

        private final SysMLExtensions _p;
        protected  CollectOwnersStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDepthProperty()
        {
            return _p.depthChoosable().getDepthProperty();
        }

        public void setDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getDepthProperty(), value);
        }
        public void clearDepth(Element element)
        {
            _p.depthChoosable().clearDepth(element);
        }
        @CheckForNull
        public Integer getDepth(Element element)
        {
            return _p.depthChoosable().getDepth(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectOwners().getStereotype());
            }
            return false;
        }

    }
    public static class CollectThingsOnDiagramStereotype extends StereotypeWrapper
    {


        //stereotype CollectThingsOnDiagram and its tags
        public static final String STEREOTYPE_NAME =  "CollectThingsOnDiagram";

        private final SysMLExtensions _p;
        protected  CollectThingsOnDiagramStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectThingsOnDiagram().getStereotype());
            }
            return false;
        }

    }
    public static class CollectTypesStereotype extends StereotypeWrapper
    {


        //stereotype CollectTypes and its tags
        public static final String STEREOTYPE_NAME =  "CollectTypes";

        private final SysMLExtensions _p;
        protected  CollectTypesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectTypes().getStereotype());
            }
            return false;
        }

    }
    public static class CollectionAndFilterGroupStereotype extends StereotypeWrapper
    {


        //stereotype CollectionAndFilterGroup and its tags
        public static final String STEREOTYPE_NAME =  "CollectionAndFilterGroup";

        private final SysMLExtensions _p;
        protected  CollectionAndFilterGroupStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.collectionAndFilterGroup().getStereotype());
            }
            return false;
        }

    }
    public static class ConformsStereotype extends StereotypeWrapper
    {


        //stereotype Conforms and its tags
        public static final String STEREOTYPE_NAME =  "Conforms";

        private final SysMLExtensions _p;
        protected  ConformsStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.classes.mddependencies.Dependency
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Generalization) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mddependencies.Dependency
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Generalization)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.conforms().getStereotype());
            }
            return false;
        }

    }
    public static class ConsiderDerivedChoosableStereotype extends StereotypeWrapper
    {


        //stereotype ConsiderDerivedChoosable and its tags
        public static final String STEREOTYPE_NAME =  "ConsiderDerivedChoosable";

        /**
         * When collecting or filtering based on stereotypes, choose whether more specific stereotypes should be included.
         */public static final String CONSIDERDERIVED =  "considerDerived";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property considerDerived;
        protected  ConsiderDerivedChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getConsiderDerivedProperty()
        {
            if (considerDerived == null)
            {
                considerDerived = getTagByName(getStereotype(), CONSIDERDERIVED);
            }
            return considerDerived;
        }

        public void setConsiderDerived(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getConsiderDerivedProperty(), value);
        }
        public void clearConsiderDerived(Element element)
        {
            Profiles.clearValue(element, getConsiderDerivedProperty());
        }

        @CheckForNull
        public Boolean isConsiderDerived(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getConsiderDerivedProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            considerDerived = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.considerDerivedChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class ConstraintStereotype extends StereotypeWrapper
    {


        //stereotype Constraint and its tags
        public static final String STEREOTYPE_NAME =  "Constraint";

        /**
         * An ocl expression.
         */public static final String EXPRESSION =  "expression";

        /**
         * Whether ocl expression should be evaluated per element or on collection of elements
         */public static final String ITERATE =  "iterate";

        private final SysMLExtensions _p;
        protected  ConstraintStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getExpressionProperty()
        {
            return _p.expressionChoosable().getExpressionProperty();
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            return _p.expressionChoosable().getIterateProperty();
        }

        public void setExpression(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getExpressionProperty(), value);
        }
        public void clearExpression(Element element)
        {
            _p.expressionChoosable().clearExpression(element);
        }
        @CheckForNull
        public String getExpression(Element element)
        {
            return _p.expressionChoosable().getExpression(element);
        }
        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            _p.expressionChoosable().clearIterate(element);
        }
        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return _p.expressionChoosable().isIterate(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.constraint().getStereotype());
            }
            return false;
        }

    }
    public static class ContainerStereotype extends StereotypeWrapper
    {


        //stereotype Container and its tags
        public static final String STEREOTYPE_NAME =  "Container";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * Title of a section/appendix
         */public static final String TITLE =  "title";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * Applies to sections. If the resulting section is empty, skip the section altogether.
         */public static final String SKIPIFEMPTY =  "skipIfEmpty";

        /**
         * Applies to sections, if the resulting section is empty, use the indicated string.
         */public static final String STRINGIFEMPTY =  "stringIfEmpty";

        private final SysMLExtensions _p;
        protected  ContainerStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitleProperty()
        {
            return _p.hasTitle().getTitleProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getSkipIfEmptyProperty()
        {
            return _p.skippable().getSkipIfEmptyProperty();
        }

        @CheckForNull
        public Property getStringIfEmptyProperty()
        {
            return _p.skippable().getStringIfEmptyProperty();
        }

        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleProperty(), value);
        }
        public void clearTitle(Element element)
        {
            _p.hasTitle().clearTitle(element);
        }
        @CheckForNull
        public String getTitle(Element element)
        {
            return _p.hasTitle().getTitle(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setSkipIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getSkipIfEmptyProperty(), value);
        }
        public void clearSkipIfEmpty(Element element)
        {
            _p.skippable().clearSkipIfEmpty(element);
        }
        @CheckForNull
        public Boolean isSkipIfEmpty(Element element)
        {
            return _p.skippable().isSkipIfEmpty(element);
        }
        public void setStringIfEmpty(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStringIfEmptyProperty(), value);
        }
        public void clearStringIfEmpty(Element element)
        {
            _p.skippable().clearStringIfEmpty(element);
        }
        @CheckForNull
        public String getStringIfEmpty(Element element)
        {
            return _p.skippable().getStringIfEmpty(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.container().getStereotype());
            }
            return false;
        }

    }
    public static class DepthChoosableStereotype extends StereotypeWrapper
    {


        //stereotype DepthChoosable and its tags
        public static final String STEREOTYPE_NAME =  "DepthChoosable";

        /**
         * When collecting by relationships, associations, owned elements, or owner, indicate the depth to crawl. 0 means infinite. 1 means 1 step out, etc.
         */public static final String DEPTH =  "depth";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property depth;
        protected  DepthChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDepthProperty()
        {
            if (depth == null)
            {
                depth = getTagByName(getStereotype(), DEPTH);
            }
            return depth;
        }

        public void setDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getDepthProperty(), value);
        }
        public void clearDepth(Element element)
        {
            Profiles.clearValue(element, getDepthProperty());
        }

        @CheckForNull
        public Integer getDepth(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getDepthProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            depth = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.depthChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class DiagramTypeChoosableStereotype extends StereotypeWrapper
    {


        //stereotype DiagramTypeChoosable and its tags
        public static final String STEREOTYPE_NAME =  "DiagramTypeChoosable";

        /**
         * Choose a diagram type.
         */public static final String DIAGRAMTYPES =  "diagramTypes";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property diagramTypes;
        protected  DiagramTypeChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDiagramTypesProperty()
        {
            if (diagramTypes == null)
            {
                diagramTypes = getTagByName(getStereotype(), DIAGRAMTYPES);
            }
            return diagramTypes;
        }

        public void setDiagramTypes(Element element, @CheckForNull java.util.Collection<DiagramTypeEnum> value)
        {
            java.util.List<String> result = null;

            if (value != null)
            {
                result = new ArrayList<>();

                for (DiagramTypeEnum o : value)
                {
                    result.add(o.getText());
                }
            }
            Profiles.setValue(element, getStereotype(), getDiagramTypesProperty(), value != null ? result : null);
        }
        public void clearDiagramTypes(Element element)
        {
            Profiles.clearValue(element, getDiagramTypesProperty());
        }
        public void addDiagramTypes(Element element, DiagramTypeEnum value)
        {
            Profiles.addValue(element, getStereotype(), getDiagramTypesProperty(), value != null ? value.getText() : null);
        }
        public void removeDiagramTypes(Element element, DiagramTypeEnum value)
        {
            java.util.List<DiagramTypeEnum> values = getDiagramTypes(element);
            if (values.remove(value != null ? value.getText() : null)) {
                setDiagramTypes(element, values);
            }
        }

        public java.util.List<DiagramTypeEnum> getDiagramTypes(Element element)
        {
            java.util.List<DiagramTypeEnum> result = new ArrayList<>();
            java.util.List values = Profiles.getValue(element, getDiagramTypesProperty());

            for (Object value : values)
            {
                result.add(DiagramTypeEnum.from(value));
            }

            return result;
        }

        @Override
        protected void clear()
        {
            super.clear();
            diagramTypes = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.diagramTypeChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class DirectionChoosableStereotype extends StereotypeWrapper
    {


        //stereotype DirectionChoosable and its tags
        public static final String STEREOTYPE_NAME =  "DirectionChoosable";

        /**
         * When collecting by relationships, indicate whether the starting point target is the client or supplier of the relationships. (true means to collect "outward")
         */public static final String DIRECTIONOUT =  "directionOut";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property directionOut;
        protected  DirectionChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDirectionOutProperty()
        {
            if (directionOut == null)
            {
                directionOut = getTagByName(getStereotype(), DIRECTIONOUT);
            }
            return directionOut;
        }

        public void setDirectionOut(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getDirectionOutProperty(), value);
        }
        public void clearDirectionOut(Element element)
        {
            Profiles.clearValue(element, getDirectionOutProperty());
        }

        @CheckForNull
        public Boolean isDirectionOut(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getDirectionOutProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            directionOut = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.directionChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class DocGenScriptStereotype extends StereotypeWrapper
    {


        //stereotype DocGenScript and its tags
        public static final String STEREOTYPE_NAME =  "DocGenScript";
        public static final String LANGUAGE =  "language";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property language;
        protected  DocGenScriptStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getLanguageProperty()
        {
            if (language == null)
            {
                language = getTagByName(getStereotype(), LANGUAGE);
            }
            return language;
        }

        public void setLanguage(Element element, @CheckForNull LanguageEnum value)
        {
            Profiles.setValue(element, getStereotype(), getLanguageProperty(), value != null ? value.getText() : null);
        }
        public void clearLanguage(Element element)
        {
            Profiles.clearValue(element, getLanguageProperty());
        }

        @CheckForNull
        public LanguageEnum getLanguage(Element element)
        {
            return LanguageEnum.from(Profiles.getFirstValue(element, getLanguageProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            language = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.mdprofiles.Stereotype &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.mdprofiles.Stereotype)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.docGenScript().getStereotype());
            }
            return false;
        }

    }
    public static class DocumentStereotype extends StereotypeWrapper
    {


        //stereotype Document and its tags
        public static final String STEREOTYPE_NAME =  "Document";
        public static final String PROJECT_ACRONYM =  "Project Acronym";
        public static final String WORK_STATE =  "Work State";

        /**
         * The Approver(s) of the document. You may have as many as you want. The format is:
         Firstname,Lastname,jobtitle,organization,section. Example:
         Peter J.,Di Pasquale,Ground Data Systems Engineer,JPL,393b
         */public static final String APPROVER =  "Approver";

        /**
         * The Author(s) of the document. You may have as many as you want. The format is:
         Firstname,Lastname,jobtitle,organization,section. Example:
         Peter J.,Di Pasquale,Ground Data Systems Engineer,JPL,393b
         */public static final String AUTHOR =  "Author";

        /**
         * You may add as many collaborator emails as you like by pressing the + button and adding one email per plus.
         */public static final String COLLABORATOR_EMAIL =  "Collaborator Email";

        /**
         * The concurrence section of the document. You may have as many as you want. The format is:
         Firstname,Lastname,jobtitle,organization,section. Example:

         Peter J.,Di Pasquale,Ground Data Systems Engineer,JPL,393b
         */public static final String CONCURRENCE =  "Concurrence";

        /**
         * The abbreviated title of the document.
         */public static final String DOCUMENT_ACRONYM =  "Document Acronym";

        /**
         * Legal notice for the document footer. Default value is to display that paper documents may not be current.
         */public static final String FOOTER_LEGAL_NOTICE =  "Footer Legal Notice";

        /**
         * The title of the project.

         */public static final String FORMAL_PROJECT_TITLE =  "Formal Project Title";

        /**
         * Link to a logo image
         */public static final String INSTLOGO =  "InstLogo";
        public static final String INSTLOGOSIZE =  "InstLogoSize";

        /**
         * Jet Propulsion Laboratory
         */public static final String INSTTXT1 =  "Insttxt1";

        /**
         * California Institute of Technology
         */public static final String INSTTXT2 =  "Insttxt2";

        /**
         * Supported Alignments are: "left", "right", "center".
         */public static final String LOGO_ALIGNMENT =  "Logo Alignment";

        /**
         * This is the file location of your logo. It can be a local file, or a file accessible via the Internet.
         */public static final String LOGO_LOCATION =  "Logo Location";
        public static final String LOGO_SIZE =  "Logo Size";

        /**
         * Set to one for blank pages, set to zero for none. Note: Currently not functional.
         */public static final String REMOVE_BLANK_PAGES =  "Remove Blank Pages";

        /**
         * The history of the revision. You may have as many as you want.
         Must follow this format:
         Version|DateEdited|EditorFirstName|EditorLastName|Changes. Example:

         Draft|4/12/13|John Q|Smith|Document Created

         */public static final String REVISION_HISTORY =  "Revision History";

        /**
         * Supressing the metadata removes all JPL stylesheet information.  The default is false such that all stylesheet information like the authors, approves, logo, ..etc. are included in the render of the document.
         */public static final String SUPRESSMETADATA =  "SupressMetadata";

        /**
         * JPL Standard Legal Notice. Default value is to display not cleared for export control.
         */public static final String TITLE_PAGE_LEGAL_NOTICE =  "Title Page Legal Notice";

        /**
         * For Images
         */public static final String CAPTION =  "caption";
        public static final String COLLECTVIEWACTIONS =  "collectViewActions";
        public static final String ELEMENTS =  "elements";
        public static final String STYLE =  "style";
        public static final String STAKEHOLDER =  "stakeholder";

        /**
         * The viewpoint for this View, derived from the supplier of the   conform   dependency whose client is this View.
         */public static final String VIEWPOINT =  "viewPoint";

        /**
         * If true, then the block is treated as a black box; a part typed by this black box can only be connected via its ports or directly to its outer boundary. If false, or if a value is not present, then connections can be established to elements of its internal structure via deep-nested connector ends.
         */public static final String ISENCAPSULATED =  "isEncapsulated";
        public static final String ACKNOWLEDGEMENTS =  "acknowledgements";

        /**
         * Optional stylesheet parameter. Whether to chunk first sections. If not, this means in html, each section or chapter page will include the first section. Default is true. (Only matters to docweb)
         */public static final String CHUNKFIRSTSECTIONS =  "chunkFirstSections";

        /**
         * Optional stylesheet parameter. This is for html chunking - what's the max depth of a section that'll be put on a different page. Default is 20. (Only matters to docweb)
         */public static final String CHUNKSECTIONDEPTH =  "chunkSectionDepth";

        /**
         * Optional. The Diagram to display on the cover page, right after title and authors (if there's any)
         */public static final String COVERIMAGE =  "coverImage";
        public static final String FIGURECONTEXTDEPTH =  "figureContextDepth";
        public static final String FIGURESEPARATOR =  "figureSeparator";

        /**
         * Optional footer string on each page of the document. (for docweb) Do not put docbook tags in here! This should be a simple string with no markup.
         */public static final String FOOTER =  "footer";

        /**
         * This property allows you to specify whether you will generate new versions of images associated with the document. If you are generating frequently and not changing the images, this is useful because generating images slows the generation process significantly when there are a lot of images. If an image does not exist yet, it will be generated regardless of whether this property is checked.
         */public static final String GENNEWIMAGES =  "genNewImages";

        /**
         * Optional header string on each page of the document. (for docweb) Do not put docbook tags in here! This should be a simple string with no markup.
         */public static final String HEADER =  "header";

        /**
         * <para>Check this box to generate an index. To register things that should go in the index you must place a tag at the point in the text where the reader should be referred if they were to look it up. Use the following syntax:
         <programlisting><![CDATA[
         <indexterm><primary>some term</primary></indexterm>
         ]]>
         </programlisting>
         </para>
         */public static final String INDEX =  "index";

        /**
         * Optional. A string to display after a coverImage if there's any.
         */public static final String LEGALNOTICE =  "legalNotice";

        /**
         * This is the subtitle of the document. It usually appears under the title in italics, or after a colon. The formatting is up to you.
         */public static final String SUBTITLE =  "subtitle";

        /**
         * Optional stylesheet parameter. How many nested sections to display in table of contents for html. Default is 20. (Only matters to docweb)
         */public static final String TOCSECTIONDEPTH =  "tocSectionDepth";

        /**
         * Title of a section/appendix
         */public static final String TITLE =  "title";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property projectAcronym;
        @CheckForNull
        private Property workState;
        @CheckForNull
        private Property stakeholder;
        @CheckForNull
        private Property viewPoint;
        @CheckForNull
        private Property isEncapsulated;
        protected  DocumentStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getProjectAcronymProperty()
        {
            if (projectAcronym == null)
            {
                projectAcronym = getTagByName(getStereotype(), PROJECT_ACRONYM);
            }
            return projectAcronym;
        }

        @CheckForNull
        public Property getWorkStateProperty()
        {
            if (workState == null)
            {
                workState = getTagByName(getStereotype(), WORK_STATE);
            }
            return workState;
        }

        @CheckForNull
        public Property getApproverProperty()
        {
            return _p.product().getApproverProperty();
        }

        @CheckForNull
        public Property getAuthorProperty()
        {
            return _p.product().getAuthorProperty();
        }

        @CheckForNull
        public Property getCollaboratorEmailProperty()
        {
            return _p.product().getCollaboratorEmailProperty();
        }

        @CheckForNull
        public Property getConcurrenceProperty()
        {
            return _p.product().getConcurrenceProperty();
        }

        @CheckForNull
        public Property getDocumentAcronymProperty()
        {
            return _p.product().getDocumentAcronymProperty();
        }

        @CheckForNull
        public Property getFooterLegalNoticeProperty()
        {
            return _p.product().getFooterLegalNoticeProperty();
        }

        @CheckForNull
        public Property getFormalProjectTitleProperty()
        {
            return _p.product().getFormalProjectTitleProperty();
        }

        @CheckForNull
        public Property getInstLogoProperty()
        {
            return _p.product().getInstLogoProperty();
        }

        @CheckForNull
        public Property getInstLogoSizeProperty()
        {
            return _p.product().getInstLogoSizeProperty();
        }

        @CheckForNull
        public Property getInsttxt1Property()
        {
            return _p.product().getInsttxt1Property();
        }

        @CheckForNull
        public Property getInsttxt2Property()
        {
            return _p.product().getInsttxt2Property();
        }

        @CheckForNull
        public Property getLogoAlignmentProperty()
        {
            return _p.product().getLogoAlignmentProperty();
        }

        @CheckForNull
        public Property getLogoLocationProperty()
        {
            return _p.product().getLogoLocationProperty();
        }

        @CheckForNull
        public Property getLogoSizeProperty()
        {
            return _p.product().getLogoSizeProperty();
        }

        @CheckForNull
        public Property getRemoveBlankPagesProperty()
        {
            return _p.product().getRemoveBlankPagesProperty();
        }

        @CheckForNull
        public Property getRevisionHistoryProperty()
        {
            return _p.product().getRevisionHistoryProperty();
        }

        @CheckForNull
        public Property getSupressMetadataProperty()
        {
            return _p.product().getSupressMetadataProperty();
        }

        @CheckForNull
        public Property getTitlePageLegalNoticeProperty()
        {
            return _p.product().getTitlePageLegalNoticeProperty();
        }

        @CheckForNull
        public Property getCaptionProperty()
        {
            return _p.view().getCaptionProperty();
        }

        @CheckForNull
        public Property getCollectViewActionsProperty()
        {
            return _p.view().getCollectViewActionsProperty();
        }

        @CheckForNull
        public Property getElementsProperty()
        {
            return _p.view().getElementsProperty();
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            return _p.view().getStyleProperty();
        }

        @CheckForNull
        public Property getStakeholderProperty()
        {
            if (stakeholder == null)
            {
                stakeholder = getTagByName(getStereotype(), STAKEHOLDER);
            }
            return stakeholder;
        }

        @CheckForNull
        public Property getViewPointProperty()
        {
            if (viewPoint == null)
            {
                viewPoint = getTagByName(getStereotype(), VIEWPOINT);
            }
            return viewPoint;
        }

        @CheckForNull
        public Property getIsEncapsulatedProperty()
        {
            if (isEncapsulated == null)
            {
                isEncapsulated = getTagByName(getStereotype(), ISENCAPSULATED);
            }
            return isEncapsulated;
        }

        @CheckForNull
        public Property getAcknowledgementsProperty()
        {
            return _p.documentMeta().getAcknowledgementsProperty();
        }

        @CheckForNull
        public Property getChunkFirstSectionsProperty()
        {
            return _p.documentMeta().getChunkFirstSectionsProperty();
        }

        @CheckForNull
        public Property getChunkSectionDepthProperty()
        {
            return _p.documentMeta().getChunkSectionDepthProperty();
        }

        @CheckForNull
        public Property getCoverImageProperty()
        {
            return _p.documentMeta().getCoverImageProperty();
        }

        @CheckForNull
        public Property getFigureContextDepthProperty()
        {
            return _p.documentMeta().getFigureContextDepthProperty();
        }

        @CheckForNull
        public Property getFigureSeparatorProperty()
        {
            return _p.documentMeta().getFigureSeparatorProperty();
        }

        @CheckForNull
        public Property getFooterProperty()
        {
            return _p.documentMeta().getFooterProperty();
        }

        @CheckForNull
        public Property getGenNewImagesProperty()
        {
            return _p.documentMeta().getGenNewImagesProperty();
        }

        @CheckForNull
        public Property getHeaderProperty()
        {
            return _p.documentMeta().getHeaderProperty();
        }

        @CheckForNull
        public Property getIndexProperty()
        {
            return _p.documentMeta().getIndexProperty();
        }

        @CheckForNull
        public Property getLegalNoticeProperty()
        {
            return _p.documentMeta().getLegalNoticeProperty();
        }

        @CheckForNull
        public Property getSubtitleProperty()
        {
            return _p.documentMeta().getSubtitleProperty();
        }

        @CheckForNull
        public Property getTocSectionDepthProperty()
        {
            return _p.documentMeta().getTocSectionDepthProperty();
        }

        @CheckForNull
        public Property getTitleProperty()
        {
            return _p.hasTitle().getTitleProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        public void setProjectAcronym(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getProjectAcronymProperty(), value);
        }
        public void clearProjectAcronym(Element element)
        {
            Profiles.clearValue(element, getProjectAcronymProperty());
        }

        @CheckForNull
        public String getProjectAcronym(Element element)
        {
            return toString(Profiles.getFirstValue(element, getProjectAcronymProperty()));
        }

        public void setWorkState(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getWorkStateProperty(), value);
        }
        public void clearWorkState(Element element)
        {
            Profiles.clearValue(element, getWorkStateProperty());
        }

        @CheckForNull
        public String getWorkState(Element element)
        {
            return toString(Profiles.getFirstValue(element, getWorkStateProperty()));
        }

        public void setApprover(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getApproverProperty(), value);
        }
        public void clearApprover(Element element)
        {
            _p.product().clearApprover(element);
        }
        public void addApprover(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getApproverProperty(), value);
        }
        public void removeApprover(Element element, String value)
        {
            java.util.List<String> values = getApprover(element);
            if (values.remove(value)) {
                setApprover(element, values);
            }
        }
        public java.util.List<String> getApprover(Element element)
        {
            return _p.product().getApprover(element);
        }
        public void setAuthor(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getAuthorProperty(), value);
        }
        public void clearAuthor(Element element)
        {
            _p.product().clearAuthor(element);
        }
        public void addAuthor(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getAuthorProperty(), value);
        }
        public void removeAuthor(Element element, String value)
        {
            java.util.List<String> values = getAuthor(element);
            if (values.remove(value)) {
                setAuthor(element, values);
            }
        }
        public java.util.List<String> getAuthor(Element element)
        {
            return _p.product().getAuthor(element);
        }
        public void setCollaboratorEmail(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCollaboratorEmailProperty(), value);
        }
        public void clearCollaboratorEmail(Element element)
        {
            _p.product().clearCollaboratorEmail(element);
        }
        public void addCollaboratorEmail(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCollaboratorEmailProperty(), value);
        }
        public void removeCollaboratorEmail(Element element, String value)
        {
            java.util.List<String> values = getCollaboratorEmail(element);
            if (values.remove(value)) {
                setCollaboratorEmail(element, values);
            }
        }
        public java.util.List<String> getCollaboratorEmail(Element element)
        {
            return _p.product().getCollaboratorEmail(element);
        }
        public void setConcurrence(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getConcurrenceProperty(), value);
        }
        public void clearConcurrence(Element element)
        {
            _p.product().clearConcurrence(element);
        }
        public void addConcurrence(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getConcurrenceProperty(), value);
        }
        public void removeConcurrence(Element element, String value)
        {
            java.util.List<String> values = getConcurrence(element);
            if (values.remove(value)) {
                setConcurrence(element, values);
            }
        }
        public java.util.List<String> getConcurrence(Element element)
        {
            return _p.product().getConcurrence(element);
        }
        public void setDocumentAcronym(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getDocumentAcronymProperty(), value);
        }
        public void clearDocumentAcronym(Element element)
        {
            _p.product().clearDocumentAcronym(element);
        }
        @CheckForNull
        public String getDocumentAcronym(Element element)
        {
            return _p.product().getDocumentAcronym(element);
        }
        public void setFooterLegalNotice(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getFooterLegalNoticeProperty(), value);
        }
        public void clearFooterLegalNotice(Element element)
        {
            _p.product().clearFooterLegalNotice(element);
        }
        @CheckForNull
        public String getFooterLegalNotice(Element element)
        {
            return _p.product().getFooterLegalNotice(element);
        }
        public void setFormalProjectTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getFormalProjectTitleProperty(), value);
        }
        public void clearFormalProjectTitle(Element element)
        {
            _p.product().clearFormalProjectTitle(element);
        }
        @CheckForNull
        public String getFormalProjectTitle(Element element)
        {
            return _p.product().getFormalProjectTitle(element);
        }
        public void setInstLogo(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getInstLogoProperty(), value);
        }
        public void clearInstLogo(Element element)
        {
            _p.product().clearInstLogo(element);
        }
        @CheckForNull
        public String getInstLogo(Element element)
        {
            return _p.product().getInstLogo(element);
        }
        public void setInstLogoSize(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getInstLogoSizeProperty(), value);
        }
        public void clearInstLogoSize(Element element)
        {
            _p.product().clearInstLogoSize(element);
        }
        @CheckForNull
        public String getInstLogoSize(Element element)
        {
            return _p.product().getInstLogoSize(element);
        }
        public void setInsttxt1(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getInsttxt1Property(), value);
        }
        public void clearInsttxt1(Element element)
        {
            _p.product().clearInsttxt1(element);
        }
        @CheckForNull
        public String getInsttxt1(Element element)
        {
            return _p.product().getInsttxt1(element);
        }
        public void setInsttxt2(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getInsttxt2Property(), value);
        }
        public void clearInsttxt2(Element element)
        {
            _p.product().clearInsttxt2(element);
        }
        @CheckForNull
        public String getInsttxt2(Element element)
        {
            return _p.product().getInsttxt2(element);
        }
        public void setLogoAlignment(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLogoAlignmentProperty(), value);
        }
        public void clearLogoAlignment(Element element)
        {
            _p.product().clearLogoAlignment(element);
        }
        @CheckForNull
        public String getLogoAlignment(Element element)
        {
            return _p.product().getLogoAlignment(element);
        }
        public void setLogoLocation(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLogoLocationProperty(), value);
        }
        public void clearLogoLocation(Element element)
        {
            _p.product().clearLogoLocation(element);
        }
        @CheckForNull
        public String getLogoLocation(Element element)
        {
            return _p.product().getLogoLocation(element);
        }
        public void setLogoSize(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLogoSizeProperty(), value);
        }
        public void clearLogoSize(Element element)
        {
            _p.product().clearLogoSize(element);
        }
        @CheckForNull
        public String getLogoSize(Element element)
        {
            return _p.product().getLogoSize(element);
        }
        public void setRemoveBlankPages(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getRemoveBlankPagesProperty(), value);
        }
        public void clearRemoveBlankPages(Element element)
        {
            _p.product().clearRemoveBlankPages(element);
        }
        @CheckForNull
        public Boolean isRemoveBlankPages(Element element)
        {
            return _p.product().isRemoveBlankPages(element);
        }
        public void setRevisionHistory(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getRevisionHistoryProperty(), value);
        }
        public void clearRevisionHistory(Element element)
        {
            _p.product().clearRevisionHistory(element);
        }
        public void addRevisionHistory(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getRevisionHistoryProperty(), value);
        }
        public void removeRevisionHistory(Element element, String value)
        {
            java.util.List<String> values = getRevisionHistory(element);
            if (values.remove(value)) {
                setRevisionHistory(element, values);
            }
        }
        public java.util.List<String> getRevisionHistory(Element element)
        {
            return _p.product().getRevisionHistory(element);
        }
        public void setSupressMetadata(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getSupressMetadataProperty(), value);
        }
        public void clearSupressMetadata(Element element)
        {
            _p.product().clearSupressMetadata(element);
        }
        @CheckForNull
        public Boolean isSupressMetadata(Element element)
        {
            return _p.product().isSupressMetadata(element);
        }
        public void setTitlePageLegalNotice(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePageLegalNoticeProperty(), value);
        }
        public void clearTitlePageLegalNotice(Element element)
        {
            _p.product().clearTitlePageLegalNotice(element);
        }
        @CheckForNull
        public String getTitlePageLegalNotice(Element element)
        {
            return _p.product().getTitlePageLegalNotice(element);
        }
        public void setCaption(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionProperty(), value);
        }
        public void clearCaption(Element element)
        {
            _p.view().clearCaption(element);
        }
        @CheckForNull
        public String getCaption(Element element)
        {
            return _p.view().getCaption(element);
        }
        public void setCollectViewActions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getCollectViewActionsProperty(), value);
        }
        public void clearCollectViewActions(Element element)
        {
            _p.view().clearCollectViewActions(element);
        }
        @CheckForNull
        public Boolean isCollectViewActions(Element element)
        {
            return _p.view().isCollectViewActions(element);
        }
        public void setElements(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getElementsProperty(), value);
        }
        public void clearElements(Element element)
        {
            _p.view().clearElements(element);
        }
        @CheckForNull
        public String getElements(Element element)
        {
            return _p.view().getElements(element);
        }
        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            _p.view().clearStyle(element);
        }
        @CheckForNull
        public String getStyle(Element element)
        {
            return _p.view().getStyle(element);
        }
        public void setStakeholder(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStakeholderProperty(), value);
        }
        public void clearStakeholder(Element element)
        {
            Profiles.clearValue(element, getStakeholderProperty());
        }
        public void addStakeholder(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStakeholderProperty(), value);
        }
        public void removeStakeholder(Element element, Element value)
        {
            java.util.List<Element> values = getStakeholder(element);
            if (values.remove(value)) {
                setStakeholder(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getStakeholder(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getStakeholderProperty());
        }

        public void setViewPoint(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getViewPointProperty(), value);
        }
        public void clearViewPoint(Element element)
        {
            Profiles.clearValue(element, getViewPointProperty());
        }

        @CheckForNull
        public Element getViewPoint(Element element)
        {
            return (Element)Profiles.getFirstValue(element, getViewPointProperty());
        }

        public void setIsEncapsulated(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIsEncapsulatedProperty(), value);
        }
        public void clearIsEncapsulated(Element element)
        {
            Profiles.clearValue(element, getIsEncapsulatedProperty());
        }

        @CheckForNull
        public Boolean isIsEncapsulated(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIsEncapsulatedProperty()));
        }

        public void setAcknowledgements(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getAcknowledgementsProperty(), value);
        }
        public void clearAcknowledgements(Element element)
        {
            _p.documentMeta().clearAcknowledgements(element);
        }
        @CheckForNull
        public String getAcknowledgements(Element element)
        {
            return _p.documentMeta().getAcknowledgements(element);
        }
        public void setChunkFirstSections(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getChunkFirstSectionsProperty(), value);
        }
        public void clearChunkFirstSections(Element element)
        {
            _p.documentMeta().clearChunkFirstSections(element);
        }
        @CheckForNull
        public Boolean isChunkFirstSections(Element element)
        {
            return _p.documentMeta().isChunkFirstSections(element);
        }
        public void setChunkSectionDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getChunkSectionDepthProperty(), value);
        }
        public void clearChunkSectionDepth(Element element)
        {
            _p.documentMeta().clearChunkSectionDepth(element);
        }
        @CheckForNull
        public Integer getChunkSectionDepth(Element element)
        {
            return _p.documentMeta().getChunkSectionDepth(element);
        }
        public void setCoverImage(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getCoverImageProperty(), value);
        }
        public void clearCoverImage(Element element)
        {
            _p.documentMeta().clearCoverImage(element);
        }
        @CheckForNull
        public Element getCoverImage(Element element)
        {
            return _p.documentMeta().getCoverImage(element);
        }
        public void setFigureContextDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getFigureContextDepthProperty(), value);
        }
        public void clearFigureContextDepth(Element element)
        {
            _p.documentMeta().clearFigureContextDepth(element);
        }
        @CheckForNull
        public Integer getFigureContextDepth(Element element)
        {
            return _p.documentMeta().getFigureContextDepth(element);
        }
        public void setFigureSeparator(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getFigureSeparatorProperty(), value);
        }
        public void clearFigureSeparator(Element element)
        {
            _p.documentMeta().clearFigureSeparator(element);
        }
        @CheckForNull
        public String getFigureSeparator(Element element)
        {
            return _p.documentMeta().getFigureSeparator(element);
        }
        public void setFooter(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getFooterProperty(), value);
        }
        public void clearFooter(Element element)
        {
            _p.documentMeta().clearFooter(element);
        }
        public void addFooter(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getFooterProperty(), value);
        }
        public void removeFooter(Element element, String value)
        {
            java.util.List<String> values = getFooter(element);
            if (values.remove(value)) {
                setFooter(element, values);
            }
        }
        public java.util.List<String> getFooter(Element element)
        {
            return _p.documentMeta().getFooter(element);
        }
        public void setGenNewImages(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getGenNewImagesProperty(), value);
        }
        public void clearGenNewImages(Element element)
        {
            _p.documentMeta().clearGenNewImages(element);
        }
        @CheckForNull
        public Boolean isGenNewImages(Element element)
        {
            return _p.documentMeta().isGenNewImages(element);
        }
        public void setHeader(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getHeaderProperty(), value);
        }
        public void clearHeader(Element element)
        {
            _p.documentMeta().clearHeader(element);
        }
        public void addHeader(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getHeaderProperty(), value);
        }
        public void removeHeader(Element element, String value)
        {
            java.util.List<String> values = getHeader(element);
            if (values.remove(value)) {
                setHeader(element, values);
            }
        }
        public java.util.List<String> getHeader(Element element)
        {
            return _p.documentMeta().getHeader(element);
        }
        public void setIndex(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIndexProperty(), value);
        }
        public void clearIndex(Element element)
        {
            _p.documentMeta().clearIndex(element);
        }
        @CheckForNull
        public Boolean isIndex(Element element)
        {
            return _p.documentMeta().isIndex(element);
        }
        public void setLegalNotice(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLegalNoticeProperty(), value);
        }
        public void clearLegalNotice(Element element)
        {
            _p.documentMeta().clearLegalNotice(element);
        }
        @CheckForNull
        public String getLegalNotice(Element element)
        {
            return _p.documentMeta().getLegalNotice(element);
        }
        public void setSubtitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getSubtitleProperty(), value);
        }
        public void clearSubtitle(Element element)
        {
            _p.documentMeta().clearSubtitle(element);
        }
        @CheckForNull
        public String getSubtitle(Element element)
        {
            return _p.documentMeta().getSubtitle(element);
        }
        public void setTocSectionDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getTocSectionDepthProperty(), value);
        }
        public void clearTocSectionDepth(Element element)
        {
            _p.documentMeta().clearTocSectionDepth(element);
        }
        @CheckForNull
        public Integer getTocSectionDepth(Element element)
        {
            return _p.documentMeta().getTocSectionDepth(element);
        }
        public void setTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleProperty(), value);
        }
        public void clearTitle(Element element)
        {
            _p.hasTitle().clearTitle(element);
        }
        @CheckForNull
        public String getTitle(Element element)
        {
            return _p.hasTitle().getTitle(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            projectAcronym = null;
            workState = null;
            stakeholder = null;
            viewPoint = null;
            isEncapsulated = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package
                    || element instanceof com.nomagic.uml2.ext.magicdraw.deployments.mdartifacts.Artifact) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package
                    || element instanceof com.nomagic.uml2.ext.magicdraw.deployments.mdartifacts.Artifact)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.document().getStereotype());
            }
            return false;
        }

    }
    public static class DocumentMetaStereotype extends StereotypeWrapper
    {


        //stereotype DocumentMeta and its tags
        public static final String STEREOTYPE_NAME =  "DocumentMeta";
        public static final String ACKNOWLEDGEMENTS =  "acknowledgements";

        /**
         * Optional stylesheet parameter. Whether to chunk first sections. If not, this means in html, each section or chapter page will include the first section. Default is true. (Only matters to docweb)
         */public static final String CHUNKFIRSTSECTIONS =  "chunkFirstSections";

        /**
         * Optional stylesheet parameter. This is for html chunking - what's the max depth of a section that'll be put on a different page. Default is 20. (Only matters to docweb)
         */public static final String CHUNKSECTIONDEPTH =  "chunkSectionDepth";

        /**
         * Optional. The Diagram to display on the cover page, right after title and authors (if there's any)
         */public static final String COVERIMAGE =  "coverImage";
        public static final String FIGURECONTEXTDEPTH =  "figureContextDepth";
        public static final String FIGURESEPARATOR =  "figureSeparator";

        /**
         * Optional footer string on each page of the document. (for docweb) Do not put docbook tags in here! This should be a simple string with no markup.
         */public static final String FOOTER =  "footer";

        /**
         * This property allows you to specify whether you will generate new versions of images associated with the document. If you are generating frequently and not changing the images, this is useful because generating images slows the generation process significantly when there are a lot of images. If an image does not exist yet, it will be generated regardless of whether this property is checked.
         */public static final String GENNEWIMAGES =  "genNewImages";

        /**
         * Optional header string on each page of the document. (for docweb) Do not put docbook tags in here! This should be a simple string with no markup.
         */public static final String HEADER =  "header";

        /**
         * <para>Check this box to generate an index. To register things that should go in the index you must place a tag at the point in the text where the reader should be referred if they were to look it up. Use the following syntax:
         <programlisting><![CDATA[
         <indexterm><primary>some term</primary></indexterm>
         ]]>
         </programlisting>
         </para>
         */public static final String INDEX =  "index";

        /**
         * Optional. A string to display after a coverImage if there's any.
         */public static final String LEGALNOTICE =  "legalNotice";

        /**
         * This is the subtitle of the document. It usually appears under the title in italics, or after a colon. The formatting is up to you.
         */public static final String SUBTITLE =  "subtitle";

        /**
         * Optional stylesheet parameter. How many nested sections to display in table of contents for html. Default is 20. (Only matters to docweb)
         */public static final String TOCSECTIONDEPTH =  "tocSectionDepth";

        /**
         * Title of a section/appendix
         */public static final String TITLE =  "title";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property acknowledgements;
        @CheckForNull
        private Property chunkFirstSections;
        @CheckForNull
        private Property chunkSectionDepth;
        @CheckForNull
        private Property coverImage;
        @CheckForNull
        private Property figureContextDepth;
        @CheckForNull
        private Property figureSeparator;
        @CheckForNull
        private Property footer;
        @CheckForNull
        private Property genNewImages;
        @CheckForNull
        private Property header;
        @CheckForNull
        private Property index;
        @CheckForNull
        private Property legalNotice;
        @CheckForNull
        private Property subtitle;
        @CheckForNull
        private Property tocSectionDepth;
        protected  DocumentMetaStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getAcknowledgementsProperty()
        {
            if (acknowledgements == null)
            {
                acknowledgements = getTagByName(getStereotype(), ACKNOWLEDGEMENTS);
            }
            return acknowledgements;
        }

        @CheckForNull
        public Property getChunkFirstSectionsProperty()
        {
            if (chunkFirstSections == null)
            {
                chunkFirstSections = getTagByName(getStereotype(), CHUNKFIRSTSECTIONS);
            }
            return chunkFirstSections;
        }

        @CheckForNull
        public Property getChunkSectionDepthProperty()
        {
            if (chunkSectionDepth == null)
            {
                chunkSectionDepth = getTagByName(getStereotype(), CHUNKSECTIONDEPTH);
            }
            return chunkSectionDepth;
        }

        @CheckForNull
        public Property getCoverImageProperty()
        {
            if (coverImage == null)
            {
                coverImage = getTagByName(getStereotype(), COVERIMAGE);
            }
            return coverImage;
        }

        @CheckForNull
        public Property getFigureContextDepthProperty()
        {
            if (figureContextDepth == null)
            {
                figureContextDepth = getTagByName(getStereotype(), FIGURECONTEXTDEPTH);
            }
            return figureContextDepth;
        }

        @CheckForNull
        public Property getFigureSeparatorProperty()
        {
            if (figureSeparator == null)
            {
                figureSeparator = getTagByName(getStereotype(), FIGURESEPARATOR);
            }
            return figureSeparator;
        }

        @CheckForNull
        public Property getFooterProperty()
        {
            if (footer == null)
            {
                footer = getTagByName(getStereotype(), FOOTER);
            }
            return footer;
        }

        @CheckForNull
        public Property getGenNewImagesProperty()
        {
            if (genNewImages == null)
            {
                genNewImages = getTagByName(getStereotype(), GENNEWIMAGES);
            }
            return genNewImages;
        }

        @CheckForNull
        public Property getHeaderProperty()
        {
            if (header == null)
            {
                header = getTagByName(getStereotype(), HEADER);
            }
            return header;
        }

        @CheckForNull
        public Property getIndexProperty()
        {
            if (index == null)
            {
                index = getTagByName(getStereotype(), INDEX);
            }
            return index;
        }

        @CheckForNull
        public Property getLegalNoticeProperty()
        {
            if (legalNotice == null)
            {
                legalNotice = getTagByName(getStereotype(), LEGALNOTICE);
            }
            return legalNotice;
        }

        @CheckForNull
        public Property getSubtitleProperty()
        {
            if (subtitle == null)
            {
                subtitle = getTagByName(getStereotype(), SUBTITLE);
            }
            return subtitle;
        }

        @CheckForNull
        public Property getTocSectionDepthProperty()
        {
            if (tocSectionDepth == null)
            {
                tocSectionDepth = getTagByName(getStereotype(), TOCSECTIONDEPTH);
            }
            return tocSectionDepth;
        }

        @CheckForNull
        public Property getTitleProperty()
        {
            return _p.hasTitle().getTitleProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        public void setAcknowledgements(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getAcknowledgementsProperty(), value);
        }
        public void clearAcknowledgements(Element element)
        {
            Profiles.clearValue(element, getAcknowledgementsProperty());
        }

        @CheckForNull
        public String getAcknowledgements(Element element)
        {
            return toString(Profiles.getFirstValue(element, getAcknowledgementsProperty()));
        }

        public void setChunkFirstSections(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getChunkFirstSectionsProperty(), value);
        }
        public void clearChunkFirstSections(Element element)
        {
            Profiles.clearValue(element, getChunkFirstSectionsProperty());
        }

        @CheckForNull
        public Boolean isChunkFirstSections(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getChunkFirstSectionsProperty()));
        }

        public void setChunkSectionDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getChunkSectionDepthProperty(), value);
        }
        public void clearChunkSectionDepth(Element element)
        {
            Profiles.clearValue(element, getChunkSectionDepthProperty());
        }

        @CheckForNull
        public Integer getChunkSectionDepth(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getChunkSectionDepthProperty()));
        }

        public void setCoverImage(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getCoverImageProperty(), value);
        }
        public void clearCoverImage(Element element)
        {
            Profiles.clearValue(element, getCoverImageProperty());
        }

        @CheckForNull
        public Element getCoverImage(Element element)
        {
            return (Element)Profiles.getFirstValue(element, getCoverImageProperty());
        }

        public void setFigureContextDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getFigureContextDepthProperty(), value);
        }
        public void clearFigureContextDepth(Element element)
        {
            Profiles.clearValue(element, getFigureContextDepthProperty());
        }

        @CheckForNull
        public Integer getFigureContextDepth(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getFigureContextDepthProperty()));
        }

        public void setFigureSeparator(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getFigureSeparatorProperty(), value);
        }
        public void clearFigureSeparator(Element element)
        {
            Profiles.clearValue(element, getFigureSeparatorProperty());
        }

        @CheckForNull
        public String getFigureSeparator(Element element)
        {
            return toString(Profiles.getFirstValue(element, getFigureSeparatorProperty()));
        }

        public void setFooter(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getFooterProperty(), value);
        }
        public void clearFooter(Element element)
        {
            Profiles.clearValue(element, getFooterProperty());
        }
        public void addFooter(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getFooterProperty(), value);
        }
        public void removeFooter(Element element, String value)
        {
            java.util.List<String> values = getFooter(element);
            if (values.remove(value)) {
                setFooter(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getFooter(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getFooterProperty());
        }

        public void setGenNewImages(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getGenNewImagesProperty(), value);
        }
        public void clearGenNewImages(Element element)
        {
            Profiles.clearValue(element, getGenNewImagesProperty());
        }

        @CheckForNull
        public Boolean isGenNewImages(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getGenNewImagesProperty()));
        }

        public void setHeader(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getHeaderProperty(), value);
        }
        public void clearHeader(Element element)
        {
            Profiles.clearValue(element, getHeaderProperty());
        }
        public void addHeader(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getHeaderProperty(), value);
        }
        public void removeHeader(Element element, String value)
        {
            java.util.List<String> values = getHeader(element);
            if (values.remove(value)) {
                setHeader(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getHeader(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getHeaderProperty());
        }

        public void setIndex(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIndexProperty(), value);
        }
        public void clearIndex(Element element)
        {
            Profiles.clearValue(element, getIndexProperty());
        }

        @CheckForNull
        public Boolean isIndex(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIndexProperty()));
        }

        public void setLegalNotice(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLegalNoticeProperty(), value);
        }
        public void clearLegalNotice(Element element)
        {
            Profiles.clearValue(element, getLegalNoticeProperty());
        }

        @CheckForNull
        public String getLegalNotice(Element element)
        {
            return toString(Profiles.getFirstValue(element, getLegalNoticeProperty()));
        }

        public void setSubtitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getSubtitleProperty(), value);
        }
        public void clearSubtitle(Element element)
        {
            Profiles.clearValue(element, getSubtitleProperty());
        }

        @CheckForNull
        public String getSubtitle(Element element)
        {
            return toString(Profiles.getFirstValue(element, getSubtitleProperty()));
        }

        public void setTocSectionDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getTocSectionDepthProperty(), value);
        }
        public void clearTocSectionDepth(Element element)
        {
            Profiles.clearValue(element, getTocSectionDepthProperty());
        }

        @CheckForNull
        public Integer getTocSectionDepth(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getTocSectionDepthProperty()));
        }

        public void setTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleProperty(), value);
        }
        public void clearTitle(Element element)
        {
            _p.hasTitle().clearTitle(element);
        }
        @CheckForNull
        public String getTitle(Element element)
        {
            return _p.hasTitle().getTitle(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            acknowledgements = null;
            chunkFirstSections = null;
            chunkSectionDepth = null;
            coverImage = null;
            figureContextDepth = null;
            figureSeparator = null;
            footer = null;
            genNewImages = null;
            header = null;
            index = null;
            legalNotice = null;
            subtitle = null;
            tocSectionDepth = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.documentMeta().getStereotype());
            }
            return false;
        }

    }
    public static class DocumentationChoosableStereotype extends StereotypeWrapper
    {


        //stereotype DocumentationChoosable and its tags
        public static final String STEREOTYPE_NAME =  "DocumentationChoosable";

        /**
         * Where applicable, includes the documentation of the element. For tables, this will be shown in the column right after the element. For lists, it'll be shown right below.
         */public static final String INCLUDEDOC =  "includeDoc";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property includeDoc;
        protected  DocumentationChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeDocProperty()
        {
            if (includeDoc == null)
            {
                includeDoc = getTagByName(getStereotype(), INCLUDEDOC);
            }
            return includeDoc;
        }

        public void setIncludeDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeDocProperty(), value);
        }
        public void clearIncludeDoc(Element element)
        {
            Profiles.clearValue(element, getIncludeDocProperty());
        }

        @CheckForNull
        public Boolean isIncludeDoc(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIncludeDocProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            includeDoc = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.documentationChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class DocumentationSkippableStereotype extends StereotypeWrapper
    {


        //stereotype DocumentationSkippable and its tags
        public static final String STEREOTYPE_NAME =  "DocumentationSkippable";

        /**
         * Skips a row element if the element has no documentation. Applies to GenericTable and CombinedMatrix
         */public static final String SKIPIFNODOC =  "skipIfNoDoc";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property skipIfNoDoc;
        protected  DocumentationSkippableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getSkipIfNoDocProperty()
        {
            if (skipIfNoDoc == null)
            {
                skipIfNoDoc = getTagByName(getStereotype(), SKIPIFNODOC);
            }
            return skipIfNoDoc;
        }

        public void setSkipIfNoDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getSkipIfNoDocProperty(), value);
        }
        public void clearSkipIfNoDoc(Element element)
        {
            Profiles.clearValue(element, getSkipIfNoDocProperty());
        }

        @CheckForNull
        public Boolean isSkipIfNoDoc(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getSkipIfNoDocProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            skipIfNoDoc = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.documentationSkippable().getStereotype());
            }
            return false;
        }

    }
    public static class DynamicViewStereotype extends StereotypeWrapper
    {


        //stereotype Dynamic View and its tags
        public static final String STEREOTYPE_NAME =  "Dynamic View";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * Title of a section/appendix
         */public static final String TITLE =  "title";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * Applies to sections. If the resulting section is empty, skip the section altogether.
         */public static final String SKIPIFEMPTY =  "skipIfEmpty";

        /**
         * Applies to sections, if the resulting section is empty, use the indicated string.
         */public static final String STRINGIFEMPTY =  "stringIfEmpty";

        private final SysMLExtensions _p;
        protected  DynamicViewStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitleProperty()
        {
            return _p.hasTitle().getTitleProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getSkipIfEmptyProperty()
        {
            return _p.skippable().getSkipIfEmptyProperty();
        }

        @CheckForNull
        public Property getStringIfEmptyProperty()
        {
            return _p.skippable().getStringIfEmptyProperty();
        }

        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleProperty(), value);
        }
        public void clearTitle(Element element)
        {
            _p.hasTitle().clearTitle(element);
        }
        @CheckForNull
        public String getTitle(Element element)
        {
            return _p.hasTitle().getTitle(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setSkipIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getSkipIfEmptyProperty(), value);
        }
        public void clearSkipIfEmpty(Element element)
        {
            _p.skippable().clearSkipIfEmpty(element);
        }
        @CheckForNull
        public Boolean isSkipIfEmpty(Element element)
        {
            return _p.skippable().isSkipIfEmpty(element);
        }
        public void setStringIfEmpty(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStringIfEmptyProperty(), value);
        }
        public void clearStringIfEmpty(Element element)
        {
            _p.skippable().clearStringIfEmpty(element);
        }
        @CheckForNull
        public String getStringIfEmpty(Element element)
        {
            return _p.skippable().getStringIfEmpty(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.dynamicView().getStereotype());
            }
            return false;
        }

    }
    public static class EditableChoosableStereotype extends StereotypeWrapper
    {


        //stereotype EditableChoosable and its tags
        public static final String STEREOTYPE_NAME =  "EditableChoosable";
        public static final String EDITABLE =  "editable";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property editable;
        protected  EditableChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getEditableProperty()
        {
            if (editable == null)
            {
                editable = getTagByName(getStereotype(), EDITABLE);
            }
            return editable;
        }

        public void setEditable(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getEditableProperty(), value);
        }
        public void clearEditable(Element element)
        {
            Profiles.clearValue(element, getEditableProperty());
        }

        @CheckForNull
        public Boolean isEditable(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getEditableProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            editable = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.editableChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class EditableTableStereotype extends StereotypeWrapper
    {


        //stereotype EditableTable and its tags
        public static final String STEREOTYPE_NAME =  "EditableTable";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * Column widths from left to right, create a new value for each column. For View Editor, use % of table or see the 'width' attribute for tag Col https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col. For Docbook, it can be either a fixed measure using one of the CALS units (36pt, 10pc, etc.) or a proportional measure. Proportional measures have the form    number*   , meaning this column should be number times wider than a column with the measure    1*    (or just    *   ). These two forms can be mixed, as in    3*+1pc   . (Description taken from Docbook spec's ColSpec element)
         */public static final String COLWIDTHS =  "colwidths";

        /**
         * Applies to EMS, if true will not show headers on EMS.
         */public static final String HIDEHEADERS =  "hideHeaders";

        /**
         * Applies to how it's rendered on EMS, if table has no rows will not show table by default.
         */public static final String SHOWIFEMPTY =  "showIfEmpty";

        /**
         * This will be set as the class of the resulting html table.
         */public static final String STYLE =  "style";

        /**
         * If true will rotate table 90 degrees anticlockwise (not really transpose).
         */public static final String TRANSPOSE =  "transpose";

        /**
         * The field takes ordered list of captions. Applicable to images and tables.
         */public static final String CAPTIONS =  "captions";

        /**
         * Exclude from lists like Table of Contents, List of Tables, List of Figures, etc., as applicable.
         */public static final String EXCLUDEFROMLIST =  "excludeFromList";
        public static final String SHOWCAPTIONS =  "showCaptions";

        /**
         * Where applicable, includes the documentation of the element. For tables, this will be shown in the column right after the element. For lists, it'll be shown right below.
         */public static final String INCLUDEDOC =  "includeDoc";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        private final SysMLExtensions _p;
        protected  EditableTableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getColwidthsProperty()
        {
            return _p.table().getColwidthsProperty();
        }

        @CheckForNull
        public Property getHideHeadersProperty()
        {
            return _p.table().getHideHeadersProperty();
        }

        @CheckForNull
        public Property getShowIfEmptyProperty()
        {
            return _p.table().getShowIfEmptyProperty();
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            return _p.table().getStyleProperty();
        }

        @CheckForNull
        public Property getTransposeProperty()
        {
            return _p.table().getTransposeProperty();
        }

        @CheckForNull
        public Property getCaptionsProperty()
        {
            return _p.hasCaptions().getCaptionsProperty();
        }

        @CheckForNull
        public Property getExcludeFromListProperty()
        {
            return _p.hasCaptions().getExcludeFromListProperty();
        }

        @CheckForNull
        public Property getShowCaptionsProperty()
        {
            return _p.hasCaptions().getShowCaptionsProperty();
        }

        @CheckForNull
        public Property getIncludeDocProperty()
        {
            return _p.documentationChoosable().getIncludeDocProperty();
        }

        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setColwidths(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void clearColwidths(Element element)
        {
            _p.table().clearColwidths(element);
        }
        public void addColwidths(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void removeColwidths(Element element, String value)
        {
            java.util.List<String> values = getColwidths(element);
            if (values.remove(value)) {
                setColwidths(element, values);
            }
        }
        public java.util.List<String> getColwidths(Element element)
        {
            return _p.table().getColwidths(element);
        }
        public void setHideHeaders(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getHideHeadersProperty(), value);
        }
        public void clearHideHeaders(Element element)
        {
            _p.table().clearHideHeaders(element);
        }
        @CheckForNull
        public Boolean isHideHeaders(Element element)
        {
            return _p.table().isHideHeaders(element);
        }
        public void setShowIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowIfEmptyProperty(), value);
        }
        public void clearShowIfEmpty(Element element)
        {
            _p.table().clearShowIfEmpty(element);
        }
        @CheckForNull
        public Boolean isShowIfEmpty(Element element)
        {
            return _p.table().isShowIfEmpty(element);
        }
        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            _p.table().clearStyle(element);
        }
        @CheckForNull
        public String getStyle(Element element)
        {
            return _p.table().getStyle(element);
        }
        public void setTranspose(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getTransposeProperty(), value);
        }
        public void clearTranspose(Element element)
        {
            _p.table().clearTranspose(element);
        }
        @CheckForNull
        public Boolean isTranspose(Element element)
        {
            return _p.table().isTranspose(element);
        }
        public void setCaptions(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void clearCaptions(Element element)
        {
            _p.hasCaptions().clearCaptions(element);
        }
        public void addCaptions(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void removeCaptions(Element element, String value)
        {
            java.util.List<String> values = getCaptions(element);
            if (values.remove(value)) {
                setCaptions(element, values);
            }
        }
        public java.util.List<String> getCaptions(Element element)
        {
            return _p.hasCaptions().getCaptions(element);
        }
        public void setExcludeFromList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getExcludeFromListProperty(), value);
        }
        public void clearExcludeFromList(Element element)
        {
            _p.hasCaptions().clearExcludeFromList(element);
        }
        @CheckForNull
        public Boolean isExcludeFromList(Element element)
        {
            return _p.hasCaptions().isExcludeFromList(element);
        }
        public void setShowCaptions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowCaptionsProperty(), value);
        }
        public void clearShowCaptions(Element element)
        {
            _p.hasCaptions().clearShowCaptions(element);
        }
        @CheckForNull
        public Boolean isShowCaptions(Element element)
        {
            return _p.hasCaptions().isShowCaptions(element);
        }
        public void setIncludeDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeDocProperty(), value);
        }
        public void clearIncludeDoc(Element element)
        {
            _p.documentationChoosable().clearIncludeDoc(element);
        }
        @CheckForNull
        public Boolean isIncludeDoc(Element element)
        {
            return _p.documentationChoosable().isIncludeDoc(element);
        }
        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.editableTable().getStereotype());
            }
            return false;
        }

    }
    public static class ExposeStereotype extends StereotypeWrapper
    {


        //stereotype Expose and its tags
        public static final String STEREOTYPE_NAME =  "Expose";

        private final SysMLExtensions _p;
        protected  ExposeStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.classes.mddependencies.Dependency &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mddependencies.Dependency)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.expose().getStereotype());
            }
            return false;
        }

    }
    public static class ExpressionStereotype extends StereotypeWrapper
    {


        //stereotype Expression and its tags
        public static final String STEREOTYPE_NAME =  "Expression";

        /**
         * An ocl expression.
         */public static final String EXPRESSION =  "expression";

        /**
         * Whether ocl expression should be evaluated per element or on collection of elements
         */public static final String ITERATE =  "iterate";

        private final SysMLExtensions _p;
        protected  ExpressionStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getExpressionProperty()
        {
            return _p.expressionChoosable().getExpressionProperty();
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            return _p.expressionChoosable().getIterateProperty();
        }

        public void setExpression(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getExpressionProperty(), value);
        }
        public void clearExpression(Element element)
        {
            _p.expressionChoosable().clearExpression(element);
        }
        @CheckForNull
        public String getExpression(Element element)
        {
            return _p.expressionChoosable().getExpression(element);
        }
        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            _p.expressionChoosable().clearIterate(element);
        }
        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return _p.expressionChoosable().isIterate(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.expression().getStereotype());
            }
            return false;
        }

    }
    public static class ExpressionChoosableStereotype extends StereotypeWrapper
    {


        //stereotype ExpressionChoosable and its tags
        public static final String STEREOTYPE_NAME =  "ExpressionChoosable";

        /**
         * An ocl expression.
         */public static final String EXPRESSION =  "expression";

        /**
         * Whether ocl expression should be evaluated per element or on collection of elements
         */public static final String ITERATE =  "iterate";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property expression;
        @CheckForNull
        private Property iterate;
        protected  ExpressionChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getExpressionProperty()
        {
            if (expression == null)
            {
                expression = getTagByName(getStereotype(), EXPRESSION);
            }
            return expression;
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            if (iterate == null)
            {
                iterate = getTagByName(getStereotype(), ITERATE);
            }
            return iterate;
        }

        public void setExpression(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getExpressionProperty(), value);
        }
        public void clearExpression(Element element)
        {
            Profiles.clearValue(element, getExpressionProperty());
        }

        @CheckForNull
        public String getExpression(Element element)
        {
            return toString(Profiles.getFirstValue(element, getExpressionProperty()));
        }

        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            Profiles.clearValue(element, getIterateProperty());
        }

        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIterateProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            expression = null;
            iterate = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.expressionChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class ExpressionLibraryStereotype extends StereotypeWrapper
    {


        //stereotype ExpressionLibrary and its tags
        public static final String STEREOTYPE_NAME =  "ExpressionLibrary";

        private final SysMLExtensions _p;
        protected  ExpressionLibraryStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Expression
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Expression
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.expressionLibrary().getStereotype());
            }
            return false;
        }

    }
    public static class FilterByDiagramTypeStereotype extends StereotypeWrapper
    {


        //stereotype FilterByDiagramType and its tags
        public static final String STEREOTYPE_NAME =  "FilterByDiagramType";

        /**
         * Applicable for filtering, choose whether the indicated filter criteria is for inclusion or exclusion.
         */public static final String INCLUDE =  "include";

        /**
         * Choose a diagram type.
         */public static final String DIAGRAMTYPES =  "diagramTypes";

        private final SysMLExtensions _p;
        protected  FilterByDiagramTypeStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeProperty()
        {
            return _p.includeChoosable().getIncludeProperty();
        }

        @CheckForNull
        public Property getDiagramTypesProperty()
        {
            return _p.diagramTypeChoosable().getDiagramTypesProperty();
        }

        public void setInclude(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeProperty(), value);
        }
        public void clearInclude(Element element)
        {
            _p.includeChoosable().clearInclude(element);
        }
        @CheckForNull
        public Boolean isInclude(Element element)
        {
            return _p.includeChoosable().isInclude(element);
        }
        public void setDiagramTypes(Element element, @CheckForNull java.util.Collection<DiagramTypeEnum> value)
        {
            java.util.List<String> result = null;

            if (value != null)
            {
                result = new ArrayList<>();

                for (DiagramTypeEnum o : value)
                {
                    result.add(o.getText());
                }
            }
            Profiles.setValue(element, getStereotype(), getDiagramTypesProperty(), value != null ? result : null);
        }
        public void clearDiagramTypes(Element element)
        {
            _p.diagramTypeChoosable().clearDiagramTypes(element);
        }
        public void addDiagramTypes(Element element, DiagramTypeEnum value)
        {
            Profiles.addValue(element, getStereotype(), getDiagramTypesProperty(), value != null ? value.getText() : null);
        }
        public void removeDiagramTypes(Element element, DiagramTypeEnum value)
        {
            java.util.List<DiagramTypeEnum> values = getDiagramTypes(element);
            if (values.remove(value != null ? value.getText() : null)) {
                setDiagramTypes(element, values);
            }
        }
        public java.util.List<DiagramTypeEnum> getDiagramTypes(Element element)
        {
            return _p.diagramTypeChoosable().getDiagramTypes(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.filterByDiagramType().getStereotype());
            }
            return false;
        }

    }
    public static class FilterByExpressionStereotype extends StereotypeWrapper
    {


        //stereotype FilterByExpression and its tags
        public static final String STEREOTYPE_NAME =  "FilterByExpression";

        /**
         * Applicable for filtering, choose whether the indicated filter criteria is for inclusion or exclusion.
         */public static final String INCLUDE =  "include";

        /**
         * An ocl expression.
         */public static final String EXPRESSION =  "expression";

        /**
         * Whether ocl expression should be evaluated per element or on collection of elements
         */public static final String ITERATE =  "iterate";

        private final SysMLExtensions _p;
        protected  FilterByExpressionStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeProperty()
        {
            return _p.includeChoosable().getIncludeProperty();
        }

        @CheckForNull
        public Property getExpressionProperty()
        {
            return _p.expressionChoosable().getExpressionProperty();
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            return _p.expressionChoosable().getIterateProperty();
        }

        public void setInclude(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeProperty(), value);
        }
        public void clearInclude(Element element)
        {
            _p.includeChoosable().clearInclude(element);
        }
        @CheckForNull
        public Boolean isInclude(Element element)
        {
            return _p.includeChoosable().isInclude(element);
        }
        public void setExpression(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getExpressionProperty(), value);
        }
        public void clearExpression(Element element)
        {
            _p.expressionChoosable().clearExpression(element);
        }
        @CheckForNull
        public String getExpression(Element element)
        {
            return _p.expressionChoosable().getExpression(element);
        }
        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            _p.expressionChoosable().clearIterate(element);
        }
        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return _p.expressionChoosable().isIterate(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.filterByExpression().getStereotype());
            }
            return false;
        }

    }
    public static class FilterByMetaclassesStereotype extends StereotypeWrapper
    {


        //stereotype FilterByMetaclasses and its tags
        public static final String STEREOTYPE_NAME =  "FilterByMetaclasses";

        /**
         * Applicable for filtering, choose whether the indicated filter criteria is for inclusion or exclusion.
         */public static final String INCLUDE =  "include";

        /**
         * List of metaclasses for filtering. These are "classes" that come from the UML Standard Profile that comes with Magicdraw, inside the UML 2 Metamodel. In the selection dialog that pops up, if you can't find these classes, make sure a little button with the metamodel icon is "checked".
         */public static final String METACLASSES =  "metaclasses";

        private final SysMLExtensions _p;
        protected  FilterByMetaclassesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeProperty()
        {
            return _p.includeChoosable().getIncludeProperty();
        }

        @CheckForNull
        public Property getMetaclassesProperty()
        {
            return _p.metaclassChoosable().getMetaclassesProperty();
        }

        public void setInclude(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeProperty(), value);
        }
        public void clearInclude(Element element)
        {
            _p.includeChoosable().clearInclude(element);
        }
        @CheckForNull
        public Boolean isInclude(Element element)
        {
            return _p.includeChoosable().isInclude(element);
        }
        public void setMetaclasses(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getMetaclassesProperty(), value);
        }
        public void clearMetaclasses(Element element)
        {
            _p.metaclassChoosable().clearMetaclasses(element);
        }
        public void addMetaclasses(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getMetaclassesProperty(), value);
        }
        public void removeMetaclasses(Element element, Element value)
        {
            java.util.List<Element> values = getMetaclasses(element);
            if (values.remove(value)) {
                setMetaclasses(element, values);
            }
        }
        public java.util.List<Element> getMetaclasses(Element element)
        {
            return _p.metaclassChoosable().getMetaclasses(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.filterByMetaclasses().getStereotype());
            }
            return false;
        }

    }
    public static class FilterByNamesStereotype extends StereotypeWrapper
    {


        //stereotype FilterByNames and its tags
        public static final String STEREOTYPE_NAME =  "FilterByNames";

        /**
         * Applicable for filtering, choose whether the indicated filter criteria is for inclusion or exclusion.
         */public static final String INCLUDE =  "include";

        /**
         * List of regular expression strings. See java.util.regex.Pattern for how regex patterns work.
         */public static final String NAMES =  "names";

        private final SysMLExtensions _p;
        protected  FilterByNamesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeProperty()
        {
            return _p.includeChoosable().getIncludeProperty();
        }

        @CheckForNull
        public Property getNamesProperty()
        {
            return _p.nameChoosable().getNamesProperty();
        }

        public void setInclude(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeProperty(), value);
        }
        public void clearInclude(Element element)
        {
            _p.includeChoosable().clearInclude(element);
        }
        @CheckForNull
        public Boolean isInclude(Element element)
        {
            return _p.includeChoosable().isInclude(element);
        }
        public void setNames(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getNamesProperty(), value);
        }
        public void clearNames(Element element)
        {
            _p.nameChoosable().clearNames(element);
        }
        public void addNames(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getNamesProperty(), value);
        }
        public void removeNames(Element element, String value)
        {
            java.util.List<String> values = getNames(element);
            if (values.remove(value)) {
                setNames(element, values);
            }
        }
        public java.util.List<String> getNames(Element element)
        {
            return _p.nameChoosable().getNames(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.filterByNames().getStereotype());
            }
            return false;
        }

    }
    public static class FilterByStereotypesStereotype extends StereotypeWrapper
    {


        //stereotype FilterByStereotypes and its tags
        public static final String STEREOTYPE_NAME =  "FilterByStereotypes";

        /**
         * Applicable for filtering, choose whether the indicated filter criteria is for inclusion or exclusion.
         */public static final String INCLUDE =  "include";

        /**
         * List of stereotype for filtering.
         */public static final String STEREOTYPES =  "stereotypes";

        /**
         * When collecting or filtering based on stereotypes, choose whether more specific stereotypes should be included.
         */public static final String CONSIDERDERIVED =  "considerDerived";

        private final SysMLExtensions _p;
        protected  FilterByStereotypesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeProperty()
        {
            return _p.includeChoosable().getIncludeProperty();
        }

        @CheckForNull
        public Property getStereotypesProperty()
        {
            return _p.stereotypeChoosable().getStereotypesProperty();
        }

        @CheckForNull
        public Property getConsiderDerivedProperty()
        {
            return _p.considerDerivedChoosable().getConsiderDerivedProperty();
        }

        public void setInclude(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeProperty(), value);
        }
        public void clearInclude(Element element)
        {
            _p.includeChoosable().clearInclude(element);
        }
        @CheckForNull
        public Boolean isInclude(Element element)
        {
            return _p.includeChoosable().isInclude(element);
        }
        public void setStereotypes(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypesProperty(), value);
        }
        public void clearStereotypes(Element element)
        {
            _p.stereotypeChoosable().clearStereotypes(element);
        }
        public void addStereotypes(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypesProperty(), value);
        }
        public void removeStereotypes(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypes(element);
            if (values.remove(value)) {
                setStereotypes(element, values);
            }
        }
        public java.util.List<Element> getStereotypes(Element element)
        {
            return _p.stereotypeChoosable().getStereotypes(element);
        }
        public void setConsiderDerived(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getConsiderDerivedProperty(), value);
        }
        public void clearConsiderDerived(Element element)
        {
            _p.considerDerivedChoosable().clearConsiderDerived(element);
        }
        @CheckForNull
        public Boolean isConsiderDerived(Element element)
        {
            return _p.considerDerivedChoosable().isConsiderDerived(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.filterByStereotypes().getStereotype());
            }
            return false;
        }

    }
    public static class FormattingAndDisplayTemplateStereotype extends StereotypeWrapper
    {


        //stereotype FormattingAndDisplayTemplate and its tags
        public static final String STEREOTYPE_NAME =  "FormattingAndDisplayTemplate";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property targets;
        protected  FormattingAndDisplayTemplateStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTargetsProperty()
        {
            if (targets == null)
            {
                targets = getTagByName(getStereotype(), TARGETS);
            }
            return targets;
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            Profiles.clearValue(element, getTargetsProperty());
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getTargets(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getTargetsProperty());
        }

        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            targets = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.formattingAndDisplayTemplate().getStereotype());
            }
            return false;
        }

    }
    public static class GenericTableStereotype extends StereotypeWrapper
    {


        //stereotype GenericTable and its tags
        public static final String STEREOTYPE_NAME =  "GenericTable";

        /**
         * Column widths from left to right, create a new value for each column. For View Editor, use % of table or see the 'width' attribute for tag Col https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col. For Docbook, it can be either a fixed measure using one of the CALS units (36pt, 10pc, etc.) or a proportional measure. Proportional measures have the form    number*   , meaning this column should be number times wider than a column with the measure    1*    (or just    *   ). These two forms can be mixed, as in    3*+1pc   . (Description taken from Docbook spec's ColSpec element)
         */public static final String COLWIDTHS =  "colwidths";

        /**
         * Applies to EMS, if true will not show headers on EMS.
         */public static final String HIDEHEADERS =  "hideHeaders";

        /**
         * Applies to how it's rendered on EMS, if table has no rows will not show table by default.
         */public static final String SHOWIFEMPTY =  "showIfEmpty";

        /**
         * This will be set as the class of the resulting html table.
         */public static final String STYLE =  "style";

        /**
         * If true will rotate table 90 degrees anticlockwise (not really transpose).
         */public static final String TRANSPOSE =  "transpose";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * The field takes ordered list of captions. Applicable to images and tables.
         */public static final String CAPTIONS =  "captions";

        /**
         * Exclude from lists like Table of Contents, List of Tables, List of Figures, etc., as applicable.
         */public static final String EXCLUDEFROMLIST =  "excludeFromList";
        public static final String SHOWCAPTIONS =  "showCaptions";

        /**
         * Where applicable, includes the documentation of the element. For tables, this will be shown in the column right after the element. For lists, it'll be shown right below.
         */public static final String INCLUDEDOC =  "includeDoc";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        /**
         * Applies to certain tables where headers can be customized. As of now - CombinedMatrix and GenericTable
         */public static final String HEADERS =  "headers";

        /**
         * Skips a row element if the element has no documentation. Applies to GenericTable and CombinedMatrix
         */public static final String SKIPIFNODOC =  "skipIfNoDoc";

        private final SysMLExtensions _p;
        protected  GenericTableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getColwidthsProperty()
        {
            return _p.table().getColwidthsProperty();
        }

        @CheckForNull
        public Property getHideHeadersProperty()
        {
            return _p.table().getHideHeadersProperty();
        }

        @CheckForNull
        public Property getShowIfEmptyProperty()
        {
            return _p.table().getShowIfEmptyProperty();
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            return _p.table().getStyleProperty();
        }

        @CheckForNull
        public Property getTransposeProperty()
        {
            return _p.table().getTransposeProperty();
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getCaptionsProperty()
        {
            return _p.hasCaptions().getCaptionsProperty();
        }

        @CheckForNull
        public Property getExcludeFromListProperty()
        {
            return _p.hasCaptions().getExcludeFromListProperty();
        }

        @CheckForNull
        public Property getShowCaptionsProperty()
        {
            return _p.hasCaptions().getShowCaptionsProperty();
        }

        @CheckForNull
        public Property getIncludeDocProperty()
        {
            return _p.documentationChoosable().getIncludeDocProperty();
        }

        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        @CheckForNull
        public Property getHeadersProperty()
        {
            return _p.headersChoosable().getHeadersProperty();
        }

        @CheckForNull
        public Property getSkipIfNoDocProperty()
        {
            return _p.documentationSkippable().getSkipIfNoDocProperty();
        }

        public void setColwidths(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void clearColwidths(Element element)
        {
            _p.table().clearColwidths(element);
        }
        public void addColwidths(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void removeColwidths(Element element, String value)
        {
            java.util.List<String> values = getColwidths(element);
            if (values.remove(value)) {
                setColwidths(element, values);
            }
        }
        public java.util.List<String> getColwidths(Element element)
        {
            return _p.table().getColwidths(element);
        }
        public void setHideHeaders(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getHideHeadersProperty(), value);
        }
        public void clearHideHeaders(Element element)
        {
            _p.table().clearHideHeaders(element);
        }
        @CheckForNull
        public Boolean isHideHeaders(Element element)
        {
            return _p.table().isHideHeaders(element);
        }
        public void setShowIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowIfEmptyProperty(), value);
        }
        public void clearShowIfEmpty(Element element)
        {
            _p.table().clearShowIfEmpty(element);
        }
        @CheckForNull
        public Boolean isShowIfEmpty(Element element)
        {
            return _p.table().isShowIfEmpty(element);
        }
        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            _p.table().clearStyle(element);
        }
        @CheckForNull
        public String getStyle(Element element)
        {
            return _p.table().getStyle(element);
        }
        public void setTranspose(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getTransposeProperty(), value);
        }
        public void clearTranspose(Element element)
        {
            _p.table().clearTranspose(element);
        }
        @CheckForNull
        public Boolean isTranspose(Element element)
        {
            return _p.table().isTranspose(element);
        }
        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setCaptions(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void clearCaptions(Element element)
        {
            _p.hasCaptions().clearCaptions(element);
        }
        public void addCaptions(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void removeCaptions(Element element, String value)
        {
            java.util.List<String> values = getCaptions(element);
            if (values.remove(value)) {
                setCaptions(element, values);
            }
        }
        public java.util.List<String> getCaptions(Element element)
        {
            return _p.hasCaptions().getCaptions(element);
        }
        public void setExcludeFromList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getExcludeFromListProperty(), value);
        }
        public void clearExcludeFromList(Element element)
        {
            _p.hasCaptions().clearExcludeFromList(element);
        }
        @CheckForNull
        public Boolean isExcludeFromList(Element element)
        {
            return _p.hasCaptions().isExcludeFromList(element);
        }
        public void setShowCaptions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowCaptionsProperty(), value);
        }
        public void clearShowCaptions(Element element)
        {
            _p.hasCaptions().clearShowCaptions(element);
        }
        @CheckForNull
        public Boolean isShowCaptions(Element element)
        {
            return _p.hasCaptions().isShowCaptions(element);
        }
        public void setIncludeDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeDocProperty(), value);
        }
        public void clearIncludeDoc(Element element)
        {
            _p.documentationChoosable().clearIncludeDoc(element);
        }
        @CheckForNull
        public Boolean isIncludeDoc(Element element)
        {
            return _p.documentationChoosable().isIncludeDoc(element);
        }
        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        public void setHeaders(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getHeadersProperty(), value);
        }
        public void clearHeaders(Element element)
        {
            _p.headersChoosable().clearHeaders(element);
        }
        public void addHeaders(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getHeadersProperty(), value);
        }
        public void removeHeaders(Element element, String value)
        {
            java.util.List<String> values = getHeaders(element);
            if (values.remove(value)) {
                setHeaders(element, values);
            }
        }
        public java.util.List<String> getHeaders(Element element)
        {
            return _p.headersChoosable().getHeaders(element);
        }
        public void setSkipIfNoDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getSkipIfNoDocProperty(), value);
        }
        public void clearSkipIfNoDoc(Element element)
        {
            _p.documentationSkippable().clearSkipIfNoDoc(element);
        }
        @CheckForNull
        public Boolean isSkipIfNoDoc(Element element)
        {
            return _p.documentationSkippable().isSkipIfNoDoc(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.genericTable().getStereotype());
            }
            return false;
        }

    }
    public static class GroupStereotype extends StereotypeWrapper
    {


        //stereotype Group and its tags
        public static final String STEREOTYPE_NAME =  "Group";

        private final SysMLExtensions _p;
        protected  GroupStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.group().getStereotype());
            }
            return false;
        }

    }
    public static class HasCaptionsStereotype extends StereotypeWrapper
    {


        //stereotype HasCaptions and its tags
        public static final String STEREOTYPE_NAME =  "HasCaptions";

        /**
         * The field takes ordered list of captions. Applicable to images and tables.
         */public static final String CAPTIONS =  "captions";

        /**
         * Exclude from lists like Table of Contents, List of Tables, List of Figures, etc., as applicable.
         */public static final String EXCLUDEFROMLIST =  "excludeFromList";
        public static final String SHOWCAPTIONS =  "showCaptions";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property captions;
        @CheckForNull
        private Property excludeFromList;
        @CheckForNull
        private Property showCaptions;
        protected  HasCaptionsStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getCaptionsProperty()
        {
            if (captions == null)
            {
                captions = getTagByName(getStereotype(), CAPTIONS);
            }
            return captions;
        }

        @CheckForNull
        public Property getExcludeFromListProperty()
        {
            if (excludeFromList == null)
            {
                excludeFromList = getTagByName(getStereotype(), EXCLUDEFROMLIST);
            }
            return excludeFromList;
        }

        @CheckForNull
        public Property getShowCaptionsProperty()
        {
            if (showCaptions == null)
            {
                showCaptions = getTagByName(getStereotype(), SHOWCAPTIONS);
            }
            return showCaptions;
        }

        public void setCaptions(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void clearCaptions(Element element)
        {
            Profiles.clearValue(element, getCaptionsProperty());
        }
        public void addCaptions(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void removeCaptions(Element element, String value)
        {
            java.util.List<String> values = getCaptions(element);
            if (values.remove(value)) {
                setCaptions(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getCaptions(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getCaptionsProperty());
        }

        public void setExcludeFromList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getExcludeFromListProperty(), value);
        }
        public void clearExcludeFromList(Element element)
        {
            Profiles.clearValue(element, getExcludeFromListProperty());
        }

        @CheckForNull
        public Boolean isExcludeFromList(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getExcludeFromListProperty()));
        }

        public void setShowCaptions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowCaptionsProperty(), value);
        }
        public void clearShowCaptions(Element element)
        {
            Profiles.clearValue(element, getShowCaptionsProperty());
        }

        @CheckForNull
        public Boolean isShowCaptions(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getShowCaptionsProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            captions = null;
            excludeFromList = null;
            showCaptions = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.hasCaptions().getStereotype());
            }
            return false;
        }

    }
    public static class HasTimeoutStereotype extends StereotypeWrapper
    {


        //stereotype HasTimeout and its tags
        public static final String STEREOTYPE_NAME =  "HasTimeout";
        public static final String TIMEOUT =  "timeout";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property timeout;
        protected  HasTimeoutStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTimeoutProperty()
        {
            if (timeout == null)
            {
                timeout = getTagByName(getStereotype(), TIMEOUT);
            }
            return timeout;
        }

        public void setTimeout(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getTimeoutProperty(), value);
        }
        public void clearTimeout(Element element)
        {
            Profiles.clearValue(element, getTimeoutProperty());
        }

        @CheckForNull
        public Integer getTimeout(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getTimeoutProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            timeout = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.hasTimeout().getStereotype());
            }
            return false;
        }

    }
    public static class HasTitleStereotype extends StereotypeWrapper
    {


        //stereotype HasTitle and its tags
        public static final String STEREOTYPE_NAME =  "HasTitle";

        /**
         * Title of a section/appendix
         */public static final String TITLE =  "title";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property title;
        protected  HasTitleStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTitleProperty()
        {
            if (title == null)
            {
                title = getTagByName(getStereotype(), TITLE);
            }
            return title;
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        public void setTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleProperty(), value);
        }
        public void clearTitle(Element element)
        {
            Profiles.clearValue(element, getTitleProperty());
        }

        @CheckForNull
        public String getTitle(Element element)
        {
            return toString(Profiles.getFirstValue(element, getTitleProperty()));
        }

        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            title = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.hasTitle().getStereotype());
            }
            return false;
        }

    }
    public static class HasTitleStuffStereotype extends StereotypeWrapper
    {


        //stereotype HasTitleStuff and its tags
        public static final String STEREOTYPE_NAME =  "HasTitleStuff";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property titlePrefix;
        @CheckForNull
        private Property titleSuffix;
        @CheckForNull
        private Property useSectionNameAsTitle;
        protected  HasTitleStuffStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            if (titlePrefix == null)
            {
                titlePrefix = getTagByName(getStereotype(), TITLEPREFIX);
            }
            return titlePrefix;
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            if (titleSuffix == null)
            {
                titleSuffix = getTagByName(getStereotype(), TITLESUFFIX);
            }
            return titleSuffix;
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            if (useSectionNameAsTitle == null)
            {
                useSectionNameAsTitle = getTagByName(getStereotype(), USESECTIONNAMEASTITLE);
            }
            return useSectionNameAsTitle;
        }

        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            Profiles.clearValue(element, getTitlePrefixProperty());
        }

        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return toString(Profiles.getFirstValue(element, getTitlePrefixProperty()));
        }

        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            Profiles.clearValue(element, getTitleSuffixProperty());
        }

        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return toString(Profiles.getFirstValue(element, getTitleSuffixProperty()));
        }

        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            Profiles.clearValue(element, getUseSectionNameAsTitleProperty());
        }

        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getUseSectionNameAsTitleProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            titlePrefix = null;
            titleSuffix = null;
            useSectionNameAsTitle = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.hasTitleStuff().getStereotype());
            }
            return false;
        }

    }
    public static class HasTitlesStereotype extends StereotypeWrapper
    {


        //stereotype HasTitles and its tags
        public static final String STEREOTYPE_NAME =  "HasTitles";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property titles;
        protected  HasTitlesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTitlesProperty()
        {
            if (titles == null)
            {
                titles = getTagByName(getStereotype(), TITLES);
            }
            return titles;
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            Profiles.clearValue(element, getTitlesProperty());
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getTitles(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getTitlesProperty());
        }

        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            titles = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.hasTitles().getStereotype());
            }
            return false;
        }

    }
    public static class HasTypesStereotype extends StereotypeWrapper
    {


        //stereotype HasTypes and its tags
        public static final String STEREOTYPE_NAME =  "HasTypes";

        /**
         * Where application, shows the type of an element (ex. attributes in properties table)
         */public static final String SHOWTYPE =  "showType";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property showType;
        protected  HasTypesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getShowTypeProperty()
        {
            if (showType == null)
            {
                showType = getTagByName(getStereotype(), SHOWTYPE);
            }
            return showType;
        }

        public void setShowType(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowTypeProperty(), value);
        }
        public void clearShowType(Element element)
        {
            Profiles.clearValue(element, getShowTypeProperty());
        }

        @CheckForNull
        public Boolean isShowType(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getShowTypeProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            showType = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.hasTypes().getStereotype());
            }
            return false;
        }

    }
    public static class HeadersChoosableStereotype extends StereotypeWrapper
    {


        //stereotype HeadersChoosable and its tags
        public static final String STEREOTYPE_NAME =  "HeadersChoosable";

        /**
         * Applies to certain tables where headers can be customized. As of now - CombinedMatrix and GenericTable
         */public static final String HEADERS =  "headers";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property headers;
        protected  HeadersChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getHeadersProperty()
        {
            if (headers == null)
            {
                headers = getTagByName(getStereotype(), HEADERS);
            }
            return headers;
        }

        public void setHeaders(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getHeadersProperty(), value);
        }
        public void clearHeaders(Element element)
        {
            Profiles.clearValue(element, getHeadersProperty());
        }
        public void addHeaders(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getHeadersProperty(), value);
        }
        public void removeHeaders(Element element, String value)
        {
            java.util.List<String> values = getHeaders(element);
            if (values.remove(value)) {
                setHeaders(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getHeaders(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getHeadersProperty());
        }

        @Override
        protected void clear()
        {
            super.clear();
            headers = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.headersChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class HierarchicalPropertiesTableStereotype extends StereotypeWrapper
    {


        //stereotype HierarchicalPropertiesTable and its tags
        public static final String STEREOTYPE_NAME =  "HierarchicalPropertiesTable";

        /**
         * Optional. Maximum depth of row hierarchy. 0 means infinite and is the default.
         */public static final String MAXDEPTH =  "maxDepth";

        /**
         * Optional. Specifies what kind of association to follow for hierarchical properties. 1 for composite, 2 for shared, 0 for both (default is 0).
         */public static final String TOPASSOCIATIONTYPE =  "topAssociationType";

        /**
         * Optional. Exclude properties with these names.
         */public static final String TOPEXCLUDENAME =  "topExcludeName";

        /**
         * Optional. Exclude properties with these stereotypes or whose type has these stereotypes.
         */public static final String TOPEXCLUDESTEREOTYPE =  "topExcludeStereotype";

        /**
         * Optional. Exclude properties whose type are these type names.
         */public static final String TOPEXCLUDETYPENAME =  "topExcludeTypeName";

        /**
         * Optional. Include properties with these names.
         */public static final String TOPINCLUDENAME =  "topIncludeName";

        /**
         * Optional. Include properties with these stereotypes or whose type has these stereotypes.
         */public static final String TOPINCLUDESTEREOTYPE =  "topIncludeStereotype";

        /**
         * Optional. Include properties whose type are these type names.
         */public static final String TOPINCLUDETYPENAME =  "topIncludeTypeName";

        /**
         * Optional. Give a list of property names your want to appear in order. The following rule would be applied: for each property hierarchy level: leaf properties will always appear first, user order will then be applied, the rest is alphabetical. If this is empty and topIncludeName is not empty, the order from topIncludeName will be used for ordering instead.
         */public static final String TOPORDER =  "topOrder";

        /**
         * Column widths from left to right, create a new value for each column. For View Editor, use % of table or see the 'width' attribute for tag Col https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col. For Docbook, it can be either a fixed measure using one of the CALS units (36pt, 10pc, etc.) or a proportional measure. Proportional measures have the form    number*   , meaning this column should be number times wider than a column with the measure    1*    (or just    *   ). These two forms can be mixed, as in    3*+1pc   . (Description taken from Docbook spec's ColSpec element)
         */public static final String COLWIDTHS =  "colwidths";

        /**
         * Applies to EMS, if true will not show headers on EMS.
         */public static final String HIDEHEADERS =  "hideHeaders";

        /**
         * Applies to how it's rendered on EMS, if table has no rows will not show table by default.
         */public static final String SHOWIFEMPTY =  "showIfEmpty";

        /**
         * This will be set as the class of the resulting html table.
         */public static final String STYLE =  "style";

        /**
         * If true will rotate table 90 degrees anticlockwise (not really transpose).
         */public static final String TRANSPOSE =  "transpose";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * The field takes ordered list of captions. Applicable to images and tables.
         */public static final String CAPTIONS =  "captions";

        /**
         * Exclude from lists like Table of Contents, List of Tables, List of Figures, etc., as applicable.
         */public static final String EXCLUDEFROMLIST =  "excludeFromList";
        public static final String SHOWCAPTIONS =  "showCaptions";

        /**
         * Where applicable, includes the documentation of the element. For tables, this will be shown in the column right after the element. For lists, it'll be shown right below.
         */public static final String INCLUDEDOC =  "includeDoc";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        /**
         * Optional. If a property is a number, this specifies to how many decimal places it will be rendered.
         */public static final String FLOATINGPRECISION =  "floatingPrecision";

        /**
         * Consider inherited properties (except those that are redefined) Default is false.
         */public static final String INCLUDEINHERITED =  "includeInherited";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property maxDepth;
        @CheckForNull
        private Property topAssociationType;
        @CheckForNull
        private Property topExcludeName;
        @CheckForNull
        private Property topExcludeStereotype;
        @CheckForNull
        private Property topExcludeTypeName;
        @CheckForNull
        private Property topIncludeName;
        @CheckForNull
        private Property topIncludeStereotype;
        @CheckForNull
        private Property topIncludeTypeName;
        @CheckForNull
        private Property topOrder;
        protected  HierarchicalPropertiesTableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getMaxDepthProperty()
        {
            if (maxDepth == null)
            {
                maxDepth = getTagByName(getStereotype(), MAXDEPTH);
            }
            return maxDepth;
        }

        @CheckForNull
        public Property getTopAssociationTypeProperty()
        {
            if (topAssociationType == null)
            {
                topAssociationType = getTagByName(getStereotype(), TOPASSOCIATIONTYPE);
            }
            return topAssociationType;
        }

        @CheckForNull
        public Property getTopExcludeNameProperty()
        {
            if (topExcludeName == null)
            {
                topExcludeName = getTagByName(getStereotype(), TOPEXCLUDENAME);
            }
            return topExcludeName;
        }

        @CheckForNull
        public Property getTopExcludeStereotypeProperty()
        {
            if (topExcludeStereotype == null)
            {
                topExcludeStereotype = getTagByName(getStereotype(), TOPEXCLUDESTEREOTYPE);
            }
            return topExcludeStereotype;
        }

        @CheckForNull
        public Property getTopExcludeTypeNameProperty()
        {
            if (topExcludeTypeName == null)
            {
                topExcludeTypeName = getTagByName(getStereotype(), TOPEXCLUDETYPENAME);
            }
            return topExcludeTypeName;
        }

        @CheckForNull
        public Property getTopIncludeNameProperty()
        {
            if (topIncludeName == null)
            {
                topIncludeName = getTagByName(getStereotype(), TOPINCLUDENAME);
            }
            return topIncludeName;
        }

        @CheckForNull
        public Property getTopIncludeStereotypeProperty()
        {
            if (topIncludeStereotype == null)
            {
                topIncludeStereotype = getTagByName(getStereotype(), TOPINCLUDESTEREOTYPE);
            }
            return topIncludeStereotype;
        }

        @CheckForNull
        public Property getTopIncludeTypeNameProperty()
        {
            if (topIncludeTypeName == null)
            {
                topIncludeTypeName = getTagByName(getStereotype(), TOPINCLUDETYPENAME);
            }
            return topIncludeTypeName;
        }

        @CheckForNull
        public Property getTopOrderProperty()
        {
            if (topOrder == null)
            {
                topOrder = getTagByName(getStereotype(), TOPORDER);
            }
            return topOrder;
        }

        @CheckForNull
        public Property getColwidthsProperty()
        {
            return _p.table().getColwidthsProperty();
        }

        @CheckForNull
        public Property getHideHeadersProperty()
        {
            return _p.table().getHideHeadersProperty();
        }

        @CheckForNull
        public Property getShowIfEmptyProperty()
        {
            return _p.table().getShowIfEmptyProperty();
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            return _p.table().getStyleProperty();
        }

        @CheckForNull
        public Property getTransposeProperty()
        {
            return _p.table().getTransposeProperty();
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getCaptionsProperty()
        {
            return _p.hasCaptions().getCaptionsProperty();
        }

        @CheckForNull
        public Property getExcludeFromListProperty()
        {
            return _p.hasCaptions().getExcludeFromListProperty();
        }

        @CheckForNull
        public Property getShowCaptionsProperty()
        {
            return _p.hasCaptions().getShowCaptionsProperty();
        }

        @CheckForNull
        public Property getIncludeDocProperty()
        {
            return _p.documentationChoosable().getIncludeDocProperty();
        }

        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        @CheckForNull
        public Property getFloatingPrecisionProperty()
        {
            return _p.precisionChoosable().getFloatingPrecisionProperty();
        }

        @CheckForNull
        public Property getIncludeInheritedProperty()
        {
            return _p.includeInheritedChoosable().getIncludeInheritedProperty();
        }

        public void setMaxDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getMaxDepthProperty(), value);
        }
        public void clearMaxDepth(Element element)
        {
            Profiles.clearValue(element, getMaxDepthProperty());
        }

        @CheckForNull
        public Integer getMaxDepth(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getMaxDepthProperty()));
        }

        public void setTopAssociationType(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getTopAssociationTypeProperty(), value);
        }
        public void clearTopAssociationType(Element element)
        {
            Profiles.clearValue(element, getTopAssociationTypeProperty());
        }

        @CheckForNull
        public Integer getTopAssociationType(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getTopAssociationTypeProperty()));
        }

        public void setTopExcludeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopExcludeNameProperty(), value);
        }
        public void clearTopExcludeName(Element element)
        {
            Profiles.clearValue(element, getTopExcludeNameProperty());
        }
        public void addTopExcludeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopExcludeNameProperty(), value);
        }
        public void removeTopExcludeName(Element element, Element value)
        {
            java.util.List<Element> values = getTopExcludeName(element);
            if (values.remove(value)) {
                setTopExcludeName(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getTopExcludeName(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getTopExcludeNameProperty());
        }

        public void setTopExcludeStereotype(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopExcludeStereotypeProperty(), value);
        }
        public void clearTopExcludeStereotype(Element element)
        {
            Profiles.clearValue(element, getTopExcludeStereotypeProperty());
        }
        public void addTopExcludeStereotype(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopExcludeStereotypeProperty(), value);
        }
        public void removeTopExcludeStereotype(Element element, Element value)
        {
            java.util.List<Element> values = getTopExcludeStereotype(element);
            if (values.remove(value)) {
                setTopExcludeStereotype(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getTopExcludeStereotype(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getTopExcludeStereotypeProperty());
        }

        public void setTopExcludeTypeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopExcludeTypeNameProperty(), value);
        }
        public void clearTopExcludeTypeName(Element element)
        {
            Profiles.clearValue(element, getTopExcludeTypeNameProperty());
        }
        public void addTopExcludeTypeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopExcludeTypeNameProperty(), value);
        }
        public void removeTopExcludeTypeName(Element element, Element value)
        {
            java.util.List<Element> values = getTopExcludeTypeName(element);
            if (values.remove(value)) {
                setTopExcludeTypeName(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getTopExcludeTypeName(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getTopExcludeTypeNameProperty());
        }

        public void setTopIncludeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopIncludeNameProperty(), value);
        }
        public void clearTopIncludeName(Element element)
        {
            Profiles.clearValue(element, getTopIncludeNameProperty());
        }
        public void addTopIncludeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopIncludeNameProperty(), value);
        }
        public void removeTopIncludeName(Element element, Element value)
        {
            java.util.List<Element> values = getTopIncludeName(element);
            if (values.remove(value)) {
                setTopIncludeName(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getTopIncludeName(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getTopIncludeNameProperty());
        }

        public void setTopIncludeStereotype(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopIncludeStereotypeProperty(), value);
        }
        public void clearTopIncludeStereotype(Element element)
        {
            Profiles.clearValue(element, getTopIncludeStereotypeProperty());
        }
        public void addTopIncludeStereotype(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopIncludeStereotypeProperty(), value);
        }
        public void removeTopIncludeStereotype(Element element, Element value)
        {
            java.util.List<Element> values = getTopIncludeStereotype(element);
            if (values.remove(value)) {
                setTopIncludeStereotype(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getTopIncludeStereotype(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getTopIncludeStereotypeProperty());
        }

        public void setTopIncludeTypeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopIncludeTypeNameProperty(), value);
        }
        public void clearTopIncludeTypeName(Element element)
        {
            Profiles.clearValue(element, getTopIncludeTypeNameProperty());
        }
        public void addTopIncludeTypeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopIncludeTypeNameProperty(), value);
        }
        public void removeTopIncludeTypeName(Element element, Element value)
        {
            java.util.List<Element> values = getTopIncludeTypeName(element);
            if (values.remove(value)) {
                setTopIncludeTypeName(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getTopIncludeTypeName(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getTopIncludeTypeNameProperty());
        }

        public void setTopOrder(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopOrderProperty(), value);
        }
        public void clearTopOrder(Element element)
        {
            Profiles.clearValue(element, getTopOrderProperty());
        }
        public void addTopOrder(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopOrderProperty(), value);
        }
        public void removeTopOrder(Element element, Element value)
        {
            java.util.List<Element> values = getTopOrder(element);
            if (values.remove(value)) {
                setTopOrder(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getTopOrder(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getTopOrderProperty());
        }

        public void setColwidths(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void clearColwidths(Element element)
        {
            _p.table().clearColwidths(element);
        }
        public void addColwidths(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void removeColwidths(Element element, String value)
        {
            java.util.List<String> values = getColwidths(element);
            if (values.remove(value)) {
                setColwidths(element, values);
            }
        }
        public java.util.List<String> getColwidths(Element element)
        {
            return _p.table().getColwidths(element);
        }
        public void setHideHeaders(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getHideHeadersProperty(), value);
        }
        public void clearHideHeaders(Element element)
        {
            _p.table().clearHideHeaders(element);
        }
        @CheckForNull
        public Boolean isHideHeaders(Element element)
        {
            return _p.table().isHideHeaders(element);
        }
        public void setShowIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowIfEmptyProperty(), value);
        }
        public void clearShowIfEmpty(Element element)
        {
            _p.table().clearShowIfEmpty(element);
        }
        @CheckForNull
        public Boolean isShowIfEmpty(Element element)
        {
            return _p.table().isShowIfEmpty(element);
        }
        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            _p.table().clearStyle(element);
        }
        @CheckForNull
        public String getStyle(Element element)
        {
            return _p.table().getStyle(element);
        }
        public void setTranspose(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getTransposeProperty(), value);
        }
        public void clearTranspose(Element element)
        {
            _p.table().clearTranspose(element);
        }
        @CheckForNull
        public Boolean isTranspose(Element element)
        {
            return _p.table().isTranspose(element);
        }
        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setCaptions(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void clearCaptions(Element element)
        {
            _p.hasCaptions().clearCaptions(element);
        }
        public void addCaptions(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void removeCaptions(Element element, String value)
        {
            java.util.List<String> values = getCaptions(element);
            if (values.remove(value)) {
                setCaptions(element, values);
            }
        }
        public java.util.List<String> getCaptions(Element element)
        {
            return _p.hasCaptions().getCaptions(element);
        }
        public void setExcludeFromList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getExcludeFromListProperty(), value);
        }
        public void clearExcludeFromList(Element element)
        {
            _p.hasCaptions().clearExcludeFromList(element);
        }
        @CheckForNull
        public Boolean isExcludeFromList(Element element)
        {
            return _p.hasCaptions().isExcludeFromList(element);
        }
        public void setShowCaptions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowCaptionsProperty(), value);
        }
        public void clearShowCaptions(Element element)
        {
            _p.hasCaptions().clearShowCaptions(element);
        }
        @CheckForNull
        public Boolean isShowCaptions(Element element)
        {
            return _p.hasCaptions().isShowCaptions(element);
        }
        public void setIncludeDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeDocProperty(), value);
        }
        public void clearIncludeDoc(Element element)
        {
            _p.documentationChoosable().clearIncludeDoc(element);
        }
        @CheckForNull
        public Boolean isIncludeDoc(Element element)
        {
            return _p.documentationChoosable().isIncludeDoc(element);
        }
        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        public void setFloatingPrecision(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getFloatingPrecisionProperty(), value);
        }
        public void clearFloatingPrecision(Element element)
        {
            _p.precisionChoosable().clearFloatingPrecision(element);
        }
        @CheckForNull
        public Integer getFloatingPrecision(Element element)
        {
            return _p.precisionChoosable().getFloatingPrecision(element);
        }
        public void setIncludeInherited(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeInheritedProperty(), value);
        }
        public void clearIncludeInherited(Element element)
        {
            _p.includeInheritedChoosable().clearIncludeInherited(element);
        }
        @CheckForNull
        public Boolean isIncludeInherited(Element element)
        {
            return _p.includeInheritedChoosable().isIncludeInherited(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            maxDepth = null;
            topAssociationType = null;
            topExcludeName = null;
            topExcludeStereotype = null;
            topExcludeTypeName = null;
            topIncludeName = null;
            topIncludeStereotype = null;
            topIncludeTypeName = null;
            topOrder = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.hierarchicalPropertiesTable().getStereotype());
            }
            return false;
        }

    }
    public static class IgnorableStereotype extends StereotypeWrapper
    {


        //stereotype Ignorable and its tags
        public static final String STEREOTYPE_NAME =  "Ignorable";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property ignore;
        protected  IgnorableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIgnoreProperty()
        {
            if (ignore == null)
            {
                ignore = getTagByName(getStereotype(), IGNORE);
            }
            return ignore;
        }

        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            Profiles.clearValue(element, getIgnoreProperty());
        }

        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIgnoreProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            ignore = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.ignorable().getStereotype());
            }
            return false;
        }

    }
    public static class ImageStereotype extends StereotypeWrapper
    {


        //stereotype Image and its tags
        public static final String STEREOTYPE_NAME =  "Image";

        /**
         * If this is true, the diagram will be generated, but will not be put into the document at this place. This is for the side effect only. Default is false.
         */public static final String DONOTSHOW =  "doNotShow";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * The field takes ordered list of captions. Applicable to images and tables.
         */public static final String CAPTIONS =  "captions";

        /**
         * Exclude from lists like Table of Contents, List of Tables, List of Figures, etc., as applicable.
         */public static final String EXCLUDEFROMLIST =  "excludeFromList";
        public static final String SHOWCAPTIONS =  "showCaptions";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property doNotShow;
        protected  ImageStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDoNotShowProperty()
        {
            if (doNotShow == null)
            {
                doNotShow = getTagByName(getStereotype(), DONOTSHOW);
            }
            return doNotShow;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getCaptionsProperty()
        {
            return _p.hasCaptions().getCaptionsProperty();
        }

        @CheckForNull
        public Property getExcludeFromListProperty()
        {
            return _p.hasCaptions().getExcludeFromListProperty();
        }

        @CheckForNull
        public Property getShowCaptionsProperty()
        {
            return _p.hasCaptions().getShowCaptionsProperty();
        }

        public void setDoNotShow(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getDoNotShowProperty(), value);
        }
        public void clearDoNotShow(Element element)
        {
            Profiles.clearValue(element, getDoNotShowProperty());
        }

        @CheckForNull
        public Boolean isDoNotShow(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getDoNotShowProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setCaptions(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void clearCaptions(Element element)
        {
            _p.hasCaptions().clearCaptions(element);
        }
        public void addCaptions(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void removeCaptions(Element element, String value)
        {
            java.util.List<String> values = getCaptions(element);
            if (values.remove(value)) {
                setCaptions(element, values);
            }
        }
        public java.util.List<String> getCaptions(Element element)
        {
            return _p.hasCaptions().getCaptions(element);
        }
        public void setExcludeFromList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getExcludeFromListProperty(), value);
        }
        public void clearExcludeFromList(Element element)
        {
            _p.hasCaptions().clearExcludeFromList(element);
        }
        @CheckForNull
        public Boolean isExcludeFromList(Element element)
        {
            return _p.hasCaptions().isExcludeFromList(element);
        }
        public void setShowCaptions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowCaptionsProperty(), value);
        }
        public void clearShowCaptions(Element element)
        {
            _p.hasCaptions().clearShowCaptions(element);
        }
        @CheckForNull
        public Boolean isShowCaptions(Element element)
        {
            return _p.hasCaptions().isShowCaptions(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            doNotShow = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.image().getStereotype());
            }
            return false;
        }

    }
    public static class IncludeChoosableStereotype extends StereotypeWrapper
    {


        //stereotype IncludeChoosable and its tags
        public static final String STEREOTYPE_NAME =  "IncludeChoosable";

        /**
         * Applicable for filtering, choose whether the indicated filter criteria is for inclusion or exclusion.
         */public static final String INCLUDE =  "include";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property include;
        protected  IncludeChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeProperty()
        {
            if (include == null)
            {
                include = getTagByName(getStereotype(), INCLUDE);
            }
            return include;
        }

        public void setInclude(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeProperty(), value);
        }
        public void clearInclude(Element element)
        {
            Profiles.clearValue(element, getIncludeProperty());
        }

        @CheckForNull
        public Boolean isInclude(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIncludeProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            include = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.includeChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class IncludeInheritedChoosableStereotype extends StereotypeWrapper
    {


        //stereotype IncludeInheritedChoosable and its tags
        public static final String STEREOTYPE_NAME =  "IncludeInheritedChoosable";

        /**
         * Consider inherited properties (except those that are redefined) Default is false.
         */public static final String INCLUDEINHERITED =  "includeInherited";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property includeInherited;
        protected  IncludeInheritedChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeInheritedProperty()
        {
            if (includeInherited == null)
            {
                includeInherited = getTagByName(getStereotype(), INCLUDEINHERITED);
            }
            return includeInherited;
        }

        public void setIncludeInherited(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeInheritedProperty(), value);
        }
        public void clearIncludeInherited(Element element)
        {
            Profiles.clearValue(element, getIncludeInheritedProperty());
        }

        @CheckForNull
        public Boolean isIncludeInherited(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIncludeInheritedProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            includeInherited = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.includeInheritedChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class IntersectionStereotype extends StereotypeWrapper
    {


        //stereotype Intersection and its tags
        public static final String STEREOTYPE_NAME =  "Intersection";

        private final SysMLExtensions _p;
        protected  IntersectionStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdintermediateactivities.JoinNode &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdintermediateactivities.JoinNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.intersection().getStereotype());
            }
            return false;
        }

    }
    public static class JavaExtensionStereotype extends StereotypeWrapper
    {


        //stereotype JavaExtension and its tags
        public static final String STEREOTYPE_NAME =  "JavaExtension";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        private final SysMLExtensions _p;
        protected  JavaExtensionStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.javaExtension().getStereotype());
            }
            return false;
        }

    }
    public static class LoopableStereotype extends StereotypeWrapper
    {


        //stereotype Loopable and its tags
        public static final String STEREOTYPE_NAME =  "Loopable";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property loop;
        protected  LoopableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getLoopProperty()
        {
            if (loop == null)
            {
                loop = getTagByName(getStereotype(), LOOP);
            }
            return loop;
        }

        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            Profiles.clearValue(element, getLoopProperty());
        }

        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getLoopProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            loop = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.loopable().getStereotype());
            }
            return false;
        }

    }
    public static class MetaclassChoosableStereotype extends StereotypeWrapper
    {


        //stereotype MetaclassChoosable and its tags
        public static final String STEREOTYPE_NAME =  "MetaclassChoosable";

        /**
         * List of metaclasses for filtering. These are "classes" that come from the UML Standard Profile that comes with Magicdraw, inside the UML 2 Metamodel. In the selection dialog that pops up, if you can't find these classes, make sure a little button with the metamodel icon is "checked".
         */public static final String METACLASSES =  "metaclasses";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property metaclasses;
        protected  MetaclassChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getMetaclassesProperty()
        {
            if (metaclasses == null)
            {
                metaclasses = getTagByName(getStereotype(), METACLASSES);
            }
            return metaclasses;
        }

        public void setMetaclasses(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getMetaclassesProperty(), value);
        }
        public void clearMetaclasses(Element element)
        {
            Profiles.clearValue(element, getMetaclassesProperty());
        }
        public void addMetaclasses(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getMetaclassesProperty(), value);
        }
        public void removeMetaclasses(Element element, Element value)
        {
            java.util.List<Element> values = getMetaclasses(element);
            if (values.remove(value)) {
                setMetaclasses(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getMetaclasses(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getMetaclassesProperty());
        }

        @Override
        protected void clear()
        {
            super.clear();
            metaclasses = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.metaclassChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class MethodStereotype extends StereotypeWrapper
    {


        //stereotype Method and its tags
        public static final String STEREOTYPE_NAME =  "Method";

        /**
         * If true, adds view, viewpoint, method (activity), "AddressedTo" elements and "Covers" elements to list of elements passed into viewpoint.
         */public static final String INCLUDEVIEWPOINTELEMENTS =  "includeViewpointElements";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property includeViewpointElements;
        protected  MethodStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncludeViewpointElementsProperty()
        {
            if (includeViewpointElements == null)
            {
                includeViewpointElements = getTagByName(getStereotype(), INCLUDEVIEWPOINTELEMENTS);
            }
            return includeViewpointElements;
        }

        public void setIncludeViewpointElements(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeViewpointElementsProperty(), value);
        }
        public void clearIncludeViewpointElements(Element element)
        {
            Profiles.clearValue(element, getIncludeViewpointElementsProperty());
        }

        @CheckForNull
        public Boolean isIncludeViewpointElements(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIncludeViewpointElementsProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            includeViewpointElements = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.method().getStereotype());
            }
            return false;
        }

    }
    public static class ModelManagementSystemStereotype extends StereotypeWrapper
    {


        //stereotype ModelManagementSystem and its tags
        public static final String STEREOTYPE_NAME =  "ModelManagementSystem";
        public static final String MMS_URL =  "MMS URL";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property mmsurl;
        protected  ModelManagementSystemStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getMmsURLProperty()
        {
            if (mmsurl == null)
            {
                mmsurl = getTagByName(getStereotype(), MMS_URL);
            }
            return mmsurl;
        }

        public void setMmsURL(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getMmsURLProperty(), value);
        }
        public void clearMmsURL(Element element)
        {
            Profiles.clearValue(element, getMmsURLProperty());
        }
        public void addMmsURL(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getMmsURLProperty(), value);
        }
        public void removeMmsURL(Element element, String value)
        {
            java.util.List<String> values = getMmsURL(element);
            if (values.remove(value)) {
                setMmsURL(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getMmsURL(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getMmsURLProperty());
        }

        @Override
        protected void clear()
        {
            super.clear();
            mmsurl = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.auxiliaryconstructs.mdmodels.Model &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.auxiliaryconstructs.mdmodels.Model)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.modelManagementSystem().getStereotype());
            }
            return false;
        }

    }
    public static class NameChoosableStereotype extends StereotypeWrapper
    {


        //stereotype NameChoosable and its tags
        public static final String STEREOTYPE_NAME =  "NameChoosable";

        /**
         * List of regular expression strings. See java.util.regex.Pattern for how regex patterns work.
         */public static final String NAMES =  "names";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property names;
        protected  NameChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getNamesProperty()
        {
            if (names == null)
            {
                names = getTagByName(getStereotype(), NAMES);
            }
            return names;
        }

        public void setNames(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getNamesProperty(), value);
        }
        public void clearNames(Element element)
        {
            Profiles.clearValue(element, getNamesProperty());
        }
        public void addNames(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getNamesProperty(), value);
        }
        public void removeNames(Element element, String value)
        {
            java.util.List<String> values = getNames(element);
            if (values.remove(value)) {
                setNames(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getNames(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getNamesProperty());
        }

        @Override
        protected void clear()
        {
            super.clear();
            names = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.nameChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class ParagraphStereotype extends StereotypeWrapper
    {


        //stereotype Paragraph and its tags
        public static final String STEREOTYPE_NAME =  "Paragraph";

        /**
         * Required if a literal paragraph (not as a query). The text of your paragraph. You can include any docbook tags within your text, but if you do, make sure they are valid and complete, and include starting and ending "para" tags around your whole body.
         */public static final String BODY =  "body";

        /**
         * If true, will take ocl in body and apply to input elements.
         */public static final String EVALUATEOCL =  "evaluateOcl";

        /**
         * If ocl is true, whether to apply ocl to each input elements or as a collection.
         */public static final String ITERATE =  "iterate";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        /**
         * The attribute can be name, documentation, or value (in the case of property or slots)
         */public static final String DESIREDATTRIBUTE =  "desiredAttribute";
        public static final String EDITABLE =  "editable";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property body;
        @CheckForNull
        private Property evaluateOcl;
        @CheckForNull
        private Property iterate;
        protected  ParagraphStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getBodyProperty()
        {
            if (body == null)
            {
                body = getTagByName(getStereotype(), BODY);
            }
            return body;
        }

        @CheckForNull
        public Property getEvaluateOclProperty()
        {
            if (evaluateOcl == null)
            {
                evaluateOcl = getTagByName(getStereotype(), EVALUATEOCL);
            }
            return evaluateOcl;
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            if (iterate == null)
            {
                iterate = getTagByName(getStereotype(), ITERATE);
            }
            return iterate;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        @CheckForNull
        public Property getDesiredAttributeProperty()
        {
            return _p.attributeChoosable().getDesiredAttributeProperty();
        }

        @CheckForNull
        public Property getEditableProperty()
        {
            return _p.editableChoosable().getEditableProperty();
        }

        public void setBody(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getBodyProperty(), value);
        }
        public void clearBody(Element element)
        {
            Profiles.clearValue(element, getBodyProperty());
        }

        @CheckForNull
        public String getBody(Element element)
        {
            return toString(Profiles.getFirstValue(element, getBodyProperty()));
        }

        public void setEvaluateOcl(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getEvaluateOclProperty(), value);
        }
        public void clearEvaluateOcl(Element element)
        {
            Profiles.clearValue(element, getEvaluateOclProperty());
        }

        @CheckForNull
        public Boolean isEvaluateOcl(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getEvaluateOclProperty()));
        }

        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            Profiles.clearValue(element, getIterateProperty());
        }

        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIterateProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        public void setDesiredAttribute(Element element, @CheckForNull AttributeEnum value)
        {
            Profiles.setValue(element, getStereotype(), getDesiredAttributeProperty(), value != null ? value.getText() : null);
        }
        public void clearDesiredAttribute(Element element)
        {
            _p.attributeChoosable().clearDesiredAttribute(element);
        }
        @CheckForNull
        public AttributeEnum getDesiredAttribute(Element element)
        {
            return _p.attributeChoosable().getDesiredAttribute(element);
        }
        public void setEditable(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getEditableProperty(), value);
        }
        public void clearEditable(Element element)
        {
            _p.editableChoosable().clearEditable(element);
        }
        @CheckForNull
        public Boolean isEditable(Element element)
        {
            return _p.editableChoosable().isEditable(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            body = null;
            evaluateOcl = null;
            iterate = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.paragraph().getStereotype());
            }
            return false;
        }

    }
    public static class ParallelStereotype extends StereotypeWrapper
    {


        //stereotype Parallel and its tags
        public static final String STEREOTYPE_NAME =  "Parallel";

        private final SysMLExtensions _p;
        protected  ParallelStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdintermediateactivities.ForkNode &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdintermediateactivities.ForkNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.parallel().getStereotype());
            }
            return false;
        }

    }
    public static class PlotStereotype extends StereotypeWrapper
    {


        //stereotype Plot and its tags
        public static final String STEREOTYPE_NAME =  "Plot";
        public static final String PLOTCONFIGURATION =  "plotConfiguration";
        public static final String PLOTTITLE =  "plotTitle";
        public static final String PLOTTYPE =  "plotType";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property plotConfiguration;
        @CheckForNull
        private Property plotTitle;
        @CheckForNull
        private Property plotType;
        protected  PlotStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getPlotConfigurationProperty()
        {
            if (plotConfiguration == null)
            {
                plotConfiguration = getTagByName(getStereotype(), PLOTCONFIGURATION);
            }
            return plotConfiguration;
        }

        @CheckForNull
        public Property getPlotTitleProperty()
        {
            if (plotTitle == null)
            {
                plotTitle = getTagByName(getStereotype(), PLOTTITLE);
            }
            return plotTitle;
        }

        @CheckForNull
        public Property getPlotTypeProperty()
        {
            if (plotType == null)
            {
                plotType = getTagByName(getStereotype(), PLOTTYPE);
            }
            return plotType;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        public void setPlotConfiguration(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getPlotConfigurationProperty(), value);
        }
        public void clearPlotConfiguration(Element element)
        {
            Profiles.clearValue(element, getPlotConfigurationProperty());
        }

        @CheckForNull
        public String getPlotConfiguration(Element element)
        {
            return toString(Profiles.getFirstValue(element, getPlotConfigurationProperty()));
        }

        public void setPlotTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getPlotTitleProperty(), value);
        }
        public void clearPlotTitle(Element element)
        {
            Profiles.clearValue(element, getPlotTitleProperty());
        }

        @CheckForNull
        public String getPlotTitle(Element element)
        {
            return toString(Profiles.getFirstValue(element, getPlotTitleProperty()));
        }

        public void setPlotType(Element element, @CheckForNull PlotTypeEnum value)
        {
            Profiles.setValue(element, getStereotype(), getPlotTypeProperty(), value != null ? value.getText() : null);
        }
        public void clearPlotType(Element element)
        {
            Profiles.clearValue(element, getPlotTypeProperty());
        }

        @CheckForNull
        public PlotTypeEnum getPlotType(Element element)
        {
            return PlotTypeEnum.from(Profiles.getFirstValue(element, getPlotTypeProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            plotConfiguration = null;
            plotTitle = null;
            plotType = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.plot().getStereotype());
            }
            return false;
        }

    }
    public static class PrecisionChoosableStereotype extends StereotypeWrapper
    {


        //stereotype PrecisionChoosable and its tags
        public static final String STEREOTYPE_NAME =  "PrecisionChoosable";

        /**
         * Optional. If a property is a number, this specifies to how many decimal places it will be rendered.
         */public static final String FLOATINGPRECISION =  "floatingPrecision";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property floatingPrecision;
        protected  PrecisionChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getFloatingPrecisionProperty()
        {
            if (floatingPrecision == null)
            {
                floatingPrecision = getTagByName(getStereotype(), FLOATINGPRECISION);
            }
            return floatingPrecision;
        }

        public void setFloatingPrecision(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getFloatingPrecisionProperty(), value);
        }
        public void clearFloatingPrecision(Element element)
        {
            Profiles.clearValue(element, getFloatingPrecisionProperty());
        }

        @CheckForNull
        public Integer getFloatingPrecision(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getFloatingPrecisionProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            floatingPrecision = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.precisionChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class ProductStereotype extends StereotypeWrapper
    {


        //stereotype Product and its tags
        public static final String STEREOTYPE_NAME =  "Product";

        /**
         * The Approver(s) of the document. You may have as many as you want. The format is:
         Firstname,Lastname,jobtitle,organization,section. Example:
         Peter J.,Di Pasquale,Ground Data Systems Engineer,JPL,393b
         */public static final String APPROVER =  "Approver";

        /**
         * The Author(s) of the document. You may have as many as you want. The format is:
         Firstname,Lastname,jobtitle,organization,section. Example:
         Peter J.,Di Pasquale,Ground Data Systems Engineer,JPL,393b
         */public static final String AUTHOR =  "Author";

        /**
         * You may add as many collaborator emails as you like by pressing the + button and adding one email per plus.
         */public static final String COLLABORATOR_EMAIL =  "Collaborator Email";

        /**
         * The concurrence section of the document. You may have as many as you want. The format is:
         Firstname,Lastname,jobtitle,organization,section. Example:

         Peter J.,Di Pasquale,Ground Data Systems Engineer,JPL,393b
         */public static final String CONCURRENCE =  "Concurrence";

        /**
         * The abbreviated title of the document.
         */public static final String DOCUMENT_ACRONYM =  "Document Acronym";

        /**
         * Legal notice for the document footer. Default value is to display that paper documents may not be current.
         */public static final String FOOTER_LEGAL_NOTICE =  "Footer Legal Notice";

        /**
         * The title of the project.

         */public static final String FORMAL_PROJECT_TITLE =  "Formal Project Title";

        /**
         * Link to a logo image
         */public static final String INSTLOGO =  "InstLogo";
        public static final String INSTLOGOSIZE =  "InstLogoSize";

        /**
         * Jet Propulsion Laboratory
         */public static final String INSTTXT1 =  "Insttxt1";

        /**
         * California Institute of Technology
         */public static final String INSTTXT2 =  "Insttxt2";

        /**
         * Supported Alignments are: "left", "right", "center".
         */public static final String LOGO_ALIGNMENT =  "Logo Alignment";

        /**
         * This is the file location of your logo. It can be a local file, or a file accessible via the Internet.
         */public static final String LOGO_LOCATION =  "Logo Location";
        public static final String LOGO_SIZE =  "Logo Size";

        /**
         * Project Acronym
         */public static final String PROJECT_ACRONYM =  "Project Acronym";

        /**
         * Set to one for blank pages, set to zero for none. Note: Currently not functional.
         */public static final String REMOVE_BLANK_PAGES =  "Remove Blank Pages";

        /**
         * The history of the revision. You may have as many as you want.
         Must follow this format:
         Version|DateEdited|EditorFirstName|EditorLastName|Changes. Example:

         Draft|4/12/13|John Q|Smith|Document Created

         */public static final String REVISION_HISTORY =  "Revision History";

        /**
         * Supressing the metadata removes all JPL stylesheet information.  The default is false such that all stylesheet information like the authors, approves, logo, ..etc. are included in the render of the document.
         */public static final String SUPRESSMETADATA =  "SupressMetadata";

        /**
         * JPL Standard Legal Notice. Default value is to display not cleared for export control.
         */public static final String TITLE_PAGE_LEGAL_NOTICE =  "Title Page Legal Notice";

        /**
         * For Images
         */public static final String CAPTION =  "caption";
        public static final String COLLECTVIEWACTIONS =  "collectViewActions";
        public static final String ELEMENTS =  "elements";
        public static final String STYLE =  "style";
        public static final String STAKEHOLDER =  "stakeholder";

        /**
         * The viewpoint for this View, derived from the supplier of the   conform   dependency whose client is this View.
         */public static final String VIEWPOINT =  "viewPoint";

        /**
         * If true, then the block is treated as a black box; a part typed by this black box can only be connected via its ports or directly to its outer boundary. If false, or if a value is not present, then connections can be established to elements of its internal structure via deep-nested connector ends.
         */public static final String ISENCAPSULATED =  "isEncapsulated";
        public static final String ACKNOWLEDGEMENTS =  "acknowledgements";

        /**
         * Optional stylesheet parameter. Whether to chunk first sections. If not, this means in html, each section or chapter page will include the first section. Default is true. (Only matters to docweb)
         */public static final String CHUNKFIRSTSECTIONS =  "chunkFirstSections";

        /**
         * Optional stylesheet parameter. This is for html chunking - what's the max depth of a section that'll be put on a different page. Default is 20. (Only matters to docweb)
         */public static final String CHUNKSECTIONDEPTH =  "chunkSectionDepth";

        /**
         * Optional. The Diagram to display on the cover page, right after title and authors (if there's any)
         */public static final String COVERIMAGE =  "coverImage";
        public static final String FIGURECONTEXTDEPTH =  "figureContextDepth";
        public static final String FIGURESEPARATOR =  "figureSeparator";

        /**
         * Optional footer string on each page of the document. (for docweb) Do not put docbook tags in here! This should be a simple string with no markup.
         */public static final String FOOTER =  "footer";

        /**
         * This property allows you to specify whether you will generate new versions of images associated with the document. If you are generating frequently and not changing the images, this is useful because generating images slows the generation process significantly when there are a lot of images. If an image does not exist yet, it will be generated regardless of whether this property is checked.
         */public static final String GENNEWIMAGES =  "genNewImages";

        /**
         * Optional header string on each page of the document. (for docweb) Do not put docbook tags in here! This should be a simple string with no markup.
         */public static final String HEADER =  "header";

        /**
         * <para>Check this box to generate an index. To register things that should go in the index you must place a tag at the point in the text where the reader should be referred if they were to look it up. Use the following syntax:
         <programlisting><![CDATA[
         <indexterm><primary>some term</primary></indexterm>
         ]]>
         </programlisting>
         </para>
         */public static final String INDEX =  "index";

        /**
         * Optional. A string to display after a coverImage if there's any.
         */public static final String LEGALNOTICE =  "legalNotice";

        /**
         * This is the subtitle of the document. It usually appears under the title in italics, or after a colon. The formatting is up to you.
         */public static final String SUBTITLE =  "subtitle";

        /**
         * Optional stylesheet parameter. How many nested sections to display in table of contents for html. Default is 20. (Only matters to docweb)
         */public static final String TOCSECTIONDEPTH =  "tocSectionDepth";

        /**
         * Title of a section/appendix
         */public static final String TITLE =  "title";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property approver;
        @CheckForNull
        private Property author;
        @CheckForNull
        private Property collaboratorEmail;
        @CheckForNull
        private Property concurrence;
        @CheckForNull
        private Property documentAcronym;
        @CheckForNull
        private Property footerLegalNotice;
        @CheckForNull
        private Property formalProjectTitle;
        @CheckForNull
        private Property instLogo;
        @CheckForNull
        private Property instLogoSize;
        @CheckForNull
        private Property insttxt1;
        @CheckForNull
        private Property insttxt2;
        @CheckForNull
        private Property logoAlignment;
        @CheckForNull
        private Property logoLocation;
        @CheckForNull
        private Property logoSize;
        @CheckForNull
        private Property projectAcronym;
        @CheckForNull
        private Property removeBlankPages;
        @CheckForNull
        private Property revisionHistory;
        @CheckForNull
        private Property supressMetadata;
        @CheckForNull
        private Property titlePageLegalNotice;
        @CheckForNull
        private Property stakeholder;
        @CheckForNull
        private Property viewPoint;
        @CheckForNull
        private Property isEncapsulated;
        protected  ProductStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getApproverProperty()
        {
            if (approver == null)
            {
                approver = getTagByName(getStereotype(), APPROVER);
            }
            return approver;
        }

        @CheckForNull
        public Property getAuthorProperty()
        {
            if (author == null)
            {
                author = getTagByName(getStereotype(), AUTHOR);
            }
            return author;
        }

        @CheckForNull
        public Property getCollaboratorEmailProperty()
        {
            if (collaboratorEmail == null)
            {
                collaboratorEmail = getTagByName(getStereotype(), COLLABORATOR_EMAIL);
            }
            return collaboratorEmail;
        }

        @CheckForNull
        public Property getConcurrenceProperty()
        {
            if (concurrence == null)
            {
                concurrence = getTagByName(getStereotype(), CONCURRENCE);
            }
            return concurrence;
        }

        @CheckForNull
        public Property getDocumentAcronymProperty()
        {
            if (documentAcronym == null)
            {
                documentAcronym = getTagByName(getStereotype(), DOCUMENT_ACRONYM);
            }
            return documentAcronym;
        }

        @CheckForNull
        public Property getFooterLegalNoticeProperty()
        {
            if (footerLegalNotice == null)
            {
                footerLegalNotice = getTagByName(getStereotype(), FOOTER_LEGAL_NOTICE);
            }
            return footerLegalNotice;
        }

        @CheckForNull
        public Property getFormalProjectTitleProperty()
        {
            if (formalProjectTitle == null)
            {
                formalProjectTitle = getTagByName(getStereotype(), FORMAL_PROJECT_TITLE);
            }
            return formalProjectTitle;
        }

        @CheckForNull
        public Property getInstLogoProperty()
        {
            if (instLogo == null)
            {
                instLogo = getTagByName(getStereotype(), INSTLOGO);
            }
            return instLogo;
        }

        @CheckForNull
        public Property getInstLogoSizeProperty()
        {
            if (instLogoSize == null)
            {
                instLogoSize = getTagByName(getStereotype(), INSTLOGOSIZE);
            }
            return instLogoSize;
        }

        @CheckForNull
        public Property getInsttxt1Property()
        {
            if (insttxt1 == null)
            {
                insttxt1 = getTagByName(getStereotype(), INSTTXT1);
            }
            return insttxt1;
        }

        @CheckForNull
        public Property getInsttxt2Property()
        {
            if (insttxt2 == null)
            {
                insttxt2 = getTagByName(getStereotype(), INSTTXT2);
            }
            return insttxt2;
        }

        @CheckForNull
        public Property getLogoAlignmentProperty()
        {
            if (logoAlignment == null)
            {
                logoAlignment = getTagByName(getStereotype(), LOGO_ALIGNMENT);
            }
            return logoAlignment;
        }

        @CheckForNull
        public Property getLogoLocationProperty()
        {
            if (logoLocation == null)
            {
                logoLocation = getTagByName(getStereotype(), LOGO_LOCATION);
            }
            return logoLocation;
        }

        @CheckForNull
        public Property getLogoSizeProperty()
        {
            if (logoSize == null)
            {
                logoSize = getTagByName(getStereotype(), LOGO_SIZE);
            }
            return logoSize;
        }

        @CheckForNull
        public Property getProjectAcronymProperty()
        {
            if (projectAcronym == null)
            {
                projectAcronym = getTagByName(getStereotype(), PROJECT_ACRONYM);
            }
            return projectAcronym;
        }

        @CheckForNull
        public Property getRemoveBlankPagesProperty()
        {
            if (removeBlankPages == null)
            {
                removeBlankPages = getTagByName(getStereotype(), REMOVE_BLANK_PAGES);
            }
            return removeBlankPages;
        }

        @CheckForNull
        public Property getRevisionHistoryProperty()
        {
            if (revisionHistory == null)
            {
                revisionHistory = getTagByName(getStereotype(), REVISION_HISTORY);
            }
            return revisionHistory;
        }

        @CheckForNull
        public Property getSupressMetadataProperty()
        {
            if (supressMetadata == null)
            {
                supressMetadata = getTagByName(getStereotype(), SUPRESSMETADATA);
            }
            return supressMetadata;
        }

        @CheckForNull
        public Property getTitlePageLegalNoticeProperty()
        {
            if (titlePageLegalNotice == null)
            {
                titlePageLegalNotice = getTagByName(getStereotype(), TITLE_PAGE_LEGAL_NOTICE);
            }
            return titlePageLegalNotice;
        }

        @CheckForNull
        public Property getCaptionProperty()
        {
            return _p.view().getCaptionProperty();
        }

        @CheckForNull
        public Property getCollectViewActionsProperty()
        {
            return _p.view().getCollectViewActionsProperty();
        }

        @CheckForNull
        public Property getElementsProperty()
        {
            return _p.view().getElementsProperty();
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            return _p.view().getStyleProperty();
        }

        @CheckForNull
        public Property getStakeholderProperty()
        {
            if (stakeholder == null)
            {
                stakeholder = getTagByName(getStereotype(), STAKEHOLDER);
            }
            return stakeholder;
        }

        @CheckForNull
        public Property getViewPointProperty()
        {
            if (viewPoint == null)
            {
                viewPoint = getTagByName(getStereotype(), VIEWPOINT);
            }
            return viewPoint;
        }

        @CheckForNull
        public Property getIsEncapsulatedProperty()
        {
            if (isEncapsulated == null)
            {
                isEncapsulated = getTagByName(getStereotype(), ISENCAPSULATED);
            }
            return isEncapsulated;
        }

        @CheckForNull
        public Property getAcknowledgementsProperty()
        {
            return _p.documentMeta().getAcknowledgementsProperty();
        }

        @CheckForNull
        public Property getChunkFirstSectionsProperty()
        {
            return _p.documentMeta().getChunkFirstSectionsProperty();
        }

        @CheckForNull
        public Property getChunkSectionDepthProperty()
        {
            return _p.documentMeta().getChunkSectionDepthProperty();
        }

        @CheckForNull
        public Property getCoverImageProperty()
        {
            return _p.documentMeta().getCoverImageProperty();
        }

        @CheckForNull
        public Property getFigureContextDepthProperty()
        {
            return _p.documentMeta().getFigureContextDepthProperty();
        }

        @CheckForNull
        public Property getFigureSeparatorProperty()
        {
            return _p.documentMeta().getFigureSeparatorProperty();
        }

        @CheckForNull
        public Property getFooterProperty()
        {
            return _p.documentMeta().getFooterProperty();
        }

        @CheckForNull
        public Property getGenNewImagesProperty()
        {
            return _p.documentMeta().getGenNewImagesProperty();
        }

        @CheckForNull
        public Property getHeaderProperty()
        {
            return _p.documentMeta().getHeaderProperty();
        }

        @CheckForNull
        public Property getIndexProperty()
        {
            return _p.documentMeta().getIndexProperty();
        }

        @CheckForNull
        public Property getLegalNoticeProperty()
        {
            return _p.documentMeta().getLegalNoticeProperty();
        }

        @CheckForNull
        public Property getSubtitleProperty()
        {
            return _p.documentMeta().getSubtitleProperty();
        }

        @CheckForNull
        public Property getTocSectionDepthProperty()
        {
            return _p.documentMeta().getTocSectionDepthProperty();
        }

        @CheckForNull
        public Property getTitleProperty()
        {
            return _p.hasTitle().getTitleProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        public void setApprover(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getApproverProperty(), value);
        }
        public void clearApprover(Element element)
        {
            Profiles.clearValue(element, getApproverProperty());
        }
        public void addApprover(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getApproverProperty(), value);
        }
        public void removeApprover(Element element, String value)
        {
            java.util.List<String> values = getApprover(element);
            if (values.remove(value)) {
                setApprover(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getApprover(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getApproverProperty());
        }

        public void setAuthor(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getAuthorProperty(), value);
        }
        public void clearAuthor(Element element)
        {
            Profiles.clearValue(element, getAuthorProperty());
        }
        public void addAuthor(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getAuthorProperty(), value);
        }
        public void removeAuthor(Element element, String value)
        {
            java.util.List<String> values = getAuthor(element);
            if (values.remove(value)) {
                setAuthor(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getAuthor(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getAuthorProperty());
        }

        public void setCollaboratorEmail(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCollaboratorEmailProperty(), value);
        }
        public void clearCollaboratorEmail(Element element)
        {
            Profiles.clearValue(element, getCollaboratorEmailProperty());
        }
        public void addCollaboratorEmail(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCollaboratorEmailProperty(), value);
        }
        public void removeCollaboratorEmail(Element element, String value)
        {
            java.util.List<String> values = getCollaboratorEmail(element);
            if (values.remove(value)) {
                setCollaboratorEmail(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getCollaboratorEmail(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getCollaboratorEmailProperty());
        }

        public void setConcurrence(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getConcurrenceProperty(), value);
        }
        public void clearConcurrence(Element element)
        {
            Profiles.clearValue(element, getConcurrenceProperty());
        }
        public void addConcurrence(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getConcurrenceProperty(), value);
        }
        public void removeConcurrence(Element element, String value)
        {
            java.util.List<String> values = getConcurrence(element);
            if (values.remove(value)) {
                setConcurrence(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getConcurrence(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getConcurrenceProperty());
        }

        public void setDocumentAcronym(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getDocumentAcronymProperty(), value);
        }
        public void clearDocumentAcronym(Element element)
        {
            Profiles.clearValue(element, getDocumentAcronymProperty());
        }

        @CheckForNull
        public String getDocumentAcronym(Element element)
        {
            return toString(Profiles.getFirstValue(element, getDocumentAcronymProperty()));
        }

        public void setFooterLegalNotice(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getFooterLegalNoticeProperty(), value);
        }
        public void clearFooterLegalNotice(Element element)
        {
            Profiles.clearValue(element, getFooterLegalNoticeProperty());
        }

        @CheckForNull
        public String getFooterLegalNotice(Element element)
        {
            return toString(Profiles.getFirstValue(element, getFooterLegalNoticeProperty()));
        }

        public void setFormalProjectTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getFormalProjectTitleProperty(), value);
        }
        public void clearFormalProjectTitle(Element element)
        {
            Profiles.clearValue(element, getFormalProjectTitleProperty());
        }

        @CheckForNull
        public String getFormalProjectTitle(Element element)
        {
            return toString(Profiles.getFirstValue(element, getFormalProjectTitleProperty()));
        }

        public void setInstLogo(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getInstLogoProperty(), value);
        }
        public void clearInstLogo(Element element)
        {
            Profiles.clearValue(element, getInstLogoProperty());
        }

        @CheckForNull
        public String getInstLogo(Element element)
        {
            return toString(Profiles.getFirstValue(element, getInstLogoProperty()));
        }

        public void setInstLogoSize(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getInstLogoSizeProperty(), value);
        }
        public void clearInstLogoSize(Element element)
        {
            Profiles.clearValue(element, getInstLogoSizeProperty());
        }

        @CheckForNull
        public String getInstLogoSize(Element element)
        {
            return toString(Profiles.getFirstValue(element, getInstLogoSizeProperty()));
        }

        public void setInsttxt1(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getInsttxt1Property(), value);
        }
        public void clearInsttxt1(Element element)
        {
            Profiles.clearValue(element, getInsttxt1Property());
        }

        @CheckForNull
        public String getInsttxt1(Element element)
        {
            return toString(Profiles.getFirstValue(element, getInsttxt1Property()));
        }

        public void setInsttxt2(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getInsttxt2Property(), value);
        }
        public void clearInsttxt2(Element element)
        {
            Profiles.clearValue(element, getInsttxt2Property());
        }

        @CheckForNull
        public String getInsttxt2(Element element)
        {
            return toString(Profiles.getFirstValue(element, getInsttxt2Property()));
        }

        public void setLogoAlignment(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLogoAlignmentProperty(), value);
        }
        public void clearLogoAlignment(Element element)
        {
            Profiles.clearValue(element, getLogoAlignmentProperty());
        }

        @CheckForNull
        public String getLogoAlignment(Element element)
        {
            return toString(Profiles.getFirstValue(element, getLogoAlignmentProperty()));
        }

        public void setLogoLocation(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLogoLocationProperty(), value);
        }
        public void clearLogoLocation(Element element)
        {
            Profiles.clearValue(element, getLogoLocationProperty());
        }

        @CheckForNull
        public String getLogoLocation(Element element)
        {
            return toString(Profiles.getFirstValue(element, getLogoLocationProperty()));
        }

        public void setLogoSize(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLogoSizeProperty(), value);
        }
        public void clearLogoSize(Element element)
        {
            Profiles.clearValue(element, getLogoSizeProperty());
        }

        @CheckForNull
        public String getLogoSize(Element element)
        {
            return toString(Profiles.getFirstValue(element, getLogoSizeProperty()));
        }

        public void setProjectAcronym(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getProjectAcronymProperty(), value);
        }
        public void clearProjectAcronym(Element element)
        {
            Profiles.clearValue(element, getProjectAcronymProperty());
        }

        @CheckForNull
        public String getProjectAcronym(Element element)
        {
            return toString(Profiles.getFirstValue(element, getProjectAcronymProperty()));
        }

        public void setRemoveBlankPages(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getRemoveBlankPagesProperty(), value);
        }
        public void clearRemoveBlankPages(Element element)
        {
            Profiles.clearValue(element, getRemoveBlankPagesProperty());
        }

        @CheckForNull
        public Boolean isRemoveBlankPages(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getRemoveBlankPagesProperty()));
        }

        public void setRevisionHistory(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getRevisionHistoryProperty(), value);
        }
        public void clearRevisionHistory(Element element)
        {
            Profiles.clearValue(element, getRevisionHistoryProperty());
        }
        public void addRevisionHistory(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getRevisionHistoryProperty(), value);
        }
        public void removeRevisionHistory(Element element, String value)
        {
            java.util.List<String> values = getRevisionHistory(element);
            if (values.remove(value)) {
                setRevisionHistory(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getRevisionHistory(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getRevisionHistoryProperty());
        }

        public void setSupressMetadata(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getSupressMetadataProperty(), value);
        }
        public void clearSupressMetadata(Element element)
        {
            Profiles.clearValue(element, getSupressMetadataProperty());
        }

        @CheckForNull
        public Boolean isSupressMetadata(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getSupressMetadataProperty()));
        }

        public void setTitlePageLegalNotice(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePageLegalNoticeProperty(), value);
        }
        public void clearTitlePageLegalNotice(Element element)
        {
            Profiles.clearValue(element, getTitlePageLegalNoticeProperty());
        }

        @CheckForNull
        public String getTitlePageLegalNotice(Element element)
        {
            return toString(Profiles.getFirstValue(element, getTitlePageLegalNoticeProperty()));
        }

        public void setCaption(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionProperty(), value);
        }
        public void clearCaption(Element element)
        {
            _p.view().clearCaption(element);
        }
        @CheckForNull
        public String getCaption(Element element)
        {
            return _p.view().getCaption(element);
        }
        public void setCollectViewActions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getCollectViewActionsProperty(), value);
        }
        public void clearCollectViewActions(Element element)
        {
            _p.view().clearCollectViewActions(element);
        }
        @CheckForNull
        public Boolean isCollectViewActions(Element element)
        {
            return _p.view().isCollectViewActions(element);
        }
        public void setElements(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getElementsProperty(), value);
        }
        public void clearElements(Element element)
        {
            _p.view().clearElements(element);
        }
        @CheckForNull
        public String getElements(Element element)
        {
            return _p.view().getElements(element);
        }
        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            _p.view().clearStyle(element);
        }
        @CheckForNull
        public String getStyle(Element element)
        {
            return _p.view().getStyle(element);
        }
        public void setStakeholder(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStakeholderProperty(), value);
        }
        public void clearStakeholder(Element element)
        {
            Profiles.clearValue(element, getStakeholderProperty());
        }
        public void addStakeholder(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStakeholderProperty(), value);
        }
        public void removeStakeholder(Element element, Element value)
        {
            java.util.List<Element> values = getStakeholder(element);
            if (values.remove(value)) {
                setStakeholder(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getStakeholder(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getStakeholderProperty());
        }

        public void setViewPoint(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getViewPointProperty(), value);
        }
        public void clearViewPoint(Element element)
        {
            Profiles.clearValue(element, getViewPointProperty());
        }

        @CheckForNull
        public Element getViewPoint(Element element)
        {
            return (Element)Profiles.getFirstValue(element, getViewPointProperty());
        }

        public void setIsEncapsulated(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIsEncapsulatedProperty(), value);
        }
        public void clearIsEncapsulated(Element element)
        {
            Profiles.clearValue(element, getIsEncapsulatedProperty());
        }

        @CheckForNull
        public Boolean isIsEncapsulated(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIsEncapsulatedProperty()));
        }

        public void setAcknowledgements(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getAcknowledgementsProperty(), value);
        }
        public void clearAcknowledgements(Element element)
        {
            _p.documentMeta().clearAcknowledgements(element);
        }
        @CheckForNull
        public String getAcknowledgements(Element element)
        {
            return _p.documentMeta().getAcknowledgements(element);
        }
        public void setChunkFirstSections(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getChunkFirstSectionsProperty(), value);
        }
        public void clearChunkFirstSections(Element element)
        {
            _p.documentMeta().clearChunkFirstSections(element);
        }
        @CheckForNull
        public Boolean isChunkFirstSections(Element element)
        {
            return _p.documentMeta().isChunkFirstSections(element);
        }
        public void setChunkSectionDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getChunkSectionDepthProperty(), value);
        }
        public void clearChunkSectionDepth(Element element)
        {
            _p.documentMeta().clearChunkSectionDepth(element);
        }
        @CheckForNull
        public Integer getChunkSectionDepth(Element element)
        {
            return _p.documentMeta().getChunkSectionDepth(element);
        }
        public void setCoverImage(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getCoverImageProperty(), value);
        }
        public void clearCoverImage(Element element)
        {
            _p.documentMeta().clearCoverImage(element);
        }
        @CheckForNull
        public Element getCoverImage(Element element)
        {
            return _p.documentMeta().getCoverImage(element);
        }
        public void setFigureContextDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getFigureContextDepthProperty(), value);
        }
        public void clearFigureContextDepth(Element element)
        {
            _p.documentMeta().clearFigureContextDepth(element);
        }
        @CheckForNull
        public Integer getFigureContextDepth(Element element)
        {
            return _p.documentMeta().getFigureContextDepth(element);
        }
        public void setFigureSeparator(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getFigureSeparatorProperty(), value);
        }
        public void clearFigureSeparator(Element element)
        {
            _p.documentMeta().clearFigureSeparator(element);
        }
        @CheckForNull
        public String getFigureSeparator(Element element)
        {
            return _p.documentMeta().getFigureSeparator(element);
        }
        public void setFooter(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getFooterProperty(), value);
        }
        public void clearFooter(Element element)
        {
            _p.documentMeta().clearFooter(element);
        }
        public void addFooter(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getFooterProperty(), value);
        }
        public void removeFooter(Element element, String value)
        {
            java.util.List<String> values = getFooter(element);
            if (values.remove(value)) {
                setFooter(element, values);
            }
        }
        public java.util.List<String> getFooter(Element element)
        {
            return _p.documentMeta().getFooter(element);
        }
        public void setGenNewImages(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getGenNewImagesProperty(), value);
        }
        public void clearGenNewImages(Element element)
        {
            _p.documentMeta().clearGenNewImages(element);
        }
        @CheckForNull
        public Boolean isGenNewImages(Element element)
        {
            return _p.documentMeta().isGenNewImages(element);
        }
        public void setHeader(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getHeaderProperty(), value);
        }
        public void clearHeader(Element element)
        {
            _p.documentMeta().clearHeader(element);
        }
        public void addHeader(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getHeaderProperty(), value);
        }
        public void removeHeader(Element element, String value)
        {
            java.util.List<String> values = getHeader(element);
            if (values.remove(value)) {
                setHeader(element, values);
            }
        }
        public java.util.List<String> getHeader(Element element)
        {
            return _p.documentMeta().getHeader(element);
        }
        public void setIndex(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIndexProperty(), value);
        }
        public void clearIndex(Element element)
        {
            _p.documentMeta().clearIndex(element);
        }
        @CheckForNull
        public Boolean isIndex(Element element)
        {
            return _p.documentMeta().isIndex(element);
        }
        public void setLegalNotice(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getLegalNoticeProperty(), value);
        }
        public void clearLegalNotice(Element element)
        {
            _p.documentMeta().clearLegalNotice(element);
        }
        @CheckForNull
        public String getLegalNotice(Element element)
        {
            return _p.documentMeta().getLegalNotice(element);
        }
        public void setSubtitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getSubtitleProperty(), value);
        }
        public void clearSubtitle(Element element)
        {
            _p.documentMeta().clearSubtitle(element);
        }
        @CheckForNull
        public String getSubtitle(Element element)
        {
            return _p.documentMeta().getSubtitle(element);
        }
        public void setTocSectionDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getTocSectionDepthProperty(), value);
        }
        public void clearTocSectionDepth(Element element)
        {
            _p.documentMeta().clearTocSectionDepth(element);
        }
        @CheckForNull
        public Integer getTocSectionDepth(Element element)
        {
            return _p.documentMeta().getTocSectionDepth(element);
        }
        public void setTitle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleProperty(), value);
        }
        public void clearTitle(Element element)
        {
            _p.hasTitle().clearTitle(element);
        }
        @CheckForNull
        public String getTitle(Element element)
        {
            return _p.hasTitle().getTitle(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            approver = null;
            author = null;
            collaboratorEmail = null;
            concurrence = null;
            documentAcronym = null;
            footerLegalNotice = null;
            formalProjectTitle = null;
            instLogo = null;
            instLogoSize = null;
            insttxt1 = null;
            insttxt2 = null;
            logoAlignment = null;
            logoLocation = null;
            logoSize = null;
            projectAcronym = null;
            removeBlankPages = null;
            revisionHistory = null;
            supressMetadata = null;
            titlePageLegalNotice = null;
            stakeholder = null;
            viewPoint = null;
            isEncapsulated = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.product().getStereotype());
            }
            return false;
        }

    }
    public static class PropertiesTableByAttributesStereotype extends StereotypeWrapper
    {


        //stereotype PropertiesTableByAttributes and its tags
        public static final String STEREOTYPE_NAME =  "PropertiesTableByAttributes";

        /**
         * Instead of showing properties down the left, properties with the same type are consolidated and the type block is shown instead.
         */public static final String CONSOLIDATETYPES =  "consolidateTypes";

        /**
         * Whether to do the rollup before printing the table in docgen. Note the rollup properties needs to be locked, so on docweb this won't do anything.
         */public static final String DOROLLUP =  "doRollup";

        /**
         * The property to roll up (sum). The value should be a list of properties that defines a path from the system block to the property to roll up. The names of the property list will be used to find the roll up property for each block.
         */public static final String ROLLUPPROPERTY =  "rollupProperty";

        /**
         * Shows a column right after documentation that shows the multiplicity of the property, or if consolidateTypes is checked, the overall number of units of that block (under its parent block). Note this number is the count of what would have been shown if it wasn't checked, the count occurs after all the filtering are done.
         */public static final String SHOWMULTIPLICITY =  "showMultiplicity";

        /**
         * Optional. This specifies the stereotypes on blocks that indicates they should be treated as properties in the hierarchy. From the system hierarchy, everything underneath a block with this stereotype will be moved up top (with its own property hierarchy). If empty, this means all properties across the columns will be leaf properties.
         */public static final String SPLITSTEREOTYPE =  "splitStereotype";

        /**
         * Optional. Specifies what kind of association to follow for hierarchical systems. 1 for composite, 2 for shared, 0 for both (default is 0).
         */public static final String SYSTEMASSOCIATIONTYPE =  "systemAssociationType";

        /**
         * Optional. Exclude system whose role has these names
         */public static final String SYSTEMEXCLUDENAME =  "systemExcludeName";

        /**
         * Optional. Exclude system properties with these stereotypes or whose system type block has these stereotypes
         */public static final String SYSTEMEXCLUDESTEREOTYPE =  "systemExcludeStereotype";

        /**
         * Optional. Exclude systems whose type block has these names.
         */public static final String SYSTEMEXCLUDETYPENAME =  "systemExcludeTypeName";

        /**
         * Optional. Include system whose role has these names.
         */public static final String SYSTEMINCLUDENAME =  "systemIncludeName";

        /**
         * Optional. Include system properties with these stereotypes or whose type has these stereotypes.
         */public static final String SYSTEMINCLUDESTEREOTYPE =  "systemIncludeStereotype";

        /**
         * Optional. Include systems whose type block has these names.
         */public static final String SYSTEMINCLUDETYPENAME =  "systemIncludeTypeName";

        /**
         * Optional. Maximum depth of row hierarchy. 0 means infinite and is the default.
         */public static final String MAXDEPTH =  "maxDepth";

        /**
         * Optional. Specifies what kind of association to follow for hierarchical properties. 1 for composite, 2 for shared, 0 for both (default is 0).
         */public static final String TOPASSOCIATIONTYPE =  "topAssociationType";

        /**
         * Optional. Exclude properties with these names.
         */public static final String TOPEXCLUDENAME =  "topExcludeName";

        /**
         * Optional. Exclude properties with these stereotypes or whose type has these stereotypes.
         */public static final String TOPEXCLUDESTEREOTYPE =  "topExcludeStereotype";

        /**
         * Optional. Exclude properties whose type are these type names.
         */public static final String TOPEXCLUDETYPENAME =  "topExcludeTypeName";

        /**
         * Optional. Include properties with these names.
         */public static final String TOPINCLUDENAME =  "topIncludeName";

        /**
         * Optional. Include properties with these stereotypes or whose type has these stereotypes.
         */public static final String TOPINCLUDESTEREOTYPE =  "topIncludeStereotype";

        /**
         * Optional. Include properties whose type are these type names.
         */public static final String TOPINCLUDETYPENAME =  "topIncludeTypeName";

        /**
         * Optional. Give a list of property names your want to appear in order. The following rule would be applied: for each property hierarchy level: leaf properties will always appear first, user order will then be applied, the rest is alphabetical. If this is empty and topIncludeName is not empty, the order from topIncludeName will be used for ordering instead.
         */public static final String TOPORDER =  "topOrder";

        /**
         * Column widths from left to right, create a new value for each column. For View Editor, use % of table or see the 'width' attribute for tag Col https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col. For Docbook, it can be either a fixed measure using one of the CALS units (36pt, 10pc, etc.) or a proportional measure. Proportional measures have the form    number*   , meaning this column should be number times wider than a column with the measure    1*    (or just    *   ). These two forms can be mixed, as in    3*+1pc   . (Description taken from Docbook spec's ColSpec element)
         */public static final String COLWIDTHS =  "colwidths";

        /**
         * Applies to EMS, if true will not show headers on EMS.
         */public static final String HIDEHEADERS =  "hideHeaders";

        /**
         * Applies to how it's rendered on EMS, if table has no rows will not show table by default.
         */public static final String SHOWIFEMPTY =  "showIfEmpty";

        /**
         * This will be set as the class of the resulting html table.
         */public static final String STYLE =  "style";

        /**
         * If true will rotate table 90 degrees anticlockwise (not really transpose).
         */public static final String TRANSPOSE =  "transpose";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * The field takes ordered list of captions. Applicable to images and tables.
         */public static final String CAPTIONS =  "captions";

        /**
         * Exclude from lists like Table of Contents, List of Tables, List of Figures, etc., as applicable.
         */public static final String EXCLUDEFROMLIST =  "excludeFromList";
        public static final String SHOWCAPTIONS =  "showCaptions";

        /**
         * Where applicable, includes the documentation of the element. For tables, this will be shown in the column right after the element. For lists, it'll be shown right below.
         */public static final String INCLUDEDOC =  "includeDoc";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        /**
         * Optional. If a property is a number, this specifies to how many decimal places it will be rendered.
         */public static final String FLOATINGPRECISION =  "floatingPrecision";

        /**
         * Consider inherited properties (except those that are redefined) Default is false.
         */public static final String INCLUDEINHERITED =  "includeInherited";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property consolidateTypes;
        @CheckForNull
        private Property doRollup;
        @CheckForNull
        private Property rollupProperty;
        @CheckForNull
        private Property showMultiplicity;
        @CheckForNull
        private Property splitStereotype;
        @CheckForNull
        private Property systemAssociationType;
        @CheckForNull
        private Property systemExcludeName;
        @CheckForNull
        private Property systemExcludeStereotype;
        @CheckForNull
        private Property systemExcludeTypeName;
        @CheckForNull
        private Property systemIncludeName;
        @CheckForNull
        private Property systemIncludeStereotype;
        @CheckForNull
        private Property systemIncludeTypeName;
        protected  PropertiesTableByAttributesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getConsolidateTypesProperty()
        {
            if (consolidateTypes == null)
            {
                consolidateTypes = getTagByName(getStereotype(), CONSOLIDATETYPES);
            }
            return consolidateTypes;
        }

        @CheckForNull
        public Property getDoRollupProperty()
        {
            if (doRollup == null)
            {
                doRollup = getTagByName(getStereotype(), DOROLLUP);
            }
            return doRollup;
        }

        @CheckForNull
        public Property getRollupPropertyProperty()
        {
            if (rollupProperty == null)
            {
                rollupProperty = getTagByName(getStereotype(), ROLLUPPROPERTY);
            }
            return rollupProperty;
        }

        @CheckForNull
        public Property getShowMultiplicityProperty()
        {
            if (showMultiplicity == null)
            {
                showMultiplicity = getTagByName(getStereotype(), SHOWMULTIPLICITY);
            }
            return showMultiplicity;
        }

        @CheckForNull
        public Property getSplitStereotypeProperty()
        {
            if (splitStereotype == null)
            {
                splitStereotype = getTagByName(getStereotype(), SPLITSTEREOTYPE);
            }
            return splitStereotype;
        }

        @CheckForNull
        public Property getSystemAssociationTypeProperty()
        {
            if (systemAssociationType == null)
            {
                systemAssociationType = getTagByName(getStereotype(), SYSTEMASSOCIATIONTYPE);
            }
            return systemAssociationType;
        }

        @CheckForNull
        public Property getSystemExcludeNameProperty()
        {
            if (systemExcludeName == null)
            {
                systemExcludeName = getTagByName(getStereotype(), SYSTEMEXCLUDENAME);
            }
            return systemExcludeName;
        }

        @CheckForNull
        public Property getSystemExcludeStereotypeProperty()
        {
            if (systemExcludeStereotype == null)
            {
                systemExcludeStereotype = getTagByName(getStereotype(), SYSTEMEXCLUDESTEREOTYPE);
            }
            return systemExcludeStereotype;
        }

        @CheckForNull
        public Property getSystemExcludeTypeNameProperty()
        {
            if (systemExcludeTypeName == null)
            {
                systemExcludeTypeName = getTagByName(getStereotype(), SYSTEMEXCLUDETYPENAME);
            }
            return systemExcludeTypeName;
        }

        @CheckForNull
        public Property getSystemIncludeNameProperty()
        {
            if (systemIncludeName == null)
            {
                systemIncludeName = getTagByName(getStereotype(), SYSTEMINCLUDENAME);
            }
            return systemIncludeName;
        }

        @CheckForNull
        public Property getSystemIncludeStereotypeProperty()
        {
            if (systemIncludeStereotype == null)
            {
                systemIncludeStereotype = getTagByName(getStereotype(), SYSTEMINCLUDESTEREOTYPE);
            }
            return systemIncludeStereotype;
        }

        @CheckForNull
        public Property getSystemIncludeTypeNameProperty()
        {
            if (systemIncludeTypeName == null)
            {
                systemIncludeTypeName = getTagByName(getStereotype(), SYSTEMINCLUDETYPENAME);
            }
            return systemIncludeTypeName;
        }

        @CheckForNull
        public Property getMaxDepthProperty()
        {
            return _p.hierarchicalPropertiesTable().getMaxDepthProperty();
        }

        @CheckForNull
        public Property getTopAssociationTypeProperty()
        {
            return _p.hierarchicalPropertiesTable().getTopAssociationTypeProperty();
        }

        @CheckForNull
        public Property getTopExcludeNameProperty()
        {
            return _p.hierarchicalPropertiesTable().getTopExcludeNameProperty();
        }

        @CheckForNull
        public Property getTopExcludeStereotypeProperty()
        {
            return _p.hierarchicalPropertiesTable().getTopExcludeStereotypeProperty();
        }

        @CheckForNull
        public Property getTopExcludeTypeNameProperty()
        {
            return _p.hierarchicalPropertiesTable().getTopExcludeTypeNameProperty();
        }

        @CheckForNull
        public Property getTopIncludeNameProperty()
        {
            return _p.hierarchicalPropertiesTable().getTopIncludeNameProperty();
        }

        @CheckForNull
        public Property getTopIncludeStereotypeProperty()
        {
            return _p.hierarchicalPropertiesTable().getTopIncludeStereotypeProperty();
        }

        @CheckForNull
        public Property getTopIncludeTypeNameProperty()
        {
            return _p.hierarchicalPropertiesTable().getTopIncludeTypeNameProperty();
        }

        @CheckForNull
        public Property getTopOrderProperty()
        {
            return _p.hierarchicalPropertiesTable().getTopOrderProperty();
        }

        @CheckForNull
        public Property getColwidthsProperty()
        {
            return _p.table().getColwidthsProperty();
        }

        @CheckForNull
        public Property getHideHeadersProperty()
        {
            return _p.table().getHideHeadersProperty();
        }

        @CheckForNull
        public Property getShowIfEmptyProperty()
        {
            return _p.table().getShowIfEmptyProperty();
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            return _p.table().getStyleProperty();
        }

        @CheckForNull
        public Property getTransposeProperty()
        {
            return _p.table().getTransposeProperty();
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getCaptionsProperty()
        {
            return _p.hasCaptions().getCaptionsProperty();
        }

        @CheckForNull
        public Property getExcludeFromListProperty()
        {
            return _p.hasCaptions().getExcludeFromListProperty();
        }

        @CheckForNull
        public Property getShowCaptionsProperty()
        {
            return _p.hasCaptions().getShowCaptionsProperty();
        }

        @CheckForNull
        public Property getIncludeDocProperty()
        {
            return _p.documentationChoosable().getIncludeDocProperty();
        }

        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        @CheckForNull
        public Property getFloatingPrecisionProperty()
        {
            return _p.precisionChoosable().getFloatingPrecisionProperty();
        }

        @CheckForNull
        public Property getIncludeInheritedProperty()
        {
            return _p.includeInheritedChoosable().getIncludeInheritedProperty();
        }

        public void setConsolidateTypes(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getConsolidateTypesProperty(), value);
        }
        public void clearConsolidateTypes(Element element)
        {
            Profiles.clearValue(element, getConsolidateTypesProperty());
        }

        @CheckForNull
        public Boolean isConsolidateTypes(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getConsolidateTypesProperty()));
        }

        public void setDoRollup(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getDoRollupProperty(), value);
        }
        public void clearDoRollup(Element element)
        {
            Profiles.clearValue(element, getDoRollupProperty());
        }

        @CheckForNull
        public Boolean isDoRollup(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getDoRollupProperty()));
        }

        public void setRollupProperty(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getRollupPropertyProperty(), value);
        }
        public void clearRollupProperty(Element element)
        {
            Profiles.clearValue(element, getRollupPropertyProperty());
        }
        public void addRollupProperty(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getRollupPropertyProperty(), value);
        }
        public void removeRollupProperty(Element element, Element value)
        {
            java.util.List<Element> values = getRollupProperty(element);
            if (values.remove(value)) {
                setRollupProperty(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getRollupProperty(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getRollupPropertyProperty());
        }

        public void setShowMultiplicity(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowMultiplicityProperty(), value);
        }
        public void clearShowMultiplicity(Element element)
        {
            Profiles.clearValue(element, getShowMultiplicityProperty());
        }

        @CheckForNull
        public Boolean isShowMultiplicity(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getShowMultiplicityProperty()));
        }

        public void setSplitStereotype(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getSplitStereotypeProperty(), value);
        }
        public void clearSplitStereotype(Element element)
        {
            Profiles.clearValue(element, getSplitStereotypeProperty());
        }
        public void addSplitStereotype(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getSplitStereotypeProperty(), value);
        }
        public void removeSplitStereotype(Element element, Element value)
        {
            java.util.List<Element> values = getSplitStereotype(element);
            if (values.remove(value)) {
                setSplitStereotype(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getSplitStereotype(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getSplitStereotypeProperty());
        }

        public void setSystemAssociationType(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getSystemAssociationTypeProperty(), value);
        }
        public void clearSystemAssociationType(Element element)
        {
            Profiles.clearValue(element, getSystemAssociationTypeProperty());
        }

        @CheckForNull
        public Integer getSystemAssociationType(Element element)
        {
            return toInteger(Profiles.getFirstValue(element, getSystemAssociationTypeProperty()));
        }

        public void setSystemExcludeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getSystemExcludeNameProperty(), value);
        }
        public void clearSystemExcludeName(Element element)
        {
            Profiles.clearValue(element, getSystemExcludeNameProperty());
        }
        public void addSystemExcludeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getSystemExcludeNameProperty(), value);
        }
        public void removeSystemExcludeName(Element element, Element value)
        {
            java.util.List<Element> values = getSystemExcludeName(element);
            if (values.remove(value)) {
                setSystemExcludeName(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getSystemExcludeName(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getSystemExcludeNameProperty());
        }

        public void setSystemExcludeStereotype(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getSystemExcludeStereotypeProperty(), value);
        }
        public void clearSystemExcludeStereotype(Element element)
        {
            Profiles.clearValue(element, getSystemExcludeStereotypeProperty());
        }
        public void addSystemExcludeStereotype(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getSystemExcludeStereotypeProperty(), value);
        }
        public void removeSystemExcludeStereotype(Element element, Element value)
        {
            java.util.List<Element> values = getSystemExcludeStereotype(element);
            if (values.remove(value)) {
                setSystemExcludeStereotype(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getSystemExcludeStereotype(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getSystemExcludeStereotypeProperty());
        }

        public void setSystemExcludeTypeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getSystemExcludeTypeNameProperty(), value);
        }
        public void clearSystemExcludeTypeName(Element element)
        {
            Profiles.clearValue(element, getSystemExcludeTypeNameProperty());
        }
        public void addSystemExcludeTypeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getSystemExcludeTypeNameProperty(), value);
        }
        public void removeSystemExcludeTypeName(Element element, Element value)
        {
            java.util.List<Element> values = getSystemExcludeTypeName(element);
            if (values.remove(value)) {
                setSystemExcludeTypeName(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getSystemExcludeTypeName(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getSystemExcludeTypeNameProperty());
        }

        public void setSystemIncludeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getSystemIncludeNameProperty(), value);
        }
        public void clearSystemIncludeName(Element element)
        {
            Profiles.clearValue(element, getSystemIncludeNameProperty());
        }
        public void addSystemIncludeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getSystemIncludeNameProperty(), value);
        }
        public void removeSystemIncludeName(Element element, Element value)
        {
            java.util.List<Element> values = getSystemIncludeName(element);
            if (values.remove(value)) {
                setSystemIncludeName(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getSystemIncludeName(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getSystemIncludeNameProperty());
        }

        public void setSystemIncludeStereotype(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getSystemIncludeStereotypeProperty(), value);
        }
        public void clearSystemIncludeStereotype(Element element)
        {
            Profiles.clearValue(element, getSystemIncludeStereotypeProperty());
        }
        public void addSystemIncludeStereotype(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getSystemIncludeStereotypeProperty(), value);
        }
        public void removeSystemIncludeStereotype(Element element, Element value)
        {
            java.util.List<Element> values = getSystemIncludeStereotype(element);
            if (values.remove(value)) {
                setSystemIncludeStereotype(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getSystemIncludeStereotype(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getSystemIncludeStereotypeProperty());
        }

        public void setSystemIncludeTypeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getSystemIncludeTypeNameProperty(), value);
        }
        public void clearSystemIncludeTypeName(Element element)
        {
            Profiles.clearValue(element, getSystemIncludeTypeNameProperty());
        }
        public void addSystemIncludeTypeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getSystemIncludeTypeNameProperty(), value);
        }
        public void removeSystemIncludeTypeName(Element element, Element value)
        {
            java.util.List<Element> values = getSystemIncludeTypeName(element);
            if (values.remove(value)) {
                setSystemIncludeTypeName(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getSystemIncludeTypeName(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getSystemIncludeTypeNameProperty());
        }

        public void setMaxDepth(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getMaxDepthProperty(), value);
        }
        public void clearMaxDepth(Element element)
        {
            _p.hierarchicalPropertiesTable().clearMaxDepth(element);
        }
        @CheckForNull
        public Integer getMaxDepth(Element element)
        {
            return _p.hierarchicalPropertiesTable().getMaxDepth(element);
        }
        public void setTopAssociationType(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getTopAssociationTypeProperty(), value);
        }
        public void clearTopAssociationType(Element element)
        {
            _p.hierarchicalPropertiesTable().clearTopAssociationType(element);
        }
        @CheckForNull
        public Integer getTopAssociationType(Element element)
        {
            return _p.hierarchicalPropertiesTable().getTopAssociationType(element);
        }
        public void setTopExcludeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopExcludeNameProperty(), value);
        }
        public void clearTopExcludeName(Element element)
        {
            _p.hierarchicalPropertiesTable().clearTopExcludeName(element);
        }
        public void addTopExcludeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopExcludeNameProperty(), value);
        }
        public void removeTopExcludeName(Element element, Element value)
        {
            java.util.List<Element> values = getTopExcludeName(element);
            if (values.remove(value)) {
                setTopExcludeName(element, values);
            }
        }
        public java.util.List<Element> getTopExcludeName(Element element)
        {
            return _p.hierarchicalPropertiesTable().getTopExcludeName(element);
        }
        public void setTopExcludeStereotype(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopExcludeStereotypeProperty(), value);
        }
        public void clearTopExcludeStereotype(Element element)
        {
            _p.hierarchicalPropertiesTable().clearTopExcludeStereotype(element);
        }
        public void addTopExcludeStereotype(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopExcludeStereotypeProperty(), value);
        }
        public void removeTopExcludeStereotype(Element element, Element value)
        {
            java.util.List<Element> values = getTopExcludeStereotype(element);
            if (values.remove(value)) {
                setTopExcludeStereotype(element, values);
            }
        }
        public java.util.List<Element> getTopExcludeStereotype(Element element)
        {
            return _p.hierarchicalPropertiesTable().getTopExcludeStereotype(element);
        }
        public void setTopExcludeTypeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopExcludeTypeNameProperty(), value);
        }
        public void clearTopExcludeTypeName(Element element)
        {
            _p.hierarchicalPropertiesTable().clearTopExcludeTypeName(element);
        }
        public void addTopExcludeTypeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopExcludeTypeNameProperty(), value);
        }
        public void removeTopExcludeTypeName(Element element, Element value)
        {
            java.util.List<Element> values = getTopExcludeTypeName(element);
            if (values.remove(value)) {
                setTopExcludeTypeName(element, values);
            }
        }
        public java.util.List<Element> getTopExcludeTypeName(Element element)
        {
            return _p.hierarchicalPropertiesTable().getTopExcludeTypeName(element);
        }
        public void setTopIncludeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopIncludeNameProperty(), value);
        }
        public void clearTopIncludeName(Element element)
        {
            _p.hierarchicalPropertiesTable().clearTopIncludeName(element);
        }
        public void addTopIncludeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopIncludeNameProperty(), value);
        }
        public void removeTopIncludeName(Element element, Element value)
        {
            java.util.List<Element> values = getTopIncludeName(element);
            if (values.remove(value)) {
                setTopIncludeName(element, values);
            }
        }
        public java.util.List<Element> getTopIncludeName(Element element)
        {
            return _p.hierarchicalPropertiesTable().getTopIncludeName(element);
        }
        public void setTopIncludeStereotype(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopIncludeStereotypeProperty(), value);
        }
        public void clearTopIncludeStereotype(Element element)
        {
            _p.hierarchicalPropertiesTable().clearTopIncludeStereotype(element);
        }
        public void addTopIncludeStereotype(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopIncludeStereotypeProperty(), value);
        }
        public void removeTopIncludeStereotype(Element element, Element value)
        {
            java.util.List<Element> values = getTopIncludeStereotype(element);
            if (values.remove(value)) {
                setTopIncludeStereotype(element, values);
            }
        }
        public java.util.List<Element> getTopIncludeStereotype(Element element)
        {
            return _p.hierarchicalPropertiesTable().getTopIncludeStereotype(element);
        }
        public void setTopIncludeTypeName(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopIncludeTypeNameProperty(), value);
        }
        public void clearTopIncludeTypeName(Element element)
        {
            _p.hierarchicalPropertiesTable().clearTopIncludeTypeName(element);
        }
        public void addTopIncludeTypeName(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopIncludeTypeNameProperty(), value);
        }
        public void removeTopIncludeTypeName(Element element, Element value)
        {
            java.util.List<Element> values = getTopIncludeTypeName(element);
            if (values.remove(value)) {
                setTopIncludeTypeName(element, values);
            }
        }
        public java.util.List<Element> getTopIncludeTypeName(Element element)
        {
            return _p.hierarchicalPropertiesTable().getTopIncludeTypeName(element);
        }
        public void setTopOrder(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTopOrderProperty(), value);
        }
        public void clearTopOrder(Element element)
        {
            _p.hierarchicalPropertiesTable().clearTopOrder(element);
        }
        public void addTopOrder(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTopOrderProperty(), value);
        }
        public void removeTopOrder(Element element, Element value)
        {
            java.util.List<Element> values = getTopOrder(element);
            if (values.remove(value)) {
                setTopOrder(element, values);
            }
        }
        public java.util.List<Element> getTopOrder(Element element)
        {
            return _p.hierarchicalPropertiesTable().getTopOrder(element);
        }
        public void setColwidths(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void clearColwidths(Element element)
        {
            _p.table().clearColwidths(element);
        }
        public void addColwidths(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void removeColwidths(Element element, String value)
        {
            java.util.List<String> values = getColwidths(element);
            if (values.remove(value)) {
                setColwidths(element, values);
            }
        }
        public java.util.List<String> getColwidths(Element element)
        {
            return _p.table().getColwidths(element);
        }
        public void setHideHeaders(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getHideHeadersProperty(), value);
        }
        public void clearHideHeaders(Element element)
        {
            _p.table().clearHideHeaders(element);
        }
        @CheckForNull
        public Boolean isHideHeaders(Element element)
        {
            return _p.table().isHideHeaders(element);
        }
        public void setShowIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowIfEmptyProperty(), value);
        }
        public void clearShowIfEmpty(Element element)
        {
            _p.table().clearShowIfEmpty(element);
        }
        @CheckForNull
        public Boolean isShowIfEmpty(Element element)
        {
            return _p.table().isShowIfEmpty(element);
        }
        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            _p.table().clearStyle(element);
        }
        @CheckForNull
        public String getStyle(Element element)
        {
            return _p.table().getStyle(element);
        }
        public void setTranspose(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getTransposeProperty(), value);
        }
        public void clearTranspose(Element element)
        {
            _p.table().clearTranspose(element);
        }
        @CheckForNull
        public Boolean isTranspose(Element element)
        {
            return _p.table().isTranspose(element);
        }
        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setCaptions(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void clearCaptions(Element element)
        {
            _p.hasCaptions().clearCaptions(element);
        }
        public void addCaptions(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void removeCaptions(Element element, String value)
        {
            java.util.List<String> values = getCaptions(element);
            if (values.remove(value)) {
                setCaptions(element, values);
            }
        }
        public java.util.List<String> getCaptions(Element element)
        {
            return _p.hasCaptions().getCaptions(element);
        }
        public void setExcludeFromList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getExcludeFromListProperty(), value);
        }
        public void clearExcludeFromList(Element element)
        {
            _p.hasCaptions().clearExcludeFromList(element);
        }
        @CheckForNull
        public Boolean isExcludeFromList(Element element)
        {
            return _p.hasCaptions().isExcludeFromList(element);
        }
        public void setShowCaptions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowCaptionsProperty(), value);
        }
        public void clearShowCaptions(Element element)
        {
            _p.hasCaptions().clearShowCaptions(element);
        }
        @CheckForNull
        public Boolean isShowCaptions(Element element)
        {
            return _p.hasCaptions().isShowCaptions(element);
        }
        public void setIncludeDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeDocProperty(), value);
        }
        public void clearIncludeDoc(Element element)
        {
            _p.documentationChoosable().clearIncludeDoc(element);
        }
        @CheckForNull
        public Boolean isIncludeDoc(Element element)
        {
            return _p.documentationChoosable().isIncludeDoc(element);
        }
        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        public void setFloatingPrecision(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getFloatingPrecisionProperty(), value);
        }
        public void clearFloatingPrecision(Element element)
        {
            _p.precisionChoosable().clearFloatingPrecision(element);
        }
        @CheckForNull
        public Integer getFloatingPrecision(Element element)
        {
            return _p.precisionChoosable().getFloatingPrecision(element);
        }
        public void setIncludeInherited(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeInheritedProperty(), value);
        }
        public void clearIncludeInherited(Element element)
        {
            _p.includeInheritedChoosable().clearIncludeInherited(element);
        }
        @CheckForNull
        public Boolean isIncludeInherited(Element element)
        {
            return _p.includeInheritedChoosable().isIncludeInherited(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            consolidateTypes = null;
            doRollup = null;
            rollupProperty = null;
            showMultiplicity = null;
            splitStereotype = null;
            systemAssociationType = null;
            systemExcludeName = null;
            systemExcludeStereotype = null;
            systemExcludeTypeName = null;
            systemIncludeName = null;
            systemIncludeStereotype = null;
            systemIncludeTypeName = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.propertiesTableByAttributes().getStereotype());
            }
            return false;
        }

    }
    public static class PropertyChoosableStereotype extends StereotypeWrapper
    {


        //stereotype PropertyChoosable and its tags
        public static final String STEREOTYPE_NAME =  "PropertyChoosable";

        /**
         * Property can be a stereotype property or value property of a class.
         */public static final String DESIREDPROPERTY =  "desiredProperty";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property desiredProperty;
        protected  PropertyChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getDesiredPropertyProperty()
        {
            if (desiredProperty == null)
            {
                desiredProperty = getTagByName(getStereotype(), DESIREDPROPERTY);
            }
            return desiredProperty;
        }

        public void setDesiredProperty(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getDesiredPropertyProperty(), value);
        }
        public void clearDesiredProperty(Element element)
        {
            Profiles.clearValue(element, getDesiredPropertyProperty());
        }

        @CheckForNull
        public Element getDesiredProperty(Element element)
        {
            return (Element)Profiles.getFirstValue(element, getDesiredPropertyProperty());
        }

        @Override
        protected void clear()
        {
            super.clear();
            desiredProperty = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.propertyChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class RemoveDuplicatesStereotype extends StereotypeWrapper
    {


        //stereotype RemoveDuplicates and its tags
        public static final String STEREOTYPE_NAME =  "RemoveDuplicates";

        private final SysMLExtensions _p;
        protected  RemoveDuplicatesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.removeDuplicates().getStereotype());
            }
            return false;
        }

    }
    public static class SimulateStereotype extends StereotypeWrapper
    {


        //stereotype Simulate and its tags
        public static final String STEREOTYPE_NAME =  "Simulate";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";
        public static final String TIMEOUT =  "timeout";

        private final SysMLExtensions _p;
        protected  SimulateStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getTimeoutProperty()
        {
            return _p.hasTimeout().getTimeoutProperty();
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setTimeout(Element element, @CheckForNull Integer value)
        {
            Profiles.setValue(element, getStereotype(), getTimeoutProperty(), value);
        }
        public void clearTimeout(Element element)
        {
            _p.hasTimeout().clearTimeout(element);
        }
        @CheckForNull
        public Integer getTimeout(Element element)
        {
            return _p.hasTimeout().getTimeout(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.simulate().getStereotype());
            }
            return false;
        }

    }
    public static class SkippableStereotype extends StereotypeWrapper
    {


        //stereotype Skippable and its tags
        public static final String STEREOTYPE_NAME =  "Skippable";

        /**
         * Applies to sections. If the resulting section is empty, skip the section altogether.
         */public static final String SKIPIFEMPTY =  "skipIfEmpty";

        /**
         * Applies to sections, if the resulting section is empty, use the indicated string.
         */public static final String STRINGIFEMPTY =  "stringIfEmpty";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property skipIfEmpty;
        @CheckForNull
        private Property stringIfEmpty;
        protected  SkippableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getSkipIfEmptyProperty()
        {
            if (skipIfEmpty == null)
            {
                skipIfEmpty = getTagByName(getStereotype(), SKIPIFEMPTY);
            }
            return skipIfEmpty;
        }

        @CheckForNull
        public Property getStringIfEmptyProperty()
        {
            if (stringIfEmpty == null)
            {
                stringIfEmpty = getTagByName(getStereotype(), STRINGIFEMPTY);
            }
            return stringIfEmpty;
        }

        public void setSkipIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getSkipIfEmptyProperty(), value);
        }
        public void clearSkipIfEmpty(Element element)
        {
            Profiles.clearValue(element, getSkipIfEmptyProperty());
        }

        @CheckForNull
        public Boolean isSkipIfEmpty(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getSkipIfEmptyProperty()));
        }

        public void setStringIfEmpty(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStringIfEmptyProperty(), value);
        }
        public void clearStringIfEmpty(Element element)
        {
            Profiles.clearValue(element, getStringIfEmptyProperty());
        }

        @CheckForNull
        public String getStringIfEmpty(Element element)
        {
            return toString(Profiles.getFirstValue(element, getStringIfEmptyProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            skipIfEmpty = null;
            stringIfEmpty = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.skippable().getStereotype());
            }
            return false;
        }

    }
    public static class SortByAttributeStereotype extends StereotypeWrapper
    {


        //stereotype SortByAttribute and its tags
        public static final String STEREOTYPE_NAME =  "SortByAttribute";

        /**
         * Reverse the sort.
         */public static final String REVERSE =  "reverse";

        /**
         * The attribute can be name, documentation, or value (in the case of property or slots)
         */public static final String DESIREDATTRIBUTE =  "desiredAttribute";

        private final SysMLExtensions _p;
        protected  SortByAttributeStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getReverseProperty()
        {
            return _p.sortable().getReverseProperty();
        }

        @CheckForNull
        public Property getDesiredAttributeProperty()
        {
            return _p.attributeChoosable().getDesiredAttributeProperty();
        }

        public void setReverse(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getReverseProperty(), value);
        }
        public void clearReverse(Element element)
        {
            _p.sortable().clearReverse(element);
        }
        @CheckForNull
        public Boolean isReverse(Element element)
        {
            return _p.sortable().isReverse(element);
        }
        public void setDesiredAttribute(Element element, @CheckForNull AttributeEnum value)
        {
            Profiles.setValue(element, getStereotype(), getDesiredAttributeProperty(), value != null ? value.getText() : null);
        }
        public void clearDesiredAttribute(Element element)
        {
            _p.attributeChoosable().clearDesiredAttribute(element);
        }
        @CheckForNull
        public AttributeEnum getDesiredAttribute(Element element)
        {
            return _p.attributeChoosable().getDesiredAttribute(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.sortByAttribute().getStereotype());
            }
            return false;
        }

    }
    public static class SortByExpressionStereotype extends StereotypeWrapper
    {


        //stereotype SortByExpression and its tags
        public static final String STEREOTYPE_NAME =  "SortByExpression";

        /**
         * An ocl expression.
         */public static final String EXPRESSION =  "expression";

        /**
         * Whether ocl expression should be evaluated per element or on collection of elements
         */public static final String ITERATE =  "iterate";

        /**
         * Reverse the sort.
         */public static final String REVERSE =  "reverse";

        private final SysMLExtensions _p;
        protected  SortByExpressionStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getExpressionProperty()
        {
            return _p.expressionChoosable().getExpressionProperty();
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            return _p.expressionChoosable().getIterateProperty();
        }

        @CheckForNull
        public Property getReverseProperty()
        {
            return _p.sortable().getReverseProperty();
        }

        public void setExpression(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getExpressionProperty(), value);
        }
        public void clearExpression(Element element)
        {
            _p.expressionChoosable().clearExpression(element);
        }
        @CheckForNull
        public String getExpression(Element element)
        {
            return _p.expressionChoosable().getExpression(element);
        }
        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            _p.expressionChoosable().clearIterate(element);
        }
        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return _p.expressionChoosable().isIterate(element);
        }
        public void setReverse(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getReverseProperty(), value);
        }
        public void clearReverse(Element element)
        {
            _p.sortable().clearReverse(element);
        }
        @CheckForNull
        public Boolean isReverse(Element element)
        {
            return _p.sortable().isReverse(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.sortByExpression().getStereotype());
            }
            return false;
        }

    }
    public static class SortByNameStereotype extends StereotypeWrapper
    {


        //stereotype SortByName and its tags
        public static final String STEREOTYPE_NAME =  "SortByName";

        /**
         * Reverse the sort.
         */public static final String REVERSE =  "reverse";

        private final SysMLExtensions _p;
        protected  SortByNameStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getReverseProperty()
        {
            return _p.sortable().getReverseProperty();
        }

        public void setReverse(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getReverseProperty(), value);
        }
        public void clearReverse(Element element)
        {
            _p.sortable().clearReverse(element);
        }
        @CheckForNull
        public Boolean isReverse(Element element)
        {
            return _p.sortable().isReverse(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.sortByName().getStereotype());
            }
            return false;
        }

    }
    public static class SortByPropertyStereotype extends StereotypeWrapper
    {


        //stereotype SortByProperty and its tags
        public static final String STEREOTYPE_NAME =  "SortByProperty";

        /**
         * Reverse the sort.
         */public static final String REVERSE =  "reverse";

        /**
         * Property can be a stereotype property or value property of a class.
         */public static final String DESIREDPROPERTY =  "desiredProperty";

        private final SysMLExtensions _p;
        protected  SortByPropertyStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getReverseProperty()
        {
            return _p.sortable().getReverseProperty();
        }

        @CheckForNull
        public Property getDesiredPropertyProperty()
        {
            return _p.propertyChoosable().getDesiredPropertyProperty();
        }

        public void setReverse(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getReverseProperty(), value);
        }
        public void clearReverse(Element element)
        {
            _p.sortable().clearReverse(element);
        }
        @CheckForNull
        public Boolean isReverse(Element element)
        {
            return _p.sortable().isReverse(element);
        }
        public void setDesiredProperty(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getDesiredPropertyProperty(), value);
        }
        public void clearDesiredProperty(Element element)
        {
            _p.propertyChoosable().clearDesiredProperty(element);
        }
        @CheckForNull
        public Element getDesiredProperty(Element element)
        {
            return _p.propertyChoosable().getDesiredProperty(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.sortByProperty().getStereotype());
            }
            return false;
        }

    }
    public static class SortableStereotype extends StereotypeWrapper
    {


        //stereotype Sortable and its tags
        public static final String STEREOTYPE_NAME =  "Sortable";

        /**
         * Reverse the sort.
         */public static final String REVERSE =  "reverse";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property reverse;
        protected  SortableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getReverseProperty()
        {
            if (reverse == null)
            {
                reverse = getTagByName(getStereotype(), REVERSE);
            }
            return reverse;
        }

        public void setReverse(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getReverseProperty(), value);
        }
        public void clearReverse(Element element)
        {
            Profiles.clearValue(element, getReverseProperty());
        }

        @CheckForNull
        public Boolean isReverse(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getReverseProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            reverse = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.sortable().getStereotype());
            }
            return false;
        }

    }
    public static class StereotypeChoosableStereotype extends StereotypeWrapper
    {


        //stereotype StereotypeChoosable and its tags
        public static final String STEREOTYPE_NAME =  "StereotypeChoosable";

        /**
         * List of stereotype for filtering.
         */public static final String STEREOTYPES =  "stereotypes";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property stereotypes;
        protected  StereotypeChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getStereotypesProperty()
        {
            if (stereotypes == null)
            {
                stereotypes = getTagByName(getStereotype(), STEREOTYPES);
            }
            return stereotypes;
        }

        public void setStereotypes(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypesProperty(), value);
        }
        public void clearStereotypes(Element element)
        {
            Profiles.clearValue(element, getStereotypesProperty());
        }
        public void addStereotypes(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypesProperty(), value);
        }
        public void removeStereotypes(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypes(element);
            if (values.remove(value)) {
                setStereotypes(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getStereotypes(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getStereotypesProperty());
        }

        @Override
        protected void clear()
        {
            super.clear();
            stereotypes = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.stereotypeChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class StereotypePropertiesChoosableStereotype extends StereotypeWrapper
    {


        //stereotype StereotypePropertiesChoosable and its tags
        public static final String STEREOTYPE_NAME =  "StereotypePropertiesChoosable";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property stereotypeProperties;
        protected  StereotypePropertiesChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            if (stereotypeProperties == null)
            {
                stereotypeProperties = getTagByName(getStereotype(), STEREOTYPEPROPERTIES);
            }
            return stereotypeProperties;
        }

        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            Profiles.clearValue(element, getStereotypePropertiesProperty());
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getStereotypePropertiesProperty());
        }

        @Override
        protected void clear()
        {
            super.clear();
            stereotypeProperties = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.stereotypePropertiesChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class StereotypedRelationshipsChoosableStereotype extends StereotypeWrapper
    {


        //stereotype StereotypedRelationshipsChoosable and its tags
        public static final String STEREOTYPE_NAME =  "StereotypedRelationshipsChoosable";

        /**
         * Choose stereotyped relationships coming in to the target(s). The output would be the opposite end of the relationship.
         */public static final String INCOMINGSTEREOTYPEDRELATIONSHIPS =  "incomingStereotypedRelationships";

        /**
         * Choose stereotyped relationships going out from the target(s). The output would be the opposite end of the relationship.
         */public static final String OUTGOINGSTEREOTYPEDRELATIONSHIPS =  "outgoingStereotypedRelationships";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property incomingStereotypedRelationships;
        @CheckForNull
        private Property outgoingStereotypedRelationships;
        protected  StereotypedRelationshipsChoosableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getIncomingStereotypedRelationshipsProperty()
        {
            if (incomingStereotypedRelationships == null)
            {
                incomingStereotypedRelationships = getTagByName(getStereotype(), INCOMINGSTEREOTYPEDRELATIONSHIPS);
            }
            return incomingStereotypedRelationships;
        }

        @CheckForNull
        public Property getOutgoingStereotypedRelationshipsProperty()
        {
            if (outgoingStereotypedRelationships == null)
            {
                outgoingStereotypedRelationships = getTagByName(getStereotype(), OUTGOINGSTEREOTYPEDRELATIONSHIPS);
            }
            return outgoingStereotypedRelationships;
        }

        public void setIncomingStereotypedRelationships(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getIncomingStereotypedRelationshipsProperty(), value);
        }
        public void clearIncomingStereotypedRelationships(Element element)
        {
            Profiles.clearValue(element, getIncomingStereotypedRelationshipsProperty());
        }
        public void addIncomingStereotypedRelationships(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getIncomingStereotypedRelationshipsProperty(), value);
        }
        public void removeIncomingStereotypedRelationships(Element element, Element value)
        {
            java.util.List<Element> values = getIncomingStereotypedRelationships(element);
            if (values.remove(value)) {
                setIncomingStereotypedRelationships(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getIncomingStereotypedRelationships(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getIncomingStereotypedRelationshipsProperty());
        }

        public void setOutgoingStereotypedRelationships(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getOutgoingStereotypedRelationshipsProperty(), value);
        }
        public void clearOutgoingStereotypedRelationships(Element element)
        {
            Profiles.clearValue(element, getOutgoingStereotypedRelationshipsProperty());
        }
        public void addOutgoingStereotypedRelationships(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getOutgoingStereotypedRelationshipsProperty(), value);
        }
        public void removeOutgoingStereotypedRelationships(Element element, Element value)
        {
            java.util.List<Element> values = getOutgoingStereotypedRelationships(element);
            if (values.remove(value)) {
                setOutgoingStereotypedRelationships(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getOutgoingStereotypedRelationships(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getOutgoingStereotypedRelationshipsProperty());
        }

        @Override
        protected void clear()
        {
            super.clear();
            incomingStereotypedRelationships = null;
            outgoingStereotypedRelationships = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element != null &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element != null)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.stereotypedRelationshipsChoosable().getStereotype());
            }
            return false;
        }

    }
    public static class StructuredQueryStereotype extends StereotypeWrapper
    {


        //stereotype StructuredQuery and its tags
        public static final String STEREOTYPE_NAME =  "StructuredQuery";

        /**
         * Whether to create a section. If loop is true, will create a section for each incoming target element, with element name as the title. If loop is false, will use the first string in 'titles' tag, or the name of the structured query element.
         */public static final String CREATESECTIONS =  "createSections";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property createSections;
        protected  StructuredQueryStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getCreateSectionsProperty()
        {
            if (createSections == null)
            {
                createSections = getTagByName(getStereotype(), CREATESECTIONS);
            }
            return createSections;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        public void setCreateSections(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getCreateSectionsProperty(), value);
        }
        public void clearCreateSections(Element element)
        {
            Profiles.clearValue(element, getCreateSectionsProperty());
        }

        @CheckForNull
        public Boolean isCreateSections(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getCreateSectionsProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            createSections = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.structuredQuery().getStereotype());
            }
            return false;
        }

    }
    public static class TableStereotype extends StereotypeWrapper
    {


        //stereotype Table and its tags
        public static final String STEREOTYPE_NAME =  "Table";

        /**
         * Column widths from left to right, create a new value for each column. For View Editor, use % of table or see the 'width' attribute for tag Col https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col. For Docbook, it can be either a fixed measure using one of the CALS units (36pt, 10pc, etc.) or a proportional measure. Proportional measures have the form    number*   , meaning this column should be number times wider than a column with the measure    1*    (or just    *   ). These two forms can be mixed, as in    3*+1pc   . (Description taken from Docbook spec's ColSpec element)
         */public static final String COLWIDTHS =  "colwidths";

        /**
         * Applies to EMS, if true will not show headers on EMS.
         */public static final String HIDEHEADERS =  "hideHeaders";

        /**
         * Applies to how it's rendered on EMS, if table has no rows will not show table by default.
         */public static final String SHOWIFEMPTY =  "showIfEmpty";

        /**
         * This will be set as the class of the resulting html table.
         */public static final String STYLE =  "style";

        /**
         * If true will rotate table 90 degrees anticlockwise (not really transpose).
         */public static final String TRANSPOSE =  "transpose";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * The field takes ordered list of captions. Applicable to images and tables.
         */public static final String CAPTIONS =  "captions";

        /**
         * Exclude from lists like Table of Contents, List of Tables, List of Figures, etc., as applicable.
         */public static final String EXCLUDEFROMLIST =  "excludeFromList";
        public static final String SHOWCAPTIONS =  "showCaptions";

        /**
         * Where applicable, includes the documentation of the element. For tables, this will be shown in the column right after the element. For lists, it'll be shown right below.
         */public static final String INCLUDEDOC =  "includeDoc";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property colwidths;
        @CheckForNull
        private Property hideHeaders;
        @CheckForNull
        private Property showIfEmpty;
        @CheckForNull
        private Property style;
        @CheckForNull
        private Property transpose;
        protected  TableStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getColwidthsProperty()
        {
            if (colwidths == null)
            {
                colwidths = getTagByName(getStereotype(), COLWIDTHS);
            }
            return colwidths;
        }

        @CheckForNull
        public Property getHideHeadersProperty()
        {
            if (hideHeaders == null)
            {
                hideHeaders = getTagByName(getStereotype(), HIDEHEADERS);
            }
            return hideHeaders;
        }

        @CheckForNull
        public Property getShowIfEmptyProperty()
        {
            if (showIfEmpty == null)
            {
                showIfEmpty = getTagByName(getStereotype(), SHOWIFEMPTY);
            }
            return showIfEmpty;
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            if (style == null)
            {
                style = getTagByName(getStereotype(), STYLE);
            }
            return style;
        }

        @CheckForNull
        public Property getTransposeProperty()
        {
            if (transpose == null)
            {
                transpose = getTagByName(getStereotype(), TRANSPOSE);
            }
            return transpose;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getCaptionsProperty()
        {
            return _p.hasCaptions().getCaptionsProperty();
        }

        @CheckForNull
        public Property getExcludeFromListProperty()
        {
            return _p.hasCaptions().getExcludeFromListProperty();
        }

        @CheckForNull
        public Property getShowCaptionsProperty()
        {
            return _p.hasCaptions().getShowCaptionsProperty();
        }

        @CheckForNull
        public Property getIncludeDocProperty()
        {
            return _p.documentationChoosable().getIncludeDocProperty();
        }

        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        public void setColwidths(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void clearColwidths(Element element)
        {
            Profiles.clearValue(element, getColwidthsProperty());
        }
        public void addColwidths(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void removeColwidths(Element element, String value)
        {
            java.util.List<String> values = getColwidths(element);
            if (values.remove(value)) {
                setColwidths(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<String> getColwidths(Element element)
        {
            return (java.util.List<String>)Profiles.getValue(element, getColwidthsProperty());
        }

        public void setHideHeaders(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getHideHeadersProperty(), value);
        }
        public void clearHideHeaders(Element element)
        {
            Profiles.clearValue(element, getHideHeadersProperty());
        }

        @CheckForNull
        public Boolean isHideHeaders(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getHideHeadersProperty()));
        }

        public void setShowIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowIfEmptyProperty(), value);
        }
        public void clearShowIfEmpty(Element element)
        {
            Profiles.clearValue(element, getShowIfEmptyProperty());
        }

        @CheckForNull
        public Boolean isShowIfEmpty(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getShowIfEmptyProperty()));
        }

        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            Profiles.clearValue(element, getStyleProperty());
        }

        @CheckForNull
        public String getStyle(Element element)
        {
            return toString(Profiles.getFirstValue(element, getStyleProperty()));
        }

        public void setTranspose(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getTransposeProperty(), value);
        }
        public void clearTranspose(Element element)
        {
            Profiles.clearValue(element, getTransposeProperty());
        }

        @CheckForNull
        public Boolean isTranspose(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getTransposeProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setCaptions(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void clearCaptions(Element element)
        {
            _p.hasCaptions().clearCaptions(element);
        }
        public void addCaptions(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void removeCaptions(Element element, String value)
        {
            java.util.List<String> values = getCaptions(element);
            if (values.remove(value)) {
                setCaptions(element, values);
            }
        }
        public java.util.List<String> getCaptions(Element element)
        {
            return _p.hasCaptions().getCaptions(element);
        }
        public void setExcludeFromList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getExcludeFromListProperty(), value);
        }
        public void clearExcludeFromList(Element element)
        {
            _p.hasCaptions().clearExcludeFromList(element);
        }
        @CheckForNull
        public Boolean isExcludeFromList(Element element)
        {
            return _p.hasCaptions().isExcludeFromList(element);
        }
        public void setShowCaptions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowCaptionsProperty(), value);
        }
        public void clearShowCaptions(Element element)
        {
            _p.hasCaptions().clearShowCaptions(element);
        }
        @CheckForNull
        public Boolean isShowCaptions(Element element)
        {
            return _p.hasCaptions().isShowCaptions(element);
        }
        public void setIncludeDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeDocProperty(), value);
        }
        public void clearIncludeDoc(Element element)
        {
            _p.documentationChoosable().clearIncludeDoc(element);
        }
        @CheckForNull
        public Boolean isIncludeDoc(Element element)
        {
            return _p.documentationChoosable().isIncludeDoc(element);
        }
        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            colwidths = null;
            hideHeaders = null;
            showIfEmpty = null;
            style = null;
            transpose = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.table().getStereotype());
            }
            return false;
        }

    }
    public static class TableAttributeColumnStereotype extends StereotypeWrapper
    {


        //stereotype TableAttributeColumn and its tags
        public static final String STEREOTYPE_NAME =  "TableAttributeColumn";
        public static final String EDITABLE =  "editable";

        /**
         * The attribute can be name, documentation, or value (in the case of property or slots)
         */public static final String DESIREDATTRIBUTE =  "desiredAttribute";

        private final SysMLExtensions _p;
        protected  TableAttributeColumnStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getEditableProperty()
        {
            return _p.editableChoosable().getEditableProperty();
        }

        @CheckForNull
        public Property getDesiredAttributeProperty()
        {
            return _p.attributeChoosable().getDesiredAttributeProperty();
        }

        public void setEditable(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getEditableProperty(), value);
        }
        public void clearEditable(Element element)
        {
            _p.editableChoosable().clearEditable(element);
        }
        @CheckForNull
        public Boolean isEditable(Element element)
        {
            return _p.editableChoosable().isEditable(element);
        }
        public void setDesiredAttribute(Element element, @CheckForNull AttributeEnum value)
        {
            Profiles.setValue(element, getStereotype(), getDesiredAttributeProperty(), value != null ? value.getText() : null);
        }
        public void clearDesiredAttribute(Element element)
        {
            _p.attributeChoosable().clearDesiredAttribute(element);
        }
        @CheckForNull
        public AttributeEnum getDesiredAttribute(Element element)
        {
            return _p.attributeChoosable().getDesiredAttribute(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.tableAttributeColumn().getStereotype());
            }
            return false;
        }

    }
    public static class TableColumnStereotype extends StereotypeWrapper
    {


        //stereotype TableColumn and its tags
        public static final String STEREOTYPE_NAME =  "TableColumn";
        public static final String EDITABLE =  "editable";

        private final SysMLExtensions _p;
        protected  TableColumnStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getEditableProperty()
        {
            return _p.editableChoosable().getEditableProperty();
        }

        public void setEditable(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getEditableProperty(), value);
        }
        public void clearEditable(Element element)
        {
            _p.editableChoosable().clearEditable(element);
        }
        @CheckForNull
        public Boolean isEditable(Element element)
        {
            return _p.editableChoosable().isEditable(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.tableColumn().getStereotype());
            }
            return false;
        }

    }
    public static class TableColumnGroupStereotype extends StereotypeWrapper
    {


        //stereotype TableColumnGroup and its tags
        public static final String STEREOTYPE_NAME =  "TableColumnGroup";
        public static final String EDITABLE =  "editable";

        private final SysMLExtensions _p;
        protected  TableColumnGroupStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getEditableProperty()
        {
            return _p.editableChoosable().getEditableProperty();
        }

        public void setEditable(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getEditableProperty(), value);
        }
        public void clearEditable(Element element)
        {
            _p.editableChoosable().clearEditable(element);
        }
        @CheckForNull
        public Boolean isEditable(Element element)
        {
            return _p.editableChoosable().isEditable(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.tableColumnGroup().getStereotype());
            }
            return false;
        }

    }
    public static class TableExpressionColumnStereotype extends StereotypeWrapper
    {


        //stereotype TableExpressionColumn and its tags
        public static final String STEREOTYPE_NAME =  "TableExpressionColumn";
        public static final String EDITABLE =  "editable";

        /**
         * An ocl expression.
         */public static final String EXPRESSION =  "expression";

        /**
         * Whether ocl expression should be evaluated per element or on collection of elements
         */public static final String ITERATE =  "iterate";

        private final SysMLExtensions _p;
        protected  TableExpressionColumnStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getEditableProperty()
        {
            return _p.editableChoosable().getEditableProperty();
        }

        @CheckForNull
        public Property getExpressionProperty()
        {
            return _p.expressionChoosable().getExpressionProperty();
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            return _p.expressionChoosable().getIterateProperty();
        }

        public void setEditable(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getEditableProperty(), value);
        }
        public void clearEditable(Element element)
        {
            _p.editableChoosable().clearEditable(element);
        }
        @CheckForNull
        public Boolean isEditable(Element element)
        {
            return _p.editableChoosable().isEditable(element);
        }
        public void setExpression(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getExpressionProperty(), value);
        }
        public void clearExpression(Element element)
        {
            _p.expressionChoosable().clearExpression(element);
        }
        @CheckForNull
        public String getExpression(Element element)
        {
            return _p.expressionChoosable().getExpression(element);
        }
        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            _p.expressionChoosable().clearIterate(element);
        }
        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return _p.expressionChoosable().isIterate(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.tableExpressionColumn().getStereotype());
            }
            return false;
        }

    }
    public static class TablePropertyColumnStereotype extends StereotypeWrapper
    {


        //stereotype TablePropertyColumn and its tags
        public static final String STEREOTYPE_NAME =  "TablePropertyColumn";
        public static final String EDITABLE =  "editable";

        /**
         * Property can be a stereotype property or value property of a class.
         */public static final String DESIREDPROPERTY =  "desiredProperty";

        private final SysMLExtensions _p;
        protected  TablePropertyColumnStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getEditableProperty()
        {
            return _p.editableChoosable().getEditableProperty();
        }

        @CheckForNull
        public Property getDesiredPropertyProperty()
        {
            return _p.propertyChoosable().getDesiredPropertyProperty();
        }

        public void setEditable(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getEditableProperty(), value);
        }
        public void clearEditable(Element element)
        {
            _p.editableChoosable().clearEditable(element);
        }
        @CheckForNull
        public Boolean isEditable(Element element)
        {
            return _p.editableChoosable().isEditable(element);
        }
        public void setDesiredProperty(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getDesiredPropertyProperty(), value);
        }
        public void clearDesiredProperty(Element element)
        {
            _p.propertyChoosable().clearDesiredProperty(element);
        }
        @CheckForNull
        public Element getDesiredProperty(Element element)
        {
            return _p.propertyChoosable().getDesiredProperty(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.tablePropertyColumn().getStereotype());
            }
            return false;
        }

    }
    public static class TableStructureStereotype extends StereotypeWrapper
    {


        //stereotype TableStructure and its tags
        public static final String STEREOTYPE_NAME =  "TableStructure";

        /**
         * Column widths from left to right, create a new value for each column. For View Editor, use % of table or see the 'width' attribute for tag Col https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col. For Docbook, it can be either a fixed measure using one of the CALS units (36pt, 10pc, etc.) or a proportional measure. Proportional measures have the form    number*   , meaning this column should be number times wider than a column with the measure    1*    (or just    *   ). These two forms can be mixed, as in    3*+1pc   . (Description taken from Docbook spec's ColSpec element)
         */public static final String COLWIDTHS =  "colwidths";

        /**
         * Applies to EMS, if true will not show headers on EMS.
         */public static final String HIDEHEADERS =  "hideHeaders";

        /**
         * Applies to how it's rendered on EMS, if table has no rows will not show table by default.
         */public static final String SHOWIFEMPTY =  "showIfEmpty";

        /**
         * This will be set as the class of the resulting html table.
         */public static final String STYLE =  "style";

        /**
         * If true will rotate table 90 degrees anticlockwise (not really transpose).
         */public static final String TRANSPOSE =  "transpose";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * The field takes ordered list of captions. Applicable to images and tables.
         */public static final String CAPTIONS =  "captions";

        /**
         * Exclude from lists like Table of Contents, List of Tables, List of Figures, etc., as applicable.
         */public static final String EXCLUDEFROMLIST =  "excludeFromList";
        public static final String SHOWCAPTIONS =  "showCaptions";

        /**
         * Where applicable, includes the documentation of the element. For tables, this will be shown in the column right after the element. For lists, it'll be shown right below.
         */public static final String INCLUDEDOC =  "includeDoc";

        /**
         * Given a list of stereotype properties, will return their value where applicable. This applies to certain tables, bulleted list, and collection action. For templates, they'll print out the property value(s). For collection, returns the values that are model elements. The stereotype properties can also be derived properties in customizations.
         */public static final String STEREOTYPEPROPERTIES =  "stereotypeProperties";

        private final SysMLExtensions _p;
        protected  TableStructureStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getColwidthsProperty()
        {
            return _p.table().getColwidthsProperty();
        }

        @CheckForNull
        public Property getHideHeadersProperty()
        {
            return _p.table().getHideHeadersProperty();
        }

        @CheckForNull
        public Property getShowIfEmptyProperty()
        {
            return _p.table().getShowIfEmptyProperty();
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            return _p.table().getStyleProperty();
        }

        @CheckForNull
        public Property getTransposeProperty()
        {
            return _p.table().getTransposeProperty();
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getCaptionsProperty()
        {
            return _p.hasCaptions().getCaptionsProperty();
        }

        @CheckForNull
        public Property getExcludeFromListProperty()
        {
            return _p.hasCaptions().getExcludeFromListProperty();
        }

        @CheckForNull
        public Property getShowCaptionsProperty()
        {
            return _p.hasCaptions().getShowCaptionsProperty();
        }

        @CheckForNull
        public Property getIncludeDocProperty()
        {
            return _p.documentationChoosable().getIncludeDocProperty();
        }

        @CheckForNull
        public Property getStereotypePropertiesProperty()
        {
            return _p.stereotypePropertiesChoosable().getStereotypePropertiesProperty();
        }

        public void setColwidths(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void clearColwidths(Element element)
        {
            _p.table().clearColwidths(element);
        }
        public void addColwidths(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getColwidthsProperty(), value);
        }
        public void removeColwidths(Element element, String value)
        {
            java.util.List<String> values = getColwidths(element);
            if (values.remove(value)) {
                setColwidths(element, values);
            }
        }
        public java.util.List<String> getColwidths(Element element)
        {
            return _p.table().getColwidths(element);
        }
        public void setHideHeaders(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getHideHeadersProperty(), value);
        }
        public void clearHideHeaders(Element element)
        {
            _p.table().clearHideHeaders(element);
        }
        @CheckForNull
        public Boolean isHideHeaders(Element element)
        {
            return _p.table().isHideHeaders(element);
        }
        public void setShowIfEmpty(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowIfEmptyProperty(), value);
        }
        public void clearShowIfEmpty(Element element)
        {
            _p.table().clearShowIfEmpty(element);
        }
        @CheckForNull
        public Boolean isShowIfEmpty(Element element)
        {
            return _p.table().isShowIfEmpty(element);
        }
        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            _p.table().clearStyle(element);
        }
        @CheckForNull
        public String getStyle(Element element)
        {
            return _p.table().getStyle(element);
        }
        public void setTranspose(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getTransposeProperty(), value);
        }
        public void clearTranspose(Element element)
        {
            _p.table().clearTranspose(element);
        }
        @CheckForNull
        public Boolean isTranspose(Element element)
        {
            return _p.table().isTranspose(element);
        }
        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setCaptions(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void clearCaptions(Element element)
        {
            _p.hasCaptions().clearCaptions(element);
        }
        public void addCaptions(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getCaptionsProperty(), value);
        }
        public void removeCaptions(Element element, String value)
        {
            java.util.List<String> values = getCaptions(element);
            if (values.remove(value)) {
                setCaptions(element, values);
            }
        }
        public java.util.List<String> getCaptions(Element element)
        {
            return _p.hasCaptions().getCaptions(element);
        }
        public void setExcludeFromList(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getExcludeFromListProperty(), value);
        }
        public void clearExcludeFromList(Element element)
        {
            _p.hasCaptions().clearExcludeFromList(element);
        }
        @CheckForNull
        public Boolean isExcludeFromList(Element element)
        {
            return _p.hasCaptions().isExcludeFromList(element);
        }
        public void setShowCaptions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getShowCaptionsProperty(), value);
        }
        public void clearShowCaptions(Element element)
        {
            _p.hasCaptions().clearShowCaptions(element);
        }
        @CheckForNull
        public Boolean isShowCaptions(Element element)
        {
            return _p.hasCaptions().isShowCaptions(element);
        }
        public void setIncludeDoc(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIncludeDocProperty(), value);
        }
        public void clearIncludeDoc(Element element)
        {
            _p.documentationChoosable().clearIncludeDoc(element);
        }
        @CheckForNull
        public Boolean isIncludeDoc(Element element)
        {
            return _p.documentationChoosable().isIncludeDoc(element);
        }
        public void setStereotypeProperties(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void clearStereotypeProperties(Element element)
        {
            _p.stereotypePropertiesChoosable().clearStereotypeProperties(element);
        }
        public void addStereotypeProperties(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStereotypePropertiesProperty(), value);
        }
        public void removeStereotypeProperties(Element element, Element value)
        {
            java.util.List<Element> values = getStereotypeProperties(element);
            if (values.remove(value)) {
                setStereotypeProperties(element, values);
            }
        }
        public java.util.List<Element> getStereotypeProperties(Element element)
        {
            return _p.stereotypePropertiesChoosable().getStereotypeProperties(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdstructuredactivities.StructuredActivityNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.tableStructure().getStereotype());
            }
            return false;
        }

    }
    public static class TemporalDiffStereotype extends StereotypeWrapper
    {


        //stereotype TemporalDiff and its tags
        public static final String STEREOTYPE_NAME =  "TemporalDiff";
        public static final String BASECOMMITID =  "baseCommitId";
        public static final String BASEREFID =  "baseRefId";
        public static final String COMPARECOMMITID =  "compareCommitId";
        public static final String COMPAREREFID =  "compareRefId";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * The attribute can be name, documentation, or value (in the case of property or slots)
         */public static final String DESIREDATTRIBUTE =  "desiredAttribute";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property baseCommitId;
        @CheckForNull
        private Property baseRefId;
        @CheckForNull
        private Property compareCommitId;
        @CheckForNull
        private Property compareRefId;
        protected  TemporalDiffStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getBaseCommitIdProperty()
        {
            if (baseCommitId == null)
            {
                baseCommitId = getTagByName(getStereotype(), BASECOMMITID);
            }
            return baseCommitId;
        }

        @CheckForNull
        public Property getBaseRefIdProperty()
        {
            if (baseRefId == null)
            {
                baseRefId = getTagByName(getStereotype(), BASEREFID);
            }
            return baseRefId;
        }

        @CheckForNull
        public Property getCompareCommitIdProperty()
        {
            if (compareCommitId == null)
            {
                compareCommitId = getTagByName(getStereotype(), COMPARECOMMITID);
            }
            return compareCommitId;
        }

        @CheckForNull
        public Property getCompareRefIdProperty()
        {
            if (compareRefId == null)
            {
                compareRefId = getTagByName(getStereotype(), COMPAREREFID);
            }
            return compareRefId;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getDesiredAttributeProperty()
        {
            return _p.attributeChoosable().getDesiredAttributeProperty();
        }

        public void setBaseCommitId(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getBaseCommitIdProperty(), value);
        }
        public void clearBaseCommitId(Element element)
        {
            Profiles.clearValue(element, getBaseCommitIdProperty());
        }

        @CheckForNull
        public String getBaseCommitId(Element element)
        {
            return toString(Profiles.getFirstValue(element, getBaseCommitIdProperty()));
        }

        public void setBaseRefId(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getBaseRefIdProperty(), value);
        }
        public void clearBaseRefId(Element element)
        {
            Profiles.clearValue(element, getBaseRefIdProperty());
        }

        @CheckForNull
        public String getBaseRefId(Element element)
        {
            return toString(Profiles.getFirstValue(element, getBaseRefIdProperty()));
        }

        public void setCompareCommitId(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getCompareCommitIdProperty(), value);
        }
        public void clearCompareCommitId(Element element)
        {
            Profiles.clearValue(element, getCompareCommitIdProperty());
        }

        @CheckForNull
        public String getCompareCommitId(Element element)
        {
            return toString(Profiles.getFirstValue(element, getCompareCommitIdProperty()));
        }

        public void setCompareRefId(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getCompareRefIdProperty(), value);
        }
        public void clearCompareRefId(Element element)
        {
            Profiles.clearValue(element, getCompareRefIdProperty());
        }

        @CheckForNull
        public String getCompareRefId(Element element)
        {
            return toString(Profiles.getFirstValue(element, getCompareRefIdProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setDesiredAttribute(Element element, @CheckForNull AttributeEnum value)
        {
            Profiles.setValue(element, getStereotype(), getDesiredAttributeProperty(), value != null ? value.getText() : null);
        }
        public void clearDesiredAttribute(Element element)
        {
            _p.attributeChoosable().clearDesiredAttribute(element);
        }
        @CheckForNull
        public AttributeEnum getDesiredAttribute(Element element)
        {
            return _p.attributeChoosable().getDesiredAttribute(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            baseCommitId = null;
            baseRefId = null;
            compareCommitId = null;
            compareRefId = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.temporalDiff().getStereotype());
            }
            return false;
        }

    }
    public static class TomSawyerDiagramStereotype extends StereotypeWrapper
    {


        //stereotype TomSawyerDiagram and its tags
        public static final String STEREOTYPE_NAME =  "TomSawyerDiagram";

        /**
         * Option to automatically collect additional elements that are related to the exposed elements. The relations that are considered vary depending on the diagram type selected.
         */public static final String COLLECTRELATEDELEMENTS =  "collectRelatedElements";

        /**
         * [Required] Type of diagram to generate.
         */public static final String DIAGRAMTYPE =  "diagramType";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property collectRelatedElements;
        @CheckForNull
        private Property diagramType;
        protected  TomSawyerDiagramStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getCollectRelatedElementsProperty()
        {
            if (collectRelatedElements == null)
            {
                collectRelatedElements = getTagByName(getStereotype(), COLLECTRELATEDELEMENTS);
            }
            return collectRelatedElements;
        }

        @CheckForNull
        public Property getDiagramTypeProperty()
        {
            if (diagramType == null)
            {
                diagramType = getTagByName(getStereotype(), DIAGRAMTYPE);
            }
            return diagramType;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        public void setCollectRelatedElements(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getCollectRelatedElementsProperty(), value);
        }
        public void clearCollectRelatedElements(Element element)
        {
            Profiles.clearValue(element, getCollectRelatedElementsProperty());
        }

        @CheckForNull
        public Boolean isCollectRelatedElements(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getCollectRelatedElementsProperty()));
        }

        public void setDiagramType(Element element, @CheckForNull TomSawyerDiagramTypeEnum value)
        {
            Profiles.setValue(element, getStereotype(), getDiagramTypeProperty(), value != null ? value.getText() : null);
        }
        public void clearDiagramType(Element element)
        {
            Profiles.clearValue(element, getDiagramTypeProperty());
        }

        @CheckForNull
        public TomSawyerDiagramTypeEnum getDiagramType(Element element)
        {
            return TomSawyerDiagramTypeEnum.from(Profiles.getFirstValue(element, getDiagramTypeProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            collectRelatedElements = null;
            diagramType = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.tomSawyerDiagram().getStereotype());
            }
            return false;
        }

    }
    public static class UnionStereotype extends StereotypeWrapper
    {


        //stereotype Union and its tags
        public static final String STEREOTYPE_NAME =  "Union";

        private final SysMLExtensions _p;
        protected  UnionStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdintermediateactivities.MergeNode &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdintermediateactivities.MergeNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.union().getStereotype());
            }
            return false;
        }

    }
    public static class UserScriptStereotype extends StereotypeWrapper
    {


        //stereotype UserScript and its tags
        public static final String STEREOTYPE_NAME =  "UserScript";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        private final SysMLExtensions _p;
        protected  UserScriptStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Classifier) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Classifier)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.userScript().getStereotype());
            }
            return false;
        }

    }
    public static class ValidationScriptStereotype extends StereotypeWrapper
    {


        //stereotype ValidationScript and its tags
        public static final String STEREOTYPE_NAME =  "ValidationScript";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        private final SysMLExtensions _p;
        protected  ValidationScriptStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Classifier) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Classifier)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.validationScript().getStereotype());
            }
            return false;
        }

    }
    public static class ViewpointConstraintStereotype extends StereotypeWrapper
    {


        //stereotype ViewpointConstraint and its tags
        public static final String STEREOTYPE_NAME =  "ViewpointConstraint";
        public static final String VALIDATIONREPORT =  "validationReport";

        /**
         * This is what is given to the template for output. If this is empty, the current context of targets is used instead. (for example inside structured queries)
         */public static final String TARGETS =  "targets";

        /**
         * If true, skips executing this document element.
         */public static final String IGNORE =  "ignore";

        /**
         * This field stores the title or titles of the template output. Applicable for most tables and structured queries.
         */public static final String TITLES =  "titles";

        /**
         * String prepended to title as is (you will need to put in spaces if you want it)
         */public static final String TITLEPREFIX =  "titlePrefix";

        /**
         * String appended to title as is (you'll need to put in a space if you want it)
         */public static final String TITLESUFFIX =  "titleSuffix";

        /**
         * When a title is otherwise empty or undefined, this will use the containing section title instead. The title taken will be the title without any prefix or suffix added. This is generally used in viewpoints to auto generate titles.
         */public static final String USESECTIONNAMEASTITLE =  "useSectionNameAsTitle";

        /**
         * If there's a current context of targets, loops through them one by one. If this is a structured query and createSections is true, each element looped through will generate a section with the name of the element as the title. Similar behavior for sections. For queries, depending on the query type (usually a table), creates a relevant table for each element.
         */public static final String LOOP =  "loop";

        /**
         * An ocl expression.
         */public static final String EXPRESSION =  "expression";

        /**
         * Whether ocl expression should be evaluated per element or on collection of elements
         */public static final String ITERATE =  "iterate";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property validationReport;
        protected  ViewpointConstraintStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getValidationReportProperty()
        {
            if (validationReport == null)
            {
                validationReport = getTagByName(getStereotype(), VALIDATIONREPORT);
            }
            return validationReport;
        }

        @CheckForNull
        public Property getTargetsProperty()
        {
            return _p.formattingAndDisplayTemplate().getTargetsProperty();
        }

        @CheckForNull
        public Property getIgnoreProperty()
        {
            return _p.ignorable().getIgnoreProperty();
        }

        @CheckForNull
        public Property getTitlesProperty()
        {
            return _p.hasTitles().getTitlesProperty();
        }

        @CheckForNull
        public Property getTitlePrefixProperty()
        {
            return _p.hasTitleStuff().getTitlePrefixProperty();
        }

        @CheckForNull
        public Property getTitleSuffixProperty()
        {
            return _p.hasTitleStuff().getTitleSuffixProperty();
        }

        @CheckForNull
        public Property getUseSectionNameAsTitleProperty()
        {
            return _p.hasTitleStuff().getUseSectionNameAsTitleProperty();
        }

        @CheckForNull
        public Property getLoopProperty()
        {
            return _p.loopable().getLoopProperty();
        }

        @CheckForNull
        public Property getExpressionProperty()
        {
            return _p.expressionChoosable().getExpressionProperty();
        }

        @CheckForNull
        public Property getIterateProperty()
        {
            return _p.expressionChoosable().getIterateProperty();
        }

        public void setValidationReport(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getValidationReportProperty(), value);
        }
        public void clearValidationReport(Element element)
        {
            Profiles.clearValue(element, getValidationReportProperty());
        }

        @CheckForNull
        public Boolean isValidationReport(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getValidationReportProperty()));
        }

        public void setTargets(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void clearTargets(Element element)
        {
            _p.formattingAndDisplayTemplate().clearTargets(element);
        }
        public void addTargets(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getTargetsProperty(), value);
        }
        public void removeTargets(Element element, Element value)
        {
            java.util.List<Element> values = getTargets(element);
            if (values.remove(value)) {
                setTargets(element, values);
            }
        }
        public java.util.List<Element> getTargets(Element element)
        {
            return _p.formattingAndDisplayTemplate().getTargets(element);
        }
        public void setIgnore(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIgnoreProperty(), value);
        }
        public void clearIgnore(Element element)
        {
            _p.ignorable().clearIgnore(element);
        }
        @CheckForNull
        public Boolean isIgnore(Element element)
        {
            return _p.ignorable().isIgnore(element);
        }
        public void setTitles(Element element, @CheckForNull java.util.Collection<String> value)
        {
            Profiles.setValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void clearTitles(Element element)
        {
            _p.hasTitles().clearTitles(element);
        }
        public void addTitles(Element element, String value)
        {
            Profiles.addValue(element, getStereotype(), getTitlesProperty(), value);
        }
        public void removeTitles(Element element, String value)
        {
            java.util.List<String> values = getTitles(element);
            if (values.remove(value)) {
                setTitles(element, values);
            }
        }
        public java.util.List<String> getTitles(Element element)
        {
            return _p.hasTitles().getTitles(element);
        }
        public void setTitlePrefix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitlePrefixProperty(), value);
        }
        public void clearTitlePrefix(Element element)
        {
            _p.hasTitleStuff().clearTitlePrefix(element);
        }
        @CheckForNull
        public String getTitlePrefix(Element element)
        {
            return _p.hasTitleStuff().getTitlePrefix(element);
        }
        public void setTitleSuffix(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getTitleSuffixProperty(), value);
        }
        public void clearTitleSuffix(Element element)
        {
            _p.hasTitleStuff().clearTitleSuffix(element);
        }
        @CheckForNull
        public String getTitleSuffix(Element element)
        {
            return _p.hasTitleStuff().getTitleSuffix(element);
        }
        public void setUseSectionNameAsTitle(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getUseSectionNameAsTitleProperty(), value);
        }
        public void clearUseSectionNameAsTitle(Element element)
        {
            _p.hasTitleStuff().clearUseSectionNameAsTitle(element);
        }
        @CheckForNull
        public Boolean isUseSectionNameAsTitle(Element element)
        {
            return _p.hasTitleStuff().isUseSectionNameAsTitle(element);
        }
        public void setLoop(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getLoopProperty(), value);
        }
        public void clearLoop(Element element)
        {
            _p.loopable().clearLoop(element);
        }
        @CheckForNull
        public Boolean isLoop(Element element)
        {
            return _p.loopable().isLoop(element);
        }
        public void setExpression(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getExpressionProperty(), value);
        }
        public void clearExpression(Element element)
        {
            _p.expressionChoosable().clearExpression(element);
        }
        @CheckForNull
        public String getExpression(Element element)
        {
            return _p.expressionChoosable().getExpression(element);
        }
        public void setIterate(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIterateProperty(), value);
        }
        public void clearIterate(Element element)
        {
            _p.expressionChoosable().clearIterate(element);
        }
        @CheckForNull
        public Boolean isIterate(Element element)
        {
            return _p.expressionChoosable().isIterate(element);
        }
        @Override
        protected void clear()
        {
            super.clear();
            validationReport = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.actions.mdbasicactions.CallBehaviorAction
                    || element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdfundamentalactivities.Activity)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.viewpointConstraint().getStereotype());
            }
            return false;
        }

    }
    public static class XorStereotype extends StereotypeWrapper
    {


        //stereotype XOR and its tags
        public static final String STEREOTYPE_NAME =  "XOR";

        private final SysMLExtensions _p;
        protected  XorStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdintermediateactivities.DecisionNode &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.activities.mdintermediateactivities.DecisionNode)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.xor().getStereotype());
            }
            return false;
        }

    }
    public static class AspectStereotype extends StereotypeWrapper
    {


        //stereotype aspect and its tags
        public static final String STEREOTYPE_NAME =  "aspect";

        private final SysMLExtensions _p;
        protected  AspectStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.classes.mddependencies.Dependency &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mddependencies.Dependency)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.aspect().getStereotype());
            }
            return false;
        }

    }
    public static class CharacterizesStereotype extends StereotypeWrapper
    {


        //stereotype characterizes and its tags
        public static final String STEREOTYPE_NAME =  "characterizes";

        private final SysMLExtensions _p;
        protected  CharacterizesStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return element instanceof com.nomagic.uml2.ext.magicdraw.classes.mddependencies.Dependency &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mddependencies.Dependency)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.characterizes().getStereotype());
            }
            return false;
        }

    }
    public static class ViewStereotype extends StereotypeWrapper
    {


        //stereotype view and its tags
        public static final String STEREOTYPE_NAME =  "view";

        /**
         * For Images
         */public static final String CAPTION =  "caption";
        public static final String COLLECTVIEWACTIONS =  "collectViewActions";
        public static final String ELEMENTS =  "elements";
        public static final String STYLE =  "style";
        public static final String STAKEHOLDER =  "stakeholder";

        /**
         * The viewpoint for this View, derived from the supplier of the   conform   dependency whose client is this View.
         */public static final String VIEWPOINT =  "viewPoint";

        /**
         * If true, then the block is treated as a black box; a part typed by this black box can only be connected via its ports or directly to its outer boundary. If false, or if a value is not present, then connections can be established to elements of its internal structure via deep-nested connector ends.
         */public static final String ISENCAPSULATED =  "isEncapsulated";

        private final SysMLExtensions _p;
        @CheckForNull
        private Property caption;
        @CheckForNull
        private Property collectViewActions;
        @CheckForNull
        private Property elements;
        @CheckForNull
        private Property style;
        @CheckForNull
        private Property stakeholder;
        @CheckForNull
        private Property viewPoint;
        @CheckForNull
        private Property isEncapsulated;
        protected  ViewStereotype(SysMLExtensions profile)
        {
            super(profile);
            _p = profile;
        }
        @Override
        @SuppressWarnings("ConstantConditions")
        public Stereotype getStereotype()
        {
            return getElementByName(STEREOTYPE_NAME);
        }
        @CheckForNull
        public Property getCaptionProperty()
        {
            if (caption == null)
            {
                caption = getTagByName(getStereotype(), CAPTION);
            }
            return caption;
        }

        @CheckForNull
        public Property getCollectViewActionsProperty()
        {
            if (collectViewActions == null)
            {
                collectViewActions = getTagByName(getStereotype(), COLLECTVIEWACTIONS);
            }
            return collectViewActions;
        }

        @CheckForNull
        public Property getElementsProperty()
        {
            if (elements == null)
            {
                elements = getTagByName(getStereotype(), ELEMENTS);
            }
            return elements;
        }

        @CheckForNull
        public Property getStyleProperty()
        {
            if (style == null)
            {
                style = getTagByName(getStereotype(), STYLE);
            }
            return style;
        }

        @CheckForNull
        public Property getStakeholderProperty()
        {
            if (stakeholder == null)
            {
                stakeholder = getTagByName(getStereotype(), STAKEHOLDER);
            }
            return stakeholder;
        }

        @CheckForNull
        public Property getViewPointProperty()
        {
            if (viewPoint == null)
            {
                viewPoint = getTagByName(getStereotype(), VIEWPOINT);
            }
            return viewPoint;
        }

        @CheckForNull
        public Property getIsEncapsulatedProperty()
        {
            if (isEncapsulated == null)
            {
                isEncapsulated = getTagByName(getStereotype(), ISENCAPSULATED);
            }
            return isEncapsulated;
        }

        public void setCaption(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getCaptionProperty(), value);
        }
        public void clearCaption(Element element)
        {
            Profiles.clearValue(element, getCaptionProperty());
        }

        @CheckForNull
        public String getCaption(Element element)
        {
            return toString(Profiles.getFirstValue(element, getCaptionProperty()));
        }

        public void setCollectViewActions(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getCollectViewActionsProperty(), value);
        }
        public void clearCollectViewActions(Element element)
        {
            Profiles.clearValue(element, getCollectViewActionsProperty());
        }

        @CheckForNull
        public Boolean isCollectViewActions(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getCollectViewActionsProperty()));
        }

        public void setElements(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getElementsProperty(), value);
        }
        public void clearElements(Element element)
        {
            Profiles.clearValue(element, getElementsProperty());
        }

        @CheckForNull
        public String getElements(Element element)
        {
            return toString(Profiles.getFirstValue(element, getElementsProperty()));
        }

        public void setStyle(Element element, @CheckForNull String value)
        {
            Profiles.setValue(element, getStereotype(), getStyleProperty(), value);
        }
        public void clearStyle(Element element)
        {
            Profiles.clearValue(element, getStyleProperty());
        }

        @CheckForNull
        public String getStyle(Element element)
        {
            return toString(Profiles.getFirstValue(element, getStyleProperty()));
        }

        public void setStakeholder(Element element, @CheckForNull java.util.Collection<? extends Element> value)
        {
            Profiles.setValue(element, getStereotype(), getStakeholderProperty(), value);
        }
        public void clearStakeholder(Element element)
        {
            Profiles.clearValue(element, getStakeholderProperty());
        }
        public void addStakeholder(Element element, Element value)
        {
            Profiles.addValue(element, getStereotype(), getStakeholderProperty(), value);
        }
        public void removeStakeholder(Element element, Element value)
        {
            java.util.List<Element> values = getStakeholder(element);
            if (values.remove(value)) {
                setStakeholder(element, values);
            }
        }
        @SuppressWarnings("unchecked")
        public java.util.List<Element> getStakeholder(Element element)
        {
            return (java.util.List<Element>)Profiles.getValue(element, getStakeholderProperty());
        }

        public void setViewPoint(Element element, @CheckForNull Element value)
        {
            Profiles.setValue(element, getStereotype(), getViewPointProperty(), value);
        }
        public void clearViewPoint(Element element)
        {
            Profiles.clearValue(element, getViewPointProperty());
        }

        @CheckForNull
        public Element getViewPoint(Element element)
        {
            return (Element)Profiles.getFirstValue(element, getViewPointProperty());
        }

        public void setIsEncapsulated(Element element, @CheckForNull Boolean value)
        {
            Profiles.setValue(element, getStereotype(), getIsEncapsulatedProperty(), value);
        }
        public void clearIsEncapsulated(Element element)
        {
            Profiles.clearValue(element, getIsEncapsulatedProperty());
        }

        @CheckForNull
        public Boolean isIsEncapsulated(Element element)
        {
            return toBoolean(Profiles.getFirstValue(element, getIsEncapsulatedProperty()));
        }

        @Override
        protected void clear()
        {
            super.clear();
            caption = null;
            collectViewActions = null;
            elements = null;
            style = null;
            stakeholder = null;
            viewPoint = null;
            isEncapsulated = null;
        }
        @Override
        public boolean is(@CheckForNull Element element)
        {
            return (element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package) &&
                    _p.isTypeOf(element, getStereotype());
        }

        public static boolean isInstance(@CheckForNull Element element)
        {
            if(element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Class
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram
                    || element instanceof com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Package)
            {
                SysMLExtensions instance = getInstance(element);
                return instance.isTypeOf(element, instance.view().getStereotype());
            }
            return false;
        }

    }

    @Override
    protected Collection<ProfileElementWrapper> generatedGetAllElementWrappers()
    {
        Collection<ProfileElementWrapper> wrappers = new ArrayList<>();
        wrappers.add(appendixViewStereotype);
        wrappers.add(associationTypeChoosableStereotype);
        wrappers.add(attributeChoosableStereotype);
        wrappers.add(bulletedListStereotype);
        wrappers.add(collectFilterUserScriptStereotype);
        wrappers.add(collectByAssociationStereotype);
        wrappers.add(collectByDirectedRelationshipMetaclassesStereotype);
        wrappers.add(collectByDirectedRelationshipStereotypesStereotype);
        wrappers.add(collectByExpressionStereotype);
        wrappers.add(collectByStereotypePropertiesStereotype);
        wrappers.add(collectClassifierAttributesStereotype);
        wrappers.add(collectOrFilterStereotype);
        wrappers.add(collectOwnedElementsStereotype);
        wrappers.add(collectOwnersStereotype);
        wrappers.add(collectThingsOnDiagramStereotype);
        wrappers.add(collectTypesStereotype);
        wrappers.add(collectionAndFilterGroupStereotype);
        wrappers.add(conformsStereotype);
        wrappers.add(considerDerivedChoosableStereotype);
        wrappers.add(constraintStereotype);
        wrappers.add(containerStereotype);
        wrappers.add(depthChoosableStereotype);
        wrappers.add(diagramTypeChoosableStereotype);
        wrappers.add(directionChoosableStereotype);
        wrappers.add(docGenScriptStereotype);
        wrappers.add(documentStereotype);
        wrappers.add(documentMetaStereotype);
        wrappers.add(documentationChoosableStereotype);
        wrappers.add(documentationSkippableStereotype);
        wrappers.add(dynamicViewStereotype);
        wrappers.add(editableChoosableStereotype);
        wrappers.add(editableTableStereotype);
        wrappers.add(exposeStereotype);
        wrappers.add(expressionStereotype);
        wrappers.add(expressionChoosableStereotype);
        wrappers.add(expressionLibraryStereotype);
        wrappers.add(filterByDiagramTypeStereotype);
        wrappers.add(filterByExpressionStereotype);
        wrappers.add(filterByMetaclassesStereotype);
        wrappers.add(filterByNamesStereotype);
        wrappers.add(filterByStereotypesStereotype);
        wrappers.add(formattingAndDisplayTemplateStereotype);
        wrappers.add(genericTableStereotype);
        wrappers.add(groupStereotype);
        wrappers.add(hasCaptionsStereotype);
        wrappers.add(hasTimeoutStereotype);
        wrappers.add(hasTitleStereotype);
        wrappers.add(hasTitleStuffStereotype);
        wrappers.add(hasTitlesStereotype);
        wrappers.add(hasTypesStereotype);
        wrappers.add(headersChoosableStereotype);
        wrappers.add(hierarchicalPropertiesTableStereotype);
        wrappers.add(ignorableStereotype);
        wrappers.add(imageStereotype);
        wrappers.add(includeChoosableStereotype);
        wrappers.add(includeInheritedChoosableStereotype);
        wrappers.add(intersectionStereotype);
        wrappers.add(javaExtensionStereotype);
        wrappers.add(loopableStereotype);
        wrappers.add(metaclassChoosableStereotype);
        wrappers.add(methodStereotype);
        wrappers.add(modelManagementSystemStereotype);
        wrappers.add(nameChoosableStereotype);
        wrappers.add(paragraphStereotype);
        wrappers.add(parallelStereotype);
        wrappers.add(plotStereotype);
        wrappers.add(precisionChoosableStereotype);
        wrappers.add(productStereotype);
        wrappers.add(propertiesTableByAttributesStereotype);
        wrappers.add(propertyChoosableStereotype);
        wrappers.add(removeDuplicatesStereotype);
        wrappers.add(simulateStereotype);
        wrappers.add(skippableStereotype);
        wrappers.add(sortByAttributeStereotype);
        wrappers.add(sortByExpressionStereotype);
        wrappers.add(sortByNameStereotype);
        wrappers.add(sortByPropertyStereotype);
        wrappers.add(sortableStereotype);
        wrappers.add(stereotypeChoosableStereotype);
        wrappers.add(stereotypePropertiesChoosableStereotype);
        wrappers.add(stereotypedRelationshipsChoosableStereotype);
        wrappers.add(structuredQueryStereotype);
        wrappers.add(tableStereotype);
        wrappers.add(tableAttributeColumnStereotype);
        wrappers.add(tableColumnStereotype);
        wrappers.add(tableColumnGroupStereotype);
        wrappers.add(tableExpressionColumnStereotype);
        wrappers.add(tablePropertyColumnStereotype);
        wrappers.add(tableStructureStereotype);
        wrappers.add(temporalDiffStereotype);
        wrappers.add(tomSawyerDiagramStereotype);
        wrappers.add(unionStereotype);
        wrappers.add(userScriptStereotype);
        wrappers.add(validationScriptStereotype);
        wrappers.add(viewpointConstraintStereotype);
        wrappers.add(xorStereotype);
        wrappers.add(aspectStereotype);
        wrappers.add(characterizesStereotype);
        wrappers.add(viewStereotype);
        wrappers.add(attributeEnumeration);
        wrappers.add(diagramTypeEnumeration);
        wrappers.add(languageEnumeration);
        wrappers.add(plotTypeEnumeration);
        wrappers.add(tomSawyerDiagramTypeEnumeration);
        return wrappers;
    }


    @Override
    protected Collection<Stereotype> generatedGetAllStereotypes()
    {
        if (getProfile() != null)
        {
            final Collection<Stereotype> stereotypes = new HashSet<>();

            stereotypes.add(appendixViewStereotype.getStereotype());
            stereotypes.add(associationTypeChoosableStereotype.getStereotype());
            stereotypes.add(attributeChoosableStereotype.getStereotype());
            stereotypes.add(bulletedListStereotype.getStereotype());
            stereotypes.add(collectFilterUserScriptStereotype.getStereotype());
            stereotypes.add(collectByAssociationStereotype.getStereotype());
            stereotypes.add(collectByDirectedRelationshipMetaclassesStereotype.getStereotype());
            stereotypes.add(collectByDirectedRelationshipStereotypesStereotype.getStereotype());
            stereotypes.add(collectByExpressionStereotype.getStereotype());
            stereotypes.add(collectByStereotypePropertiesStereotype.getStereotype());
            stereotypes.add(collectClassifierAttributesStereotype.getStereotype());
            stereotypes.add(collectOrFilterStereotype.getStereotype());
            stereotypes.add(collectOwnedElementsStereotype.getStereotype());
            stereotypes.add(collectOwnersStereotype.getStereotype());
            stereotypes.add(collectThingsOnDiagramStereotype.getStereotype());
            stereotypes.add(collectTypesStereotype.getStereotype());
            stereotypes.add(collectionAndFilterGroupStereotype.getStereotype());
            stereotypes.add(conformsStereotype.getStereotype());
            stereotypes.add(considerDerivedChoosableStereotype.getStereotype());
            stereotypes.add(constraintStereotype.getStereotype());
            stereotypes.add(containerStereotype.getStereotype());
            stereotypes.add(depthChoosableStereotype.getStereotype());
            stereotypes.add(diagramTypeChoosableStereotype.getStereotype());
            stereotypes.add(directionChoosableStereotype.getStereotype());
            stereotypes.add(docGenScriptStereotype.getStereotype());
            stereotypes.add(documentStereotype.getStereotype());
            stereotypes.add(documentMetaStereotype.getStereotype());
            stereotypes.add(documentationChoosableStereotype.getStereotype());
            stereotypes.add(documentationSkippableStereotype.getStereotype());
            stereotypes.add(dynamicViewStereotype.getStereotype());
            stereotypes.add(editableChoosableStereotype.getStereotype());
            stereotypes.add(editableTableStereotype.getStereotype());
            stereotypes.add(exposeStereotype.getStereotype());
            stereotypes.add(expressionStereotype.getStereotype());
            stereotypes.add(expressionChoosableStereotype.getStereotype());
            stereotypes.add(expressionLibraryStereotype.getStereotype());
            stereotypes.add(filterByDiagramTypeStereotype.getStereotype());
            stereotypes.add(filterByExpressionStereotype.getStereotype());
            stereotypes.add(filterByMetaclassesStereotype.getStereotype());
            stereotypes.add(filterByNamesStereotype.getStereotype());
            stereotypes.add(filterByStereotypesStereotype.getStereotype());
            stereotypes.add(formattingAndDisplayTemplateStereotype.getStereotype());
            stereotypes.add(genericTableStereotype.getStereotype());
            stereotypes.add(groupStereotype.getStereotype());
            stereotypes.add(hasCaptionsStereotype.getStereotype());
            stereotypes.add(hasTimeoutStereotype.getStereotype());
            stereotypes.add(hasTitleStereotype.getStereotype());
            stereotypes.add(hasTitleStuffStereotype.getStereotype());
            stereotypes.add(hasTitlesStereotype.getStereotype());
            stereotypes.add(hasTypesStereotype.getStereotype());
            stereotypes.add(headersChoosableStereotype.getStereotype());
            stereotypes.add(hierarchicalPropertiesTableStereotype.getStereotype());
            stereotypes.add(ignorableStereotype.getStereotype());
            stereotypes.add(imageStereotype.getStereotype());
            stereotypes.add(includeChoosableStereotype.getStereotype());
            stereotypes.add(includeInheritedChoosableStereotype.getStereotype());
            stereotypes.add(intersectionStereotype.getStereotype());
            stereotypes.add(javaExtensionStereotype.getStereotype());
            stereotypes.add(loopableStereotype.getStereotype());
            stereotypes.add(metaclassChoosableStereotype.getStereotype());
            stereotypes.add(methodStereotype.getStereotype());
            stereotypes.add(modelManagementSystemStereotype.getStereotype());
            stereotypes.add(nameChoosableStereotype.getStereotype());
            stereotypes.add(paragraphStereotype.getStereotype());
            stereotypes.add(parallelStereotype.getStereotype());
            stereotypes.add(plotStereotype.getStereotype());
            stereotypes.add(precisionChoosableStereotype.getStereotype());
            stereotypes.add(productStereotype.getStereotype());
            stereotypes.add(propertiesTableByAttributesStereotype.getStereotype());
            stereotypes.add(propertyChoosableStereotype.getStereotype());
            stereotypes.add(removeDuplicatesStereotype.getStereotype());
            stereotypes.add(simulateStereotype.getStereotype());
            stereotypes.add(skippableStereotype.getStereotype());
            stereotypes.add(sortByAttributeStereotype.getStereotype());
            stereotypes.add(sortByExpressionStereotype.getStereotype());
            stereotypes.add(sortByNameStereotype.getStereotype());
            stereotypes.add(sortByPropertyStereotype.getStereotype());
            stereotypes.add(sortableStereotype.getStereotype());
            stereotypes.add(stereotypeChoosableStereotype.getStereotype());
            stereotypes.add(stereotypePropertiesChoosableStereotype.getStereotype());
            stereotypes.add(stereotypedRelationshipsChoosableStereotype.getStereotype());
            stereotypes.add(structuredQueryStereotype.getStereotype());
            stereotypes.add(tableStereotype.getStereotype());
            stereotypes.add(tableAttributeColumnStereotype.getStereotype());
            stereotypes.add(tableColumnStereotype.getStereotype());
            stereotypes.add(tableColumnGroupStereotype.getStereotype());
            stereotypes.add(tableExpressionColumnStereotype.getStereotype());
            stereotypes.add(tablePropertyColumnStereotype.getStereotype());
            stereotypes.add(tableStructureStereotype.getStereotype());
            stereotypes.add(temporalDiffStereotype.getStereotype());
            stereotypes.add(tomSawyerDiagramStereotype.getStereotype());
            stereotypes.add(unionStereotype.getStereotype());
            stereotypes.add(userScriptStereotype.getStereotype());
            stereotypes.add(validationScriptStereotype.getStereotype());
            stereotypes.add(viewpointConstraintStereotype.getStereotype());
            stereotypes.add(xorStereotype.getStereotype());
            stereotypes.add(aspectStereotype.getStereotype());
            stereotypes.add(characterizesStereotype.getStereotype());
            stereotypes.add(viewStereotype.getStereotype());

            return stereotypes;
        }

        return Collections.emptyList();
    }


}
//MD5sum:2C71B0B982A0DBAEA02ACE90B735BDC8
